// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/twiglab/crm/adv/orm/ent/mall"
)

// Mall is the model entity for the Mall schema.
type Mall struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// MallCode holds the value of the "mall_code" field.
	MallCode string `json:"mall_code,omitempty"`
	// MallName holds the value of the "mall_name" field.
	MallName string `json:"mall_name,omitempty"`
	// H3Index6 holds the value of the "h3_index_6" field.
	H3Index6 string `json:"h3_index_6,omitempty"`
	// H3Index7 holds the value of the "h3_index_7" field.
	H3Index7 string `json:"h3_index_7,omitempty"`
	// H3Index8 holds the value of the "h3_index_8" field.
	H3Index8 string `json:"h3_index_8,omitempty"`
	// Memo holds the value of the "memo" field.
	Memo string `json:"memo,omitempty"`
	// StartTime holds the value of the "start_time" field.
	StartTime time.Time `json:"start_time,omitempty"`
	// Status holds the value of the "status" field.
	Status       int `json:"status,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Mall) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case mall.FieldStatus:
			values[i] = new(sql.NullInt64)
		case mall.FieldCode, mall.FieldMallCode, mall.FieldMallName, mall.FieldH3Index6, mall.FieldH3Index7, mall.FieldH3Index8, mall.FieldMemo:
			values[i] = new(sql.NullString)
		case mall.FieldCreateTime, mall.FieldUpdateTime, mall.FieldStartTime:
			values[i] = new(sql.NullTime)
		case mall.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Mall fields.
func (m *Mall) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case mall.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				m.ID = *value
			}
		case mall.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				m.CreateTime = value.Time
			}
		case mall.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				m.UpdateTime = value.Time
			}
		case mall.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				m.Code = value.String
			}
		case mall.FieldMallCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mall_code", values[i])
			} else if value.Valid {
				m.MallCode = value.String
			}
		case mall.FieldMallName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mall_name", values[i])
			} else if value.Valid {
				m.MallName = value.String
			}
		case mall.FieldH3Index6:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field h3_index_6", values[i])
			} else if value.Valid {
				m.H3Index6 = value.String
			}
		case mall.FieldH3Index7:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field h3_index_7", values[i])
			} else if value.Valid {
				m.H3Index7 = value.String
			}
		case mall.FieldH3Index8:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field h3_index_8", values[i])
			} else if value.Valid {
				m.H3Index8 = value.String
			}
		case mall.FieldMemo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field memo", values[i])
			} else if value.Valid {
				m.Memo = value.String
			}
		case mall.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_time", values[i])
			} else if value.Valid {
				m.StartTime = value.Time
			}
		case mall.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				m.Status = int(value.Int64)
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Mall.
// This includes values selected through modifiers, order, etc.
func (m *Mall) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// Update returns a builder for updating this Mall.
// Note that you need to call Mall.Unwrap() before calling this method if this Mall
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Mall) Update() *MallUpdateOne {
	return NewMallClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Mall entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Mall) Unwrap() *Mall {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Mall is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Mall) String() string {
	var builder strings.Builder
	builder.WriteString("Mall(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("create_time=")
	builder.WriteString(m.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(m.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(m.Code)
	builder.WriteString(", ")
	builder.WriteString("mall_code=")
	builder.WriteString(m.MallCode)
	builder.WriteString(", ")
	builder.WriteString("mall_name=")
	builder.WriteString(m.MallName)
	builder.WriteString(", ")
	builder.WriteString("h3_index_6=")
	builder.WriteString(m.H3Index6)
	builder.WriteString(", ")
	builder.WriteString("h3_index_7=")
	builder.WriteString(m.H3Index7)
	builder.WriteString(", ")
	builder.WriteString("h3_index_8=")
	builder.WriteString(m.H3Index8)
	builder.WriteString(", ")
	builder.WriteString("memo=")
	builder.WriteString(m.Memo)
	builder.WriteString(", ")
	builder.WriteString("start_time=")
	builder.WriteString(m.StartTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", m.Status))
	builder.WriteByte(')')
	return builder.String()
}

// Malls is a parsable slice of Mall.
type Malls []*Mall
