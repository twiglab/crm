// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/twiglab/crm/adv/orm/ent/adv"
	"github.com/twiglab/crm/adv/orm/ent/predicate"
)

// AdvUpdate is the builder for updating Adv entities.
type AdvUpdate struct {
	config
	hooks    []Hook
	mutation *AdvMutation
}

// Where appends a list predicates to the AdvUpdate builder.
func (au *AdvUpdate) Where(ps ...predicate.Adv) *AdvUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetUpdateTime sets the "update_time" field.
func (au *AdvUpdate) SetUpdateTime(t time.Time) *AdvUpdate {
	au.mutation.SetUpdateTime(t)
	return au
}

// SetMallName sets the "mall_name" field.
func (au *AdvUpdate) SetMallName(s string) *AdvUpdate {
	au.mutation.SetMallName(s)
	return au
}

// SetNillableMallName sets the "mall_name" field if the given value is not nil.
func (au *AdvUpdate) SetNillableMallName(s *string) *AdvUpdate {
	if s != nil {
		au.SetMallName(*s)
	}
	return au
}

// SetH3Index6 sets the "h3_index_6" field.
func (au *AdvUpdate) SetH3Index6(s string) *AdvUpdate {
	au.mutation.SetH3Index6(s)
	return au
}

// SetNillableH3Index6 sets the "h3_index_6" field if the given value is not nil.
func (au *AdvUpdate) SetNillableH3Index6(s *string) *AdvUpdate {
	if s != nil {
		au.SetH3Index6(*s)
	}
	return au
}

// SetH3Index7 sets the "h3_index_7" field.
func (au *AdvUpdate) SetH3Index7(s string) *AdvUpdate {
	au.mutation.SetH3Index7(s)
	return au
}

// SetNillableH3Index7 sets the "h3_index_7" field if the given value is not nil.
func (au *AdvUpdate) SetNillableH3Index7(s *string) *AdvUpdate {
	if s != nil {
		au.SetH3Index7(*s)
	}
	return au
}

// SetH3Index8 sets the "h3_index_8" field.
func (au *AdvUpdate) SetH3Index8(s string) *AdvUpdate {
	au.mutation.SetH3Index8(s)
	return au
}

// SetNillableH3Index8 sets the "h3_index_8" field if the given value is not nil.
func (au *AdvUpdate) SetNillableH3Index8(s *string) *AdvUpdate {
	if s != nil {
		au.SetH3Index8(*s)
	}
	return au
}

// SetRuler sets the "ruler" field.
func (au *AdvUpdate) SetRuler(s string) *AdvUpdate {
	au.mutation.SetRuler(s)
	return au
}

// SetNillableRuler sets the "ruler" field if the given value is not nil.
func (au *AdvUpdate) SetNillableRuler(s *string) *AdvUpdate {
	if s != nil {
		au.SetRuler(*s)
	}
	return au
}

// SetOrd sets the "ord" field.
func (au *AdvUpdate) SetOrd(i int) *AdvUpdate {
	au.mutation.ResetOrd()
	au.mutation.SetOrd(i)
	return au
}

// SetNillableOrd sets the "ord" field if the given value is not nil.
func (au *AdvUpdate) SetNillableOrd(i *int) *AdvUpdate {
	if i != nil {
		au.SetOrd(*i)
	}
	return au
}

// AddOrd adds i to the "ord" field.
func (au *AdvUpdate) AddOrd(i int) *AdvUpdate {
	au.mutation.AddOrd(i)
	return au
}

// SetMemo sets the "memo" field.
func (au *AdvUpdate) SetMemo(s string) *AdvUpdate {
	au.mutation.SetMemo(s)
	return au
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (au *AdvUpdate) SetNillableMemo(s *string) *AdvUpdate {
	if s != nil {
		au.SetMemo(*s)
	}
	return au
}

// SetStatus sets the "status" field.
func (au *AdvUpdate) SetStatus(i int) *AdvUpdate {
	au.mutation.ResetStatus()
	au.mutation.SetStatus(i)
	return au
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (au *AdvUpdate) SetNillableStatus(i *int) *AdvUpdate {
	if i != nil {
		au.SetStatus(*i)
	}
	return au
}

// AddStatus adds i to the "status" field.
func (au *AdvUpdate) AddStatus(i int) *AdvUpdate {
	au.mutation.AddStatus(i)
	return au
}

// Mutation returns the AdvMutation object of the builder.
func (au *AdvUpdate) Mutation() *AdvMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AdvUpdate) Save(ctx context.Context) (int, error) {
	au.defaults()
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AdvUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AdvUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AdvUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AdvUpdate) defaults() {
	if _, ok := au.mutation.UpdateTime(); !ok {
		v := adv.UpdateDefaultUpdateTime()
		au.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AdvUpdate) check() error {
	if v, ok := au.mutation.MallName(); ok {
		if err := adv.MallNameValidator(v); err != nil {
			return &ValidationError{Name: "mall_name", err: fmt.Errorf(`ent: validator failed for field "Adv.mall_name": %w`, err)}
		}
	}
	if v, ok := au.mutation.H3Index6(); ok {
		if err := adv.H3Index6Validator(v); err != nil {
			return &ValidationError{Name: "h3_index_6", err: fmt.Errorf(`ent: validator failed for field "Adv.h3_index_6": %w`, err)}
		}
	}
	if v, ok := au.mutation.H3Index7(); ok {
		if err := adv.H3Index7Validator(v); err != nil {
			return &ValidationError{Name: "h3_index_7", err: fmt.Errorf(`ent: validator failed for field "Adv.h3_index_7": %w`, err)}
		}
	}
	if v, ok := au.mutation.H3Index8(); ok {
		if err := adv.H3Index8Validator(v); err != nil {
			return &ValidationError{Name: "h3_index_8", err: fmt.Errorf(`ent: validator failed for field "Adv.h3_index_8": %w`, err)}
		}
	}
	if v, ok := au.mutation.Ruler(); ok {
		if err := adv.RulerValidator(v); err != nil {
			return &ValidationError{Name: "ruler", err: fmt.Errorf(`ent: validator failed for field "Adv.ruler": %w`, err)}
		}
	}
	if v, ok := au.mutation.Memo(); ok {
		if err := adv.MemoValidator(v); err != nil {
			return &ValidationError{Name: "memo", err: fmt.Errorf(`ent: validator failed for field "Adv.memo": %w`, err)}
		}
	}
	return nil
}

func (au *AdvUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(adv.Table, adv.Columns, sqlgraph.NewFieldSpec(adv.FieldID, field.TypeUUID))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.UpdateTime(); ok {
		_spec.SetField(adv.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := au.mutation.MallName(); ok {
		_spec.SetField(adv.FieldMallName, field.TypeString, value)
	}
	if value, ok := au.mutation.H3Index6(); ok {
		_spec.SetField(adv.FieldH3Index6, field.TypeString, value)
	}
	if value, ok := au.mutation.H3Index7(); ok {
		_spec.SetField(adv.FieldH3Index7, field.TypeString, value)
	}
	if value, ok := au.mutation.H3Index8(); ok {
		_spec.SetField(adv.FieldH3Index8, field.TypeString, value)
	}
	if value, ok := au.mutation.Ruler(); ok {
		_spec.SetField(adv.FieldRuler, field.TypeString, value)
	}
	if value, ok := au.mutation.Ord(); ok {
		_spec.SetField(adv.FieldOrd, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedOrd(); ok {
		_spec.AddField(adv.FieldOrd, field.TypeInt, value)
	}
	if value, ok := au.mutation.Memo(); ok {
		_spec.SetField(adv.FieldMemo, field.TypeString, value)
	}
	if value, ok := au.mutation.Status(); ok {
		_spec.SetField(adv.FieldStatus, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedStatus(); ok {
		_spec.AddField(adv.FieldStatus, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{adv.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AdvUpdateOne is the builder for updating a single Adv entity.
type AdvUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AdvMutation
}

// SetUpdateTime sets the "update_time" field.
func (auo *AdvUpdateOne) SetUpdateTime(t time.Time) *AdvUpdateOne {
	auo.mutation.SetUpdateTime(t)
	return auo
}

// SetMallName sets the "mall_name" field.
func (auo *AdvUpdateOne) SetMallName(s string) *AdvUpdateOne {
	auo.mutation.SetMallName(s)
	return auo
}

// SetNillableMallName sets the "mall_name" field if the given value is not nil.
func (auo *AdvUpdateOne) SetNillableMallName(s *string) *AdvUpdateOne {
	if s != nil {
		auo.SetMallName(*s)
	}
	return auo
}

// SetH3Index6 sets the "h3_index_6" field.
func (auo *AdvUpdateOne) SetH3Index6(s string) *AdvUpdateOne {
	auo.mutation.SetH3Index6(s)
	return auo
}

// SetNillableH3Index6 sets the "h3_index_6" field if the given value is not nil.
func (auo *AdvUpdateOne) SetNillableH3Index6(s *string) *AdvUpdateOne {
	if s != nil {
		auo.SetH3Index6(*s)
	}
	return auo
}

// SetH3Index7 sets the "h3_index_7" field.
func (auo *AdvUpdateOne) SetH3Index7(s string) *AdvUpdateOne {
	auo.mutation.SetH3Index7(s)
	return auo
}

// SetNillableH3Index7 sets the "h3_index_7" field if the given value is not nil.
func (auo *AdvUpdateOne) SetNillableH3Index7(s *string) *AdvUpdateOne {
	if s != nil {
		auo.SetH3Index7(*s)
	}
	return auo
}

// SetH3Index8 sets the "h3_index_8" field.
func (auo *AdvUpdateOne) SetH3Index8(s string) *AdvUpdateOne {
	auo.mutation.SetH3Index8(s)
	return auo
}

// SetNillableH3Index8 sets the "h3_index_8" field if the given value is not nil.
func (auo *AdvUpdateOne) SetNillableH3Index8(s *string) *AdvUpdateOne {
	if s != nil {
		auo.SetH3Index8(*s)
	}
	return auo
}

// SetRuler sets the "ruler" field.
func (auo *AdvUpdateOne) SetRuler(s string) *AdvUpdateOne {
	auo.mutation.SetRuler(s)
	return auo
}

// SetNillableRuler sets the "ruler" field if the given value is not nil.
func (auo *AdvUpdateOne) SetNillableRuler(s *string) *AdvUpdateOne {
	if s != nil {
		auo.SetRuler(*s)
	}
	return auo
}

// SetOrd sets the "ord" field.
func (auo *AdvUpdateOne) SetOrd(i int) *AdvUpdateOne {
	auo.mutation.ResetOrd()
	auo.mutation.SetOrd(i)
	return auo
}

// SetNillableOrd sets the "ord" field if the given value is not nil.
func (auo *AdvUpdateOne) SetNillableOrd(i *int) *AdvUpdateOne {
	if i != nil {
		auo.SetOrd(*i)
	}
	return auo
}

// AddOrd adds i to the "ord" field.
func (auo *AdvUpdateOne) AddOrd(i int) *AdvUpdateOne {
	auo.mutation.AddOrd(i)
	return auo
}

// SetMemo sets the "memo" field.
func (auo *AdvUpdateOne) SetMemo(s string) *AdvUpdateOne {
	auo.mutation.SetMemo(s)
	return auo
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (auo *AdvUpdateOne) SetNillableMemo(s *string) *AdvUpdateOne {
	if s != nil {
		auo.SetMemo(*s)
	}
	return auo
}

// SetStatus sets the "status" field.
func (auo *AdvUpdateOne) SetStatus(i int) *AdvUpdateOne {
	auo.mutation.ResetStatus()
	auo.mutation.SetStatus(i)
	return auo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (auo *AdvUpdateOne) SetNillableStatus(i *int) *AdvUpdateOne {
	if i != nil {
		auo.SetStatus(*i)
	}
	return auo
}

// AddStatus adds i to the "status" field.
func (auo *AdvUpdateOne) AddStatus(i int) *AdvUpdateOne {
	auo.mutation.AddStatus(i)
	return auo
}

// Mutation returns the AdvMutation object of the builder.
func (auo *AdvUpdateOne) Mutation() *AdvMutation {
	return auo.mutation
}

// Where appends a list predicates to the AdvUpdate builder.
func (auo *AdvUpdateOne) Where(ps ...predicate.Adv) *AdvUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AdvUpdateOne) Select(field string, fields ...string) *AdvUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Adv entity.
func (auo *AdvUpdateOne) Save(ctx context.Context) (*Adv, error) {
	auo.defaults()
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AdvUpdateOne) SaveX(ctx context.Context) *Adv {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AdvUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AdvUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AdvUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdateTime(); !ok {
		v := adv.UpdateDefaultUpdateTime()
		auo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AdvUpdateOne) check() error {
	if v, ok := auo.mutation.MallName(); ok {
		if err := adv.MallNameValidator(v); err != nil {
			return &ValidationError{Name: "mall_name", err: fmt.Errorf(`ent: validator failed for field "Adv.mall_name": %w`, err)}
		}
	}
	if v, ok := auo.mutation.H3Index6(); ok {
		if err := adv.H3Index6Validator(v); err != nil {
			return &ValidationError{Name: "h3_index_6", err: fmt.Errorf(`ent: validator failed for field "Adv.h3_index_6": %w`, err)}
		}
	}
	if v, ok := auo.mutation.H3Index7(); ok {
		if err := adv.H3Index7Validator(v); err != nil {
			return &ValidationError{Name: "h3_index_7", err: fmt.Errorf(`ent: validator failed for field "Adv.h3_index_7": %w`, err)}
		}
	}
	if v, ok := auo.mutation.H3Index8(); ok {
		if err := adv.H3Index8Validator(v); err != nil {
			return &ValidationError{Name: "h3_index_8", err: fmt.Errorf(`ent: validator failed for field "Adv.h3_index_8": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Ruler(); ok {
		if err := adv.RulerValidator(v); err != nil {
			return &ValidationError{Name: "ruler", err: fmt.Errorf(`ent: validator failed for field "Adv.ruler": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Memo(); ok {
		if err := adv.MemoValidator(v); err != nil {
			return &ValidationError{Name: "memo", err: fmt.Errorf(`ent: validator failed for field "Adv.memo": %w`, err)}
		}
	}
	return nil
}

func (auo *AdvUpdateOne) sqlSave(ctx context.Context) (_node *Adv, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(adv.Table, adv.Columns, sqlgraph.NewFieldSpec(adv.FieldID, field.TypeUUID))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Adv.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, adv.FieldID)
		for _, f := range fields {
			if !adv.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != adv.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.UpdateTime(); ok {
		_spec.SetField(adv.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := auo.mutation.MallName(); ok {
		_spec.SetField(adv.FieldMallName, field.TypeString, value)
	}
	if value, ok := auo.mutation.H3Index6(); ok {
		_spec.SetField(adv.FieldH3Index6, field.TypeString, value)
	}
	if value, ok := auo.mutation.H3Index7(); ok {
		_spec.SetField(adv.FieldH3Index7, field.TypeString, value)
	}
	if value, ok := auo.mutation.H3Index8(); ok {
		_spec.SetField(adv.FieldH3Index8, field.TypeString, value)
	}
	if value, ok := auo.mutation.Ruler(); ok {
		_spec.SetField(adv.FieldRuler, field.TypeString, value)
	}
	if value, ok := auo.mutation.Ord(); ok {
		_spec.SetField(adv.FieldOrd, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedOrd(); ok {
		_spec.AddField(adv.FieldOrd, field.TypeInt, value)
	}
	if value, ok := auo.mutation.Memo(); ok {
		_spec.SetField(adv.FieldMemo, field.TypeString, value)
	}
	if value, ok := auo.mutation.Status(); ok {
		_spec.SetField(adv.FieldStatus, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedStatus(); ok {
		_spec.AddField(adv.FieldStatus, field.TypeInt, value)
	}
	_node = &Adv{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{adv.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
