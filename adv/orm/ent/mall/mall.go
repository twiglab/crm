// Code generated by ent, DO NOT EDIT.

package mall

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the mall type in the database.
	Label = "mall"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldMallCode holds the string denoting the mall_code field in the database.
	FieldMallCode = "mall_code"
	// FieldMallName holds the string denoting the mall_name field in the database.
	FieldMallName = "mall_name"
	// FieldH3Index6 holds the string denoting the h3_index_6 field in the database.
	FieldH3Index6 = "h3_index_6"
	// FieldH3Index7 holds the string denoting the h3_index_7 field in the database.
	FieldH3Index7 = "h3_index_7"
	// FieldH3Index8 holds the string denoting the h3_index_8 field in the database.
	FieldH3Index8 = "h3_index_8"
	// FieldMemo holds the string denoting the memo field in the database.
	FieldMemo = "memo"
	// FieldStartTime holds the string denoting the start_time field in the database.
	FieldStartTime = "start_time"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// Table holds the table name of the mall in the database.
	Table = "t_mall"
)

// Columns holds all SQL columns for mall fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldCode,
	FieldMallCode,
	FieldMallName,
	FieldH3Index6,
	FieldH3Index7,
	FieldH3Index8,
	FieldMemo,
	FieldStartTime,
	FieldStatus,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultCode holds the default value on creation for the "code" field.
	DefaultCode func() string
	// CodeValidator is a validator for the "code" field. It is called by the builders before save.
	CodeValidator func(string) error
	// MallCodeValidator is a validator for the "mall_code" field. It is called by the builders before save.
	MallCodeValidator func(string) error
	// MallNameValidator is a validator for the "mall_name" field. It is called by the builders before save.
	MallNameValidator func(string) error
	// H3Index6Validator is a validator for the "h3_index_6" field. It is called by the builders before save.
	H3Index6Validator func(string) error
	// H3Index7Validator is a validator for the "h3_index_7" field. It is called by the builders before save.
	H3Index7Validator func(string) error
	// H3Index8Validator is a validator for the "h3_index_8" field. It is called by the builders before save.
	H3Index8Validator func(string) error
	// MemoValidator is a validator for the "memo" field. It is called by the builders before save.
	MemoValidator func(string) error
	// DefaultStartTime holds the default value on creation for the "start_time" field.
	DefaultStartTime func() time.Time
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus int
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Mall queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}

// ByMallCode orders the results by the mall_code field.
func ByMallCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMallCode, opts...).ToFunc()
}

// ByMallName orders the results by the mall_name field.
func ByMallName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMallName, opts...).ToFunc()
}

// ByH3Index6 orders the results by the h3_index_6 field.
func ByH3Index6(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldH3Index6, opts...).ToFunc()
}

// ByH3Index7 orders the results by the h3_index_7 field.
func ByH3Index7(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldH3Index7, opts...).ToFunc()
}

// ByH3Index8 orders the results by the h3_index_8 field.
func ByH3Index8(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldH3Index8, opts...).ToFunc()
}

// ByMemo orders the results by the memo field.
func ByMemo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMemo, opts...).ToFunc()
}

// ByStartTime orders the results by the start_time field.
func ByStartTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartTime, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}
