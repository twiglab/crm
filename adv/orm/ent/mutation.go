// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/twiglab/crm/adv/orm/ent/adv"
	"github.com/twiglab/crm/adv/orm/ent/mall"
	"github.com/twiglab/crm/adv/orm/ent/predicate"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAdv  = "Adv"
	TypeMall = "Mall"
)

// AdvMutation represents an operation that mutates the Adv nodes in the graph.
type AdvMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	create_time   *time.Time
	update_time   *time.Time
	code          *string
	mall_code     *string
	mall_name     *string
	h3_index_6    *string
	h3_index_7    *string
	h3_index_8    *string
	img_path      *string
	url           *string
	ruler         *string
	ord           *int
	addord        *int
	memo          *string
	start_time    *time.Time
	end_time      *time.Time
	status        *int
	addstatus     *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Adv, error)
	predicates    []predicate.Adv
}

var _ ent.Mutation = (*AdvMutation)(nil)

// advOption allows management of the mutation configuration using functional options.
type advOption func(*AdvMutation)

// newAdvMutation creates new mutation for the Adv entity.
func newAdvMutation(c config, op Op, opts ...advOption) *AdvMutation {
	m := &AdvMutation{
		config:        c,
		op:            op,
		typ:           TypeAdv,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAdvID sets the ID field of the mutation.
func withAdvID(id uuid.UUID) advOption {
	return func(m *AdvMutation) {
		var (
			err   error
			once  sync.Once
			value *Adv
		)
		m.oldValue = func(ctx context.Context) (*Adv, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Adv.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAdv sets the old Adv of the mutation.
func withAdv(node *Adv) advOption {
	return func(m *AdvMutation) {
		m.oldValue = func(context.Context) (*Adv, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AdvMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AdvMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Adv entities.
func (m *AdvMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AdvMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AdvMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Adv.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *AdvMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *AdvMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Adv entity.
// If the Adv object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdvMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *AdvMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *AdvMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *AdvMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Adv entity.
// If the Adv object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdvMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *AdvMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetCode sets the "code" field.
func (m *AdvMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *AdvMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the Adv entity.
// If the Adv object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdvMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *AdvMutation) ResetCode() {
	m.code = nil
}

// SetMallCode sets the "mall_code" field.
func (m *AdvMutation) SetMallCode(s string) {
	m.mall_code = &s
}

// MallCode returns the value of the "mall_code" field in the mutation.
func (m *AdvMutation) MallCode() (r string, exists bool) {
	v := m.mall_code
	if v == nil {
		return
	}
	return *v, true
}

// OldMallCode returns the old "mall_code" field's value of the Adv entity.
// If the Adv object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdvMutation) OldMallCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMallCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMallCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMallCode: %w", err)
	}
	return oldValue.MallCode, nil
}

// ResetMallCode resets all changes to the "mall_code" field.
func (m *AdvMutation) ResetMallCode() {
	m.mall_code = nil
}

// SetMallName sets the "mall_name" field.
func (m *AdvMutation) SetMallName(s string) {
	m.mall_name = &s
}

// MallName returns the value of the "mall_name" field in the mutation.
func (m *AdvMutation) MallName() (r string, exists bool) {
	v := m.mall_name
	if v == nil {
		return
	}
	return *v, true
}

// OldMallName returns the old "mall_name" field's value of the Adv entity.
// If the Adv object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdvMutation) OldMallName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMallName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMallName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMallName: %w", err)
	}
	return oldValue.MallName, nil
}

// ResetMallName resets all changes to the "mall_name" field.
func (m *AdvMutation) ResetMallName() {
	m.mall_name = nil
}

// SetH3Index6 sets the "h3_index_6" field.
func (m *AdvMutation) SetH3Index6(s string) {
	m.h3_index_6 = &s
}

// H3Index6 returns the value of the "h3_index_6" field in the mutation.
func (m *AdvMutation) H3Index6() (r string, exists bool) {
	v := m.h3_index_6
	if v == nil {
		return
	}
	return *v, true
}

// OldH3Index6 returns the old "h3_index_6" field's value of the Adv entity.
// If the Adv object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdvMutation) OldH3Index6(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldH3Index6 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldH3Index6 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldH3Index6: %w", err)
	}
	return oldValue.H3Index6, nil
}

// ResetH3Index6 resets all changes to the "h3_index_6" field.
func (m *AdvMutation) ResetH3Index6() {
	m.h3_index_6 = nil
}

// SetH3Index7 sets the "h3_index_7" field.
func (m *AdvMutation) SetH3Index7(s string) {
	m.h3_index_7 = &s
}

// H3Index7 returns the value of the "h3_index_7" field in the mutation.
func (m *AdvMutation) H3Index7() (r string, exists bool) {
	v := m.h3_index_7
	if v == nil {
		return
	}
	return *v, true
}

// OldH3Index7 returns the old "h3_index_7" field's value of the Adv entity.
// If the Adv object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdvMutation) OldH3Index7(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldH3Index7 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldH3Index7 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldH3Index7: %w", err)
	}
	return oldValue.H3Index7, nil
}

// ResetH3Index7 resets all changes to the "h3_index_7" field.
func (m *AdvMutation) ResetH3Index7() {
	m.h3_index_7 = nil
}

// SetH3Index8 sets the "h3_index_8" field.
func (m *AdvMutation) SetH3Index8(s string) {
	m.h3_index_8 = &s
}

// H3Index8 returns the value of the "h3_index_8" field in the mutation.
func (m *AdvMutation) H3Index8() (r string, exists bool) {
	v := m.h3_index_8
	if v == nil {
		return
	}
	return *v, true
}

// OldH3Index8 returns the old "h3_index_8" field's value of the Adv entity.
// If the Adv object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdvMutation) OldH3Index8(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldH3Index8 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldH3Index8 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldH3Index8: %w", err)
	}
	return oldValue.H3Index8, nil
}

// ResetH3Index8 resets all changes to the "h3_index_8" field.
func (m *AdvMutation) ResetH3Index8() {
	m.h3_index_8 = nil
}

// SetImgPath sets the "img_path" field.
func (m *AdvMutation) SetImgPath(s string) {
	m.img_path = &s
}

// ImgPath returns the value of the "img_path" field in the mutation.
func (m *AdvMutation) ImgPath() (r string, exists bool) {
	v := m.img_path
	if v == nil {
		return
	}
	return *v, true
}

// OldImgPath returns the old "img_path" field's value of the Adv entity.
// If the Adv object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdvMutation) OldImgPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImgPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImgPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImgPath: %w", err)
	}
	return oldValue.ImgPath, nil
}

// ResetImgPath resets all changes to the "img_path" field.
func (m *AdvMutation) ResetImgPath() {
	m.img_path = nil
}

// SetURL sets the "url" field.
func (m *AdvMutation) SetURL(s string) {
	m.url = &s
}

// URL returns the value of the "url" field in the mutation.
func (m *AdvMutation) URL() (r string, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old "url" field's value of the Adv entity.
// If the Adv object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdvMutation) OldURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ResetURL resets all changes to the "url" field.
func (m *AdvMutation) ResetURL() {
	m.url = nil
}

// SetRuler sets the "ruler" field.
func (m *AdvMutation) SetRuler(s string) {
	m.ruler = &s
}

// Ruler returns the value of the "ruler" field in the mutation.
func (m *AdvMutation) Ruler() (r string, exists bool) {
	v := m.ruler
	if v == nil {
		return
	}
	return *v, true
}

// OldRuler returns the old "ruler" field's value of the Adv entity.
// If the Adv object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdvMutation) OldRuler(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRuler is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRuler requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRuler: %w", err)
	}
	return oldValue.Ruler, nil
}

// ResetRuler resets all changes to the "ruler" field.
func (m *AdvMutation) ResetRuler() {
	m.ruler = nil
}

// SetOrd sets the "ord" field.
func (m *AdvMutation) SetOrd(i int) {
	m.ord = &i
	m.addord = nil
}

// Ord returns the value of the "ord" field in the mutation.
func (m *AdvMutation) Ord() (r int, exists bool) {
	v := m.ord
	if v == nil {
		return
	}
	return *v, true
}

// OldOrd returns the old "ord" field's value of the Adv entity.
// If the Adv object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdvMutation) OldOrd(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrd: %w", err)
	}
	return oldValue.Ord, nil
}

// AddOrd adds i to the "ord" field.
func (m *AdvMutation) AddOrd(i int) {
	if m.addord != nil {
		*m.addord += i
	} else {
		m.addord = &i
	}
}

// AddedOrd returns the value that was added to the "ord" field in this mutation.
func (m *AdvMutation) AddedOrd() (r int, exists bool) {
	v := m.addord
	if v == nil {
		return
	}
	return *v, true
}

// ResetOrd resets all changes to the "ord" field.
func (m *AdvMutation) ResetOrd() {
	m.ord = nil
	m.addord = nil
}

// SetMemo sets the "memo" field.
func (m *AdvMutation) SetMemo(s string) {
	m.memo = &s
}

// Memo returns the value of the "memo" field in the mutation.
func (m *AdvMutation) Memo() (r string, exists bool) {
	v := m.memo
	if v == nil {
		return
	}
	return *v, true
}

// OldMemo returns the old "memo" field's value of the Adv entity.
// If the Adv object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdvMutation) OldMemo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMemo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMemo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMemo: %w", err)
	}
	return oldValue.Memo, nil
}

// ResetMemo resets all changes to the "memo" field.
func (m *AdvMutation) ResetMemo() {
	m.memo = nil
}

// SetStartTime sets the "start_time" field.
func (m *AdvMutation) SetStartTime(t time.Time) {
	m.start_time = &t
}

// StartTime returns the value of the "start_time" field in the mutation.
func (m *AdvMutation) StartTime() (r time.Time, exists bool) {
	v := m.start_time
	if v == nil {
		return
	}
	return *v, true
}

// OldStartTime returns the old "start_time" field's value of the Adv entity.
// If the Adv object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdvMutation) OldStartTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartTime: %w", err)
	}
	return oldValue.StartTime, nil
}

// ResetStartTime resets all changes to the "start_time" field.
func (m *AdvMutation) ResetStartTime() {
	m.start_time = nil
}

// SetEndTime sets the "end_time" field.
func (m *AdvMutation) SetEndTime(t time.Time) {
	m.end_time = &t
}

// EndTime returns the value of the "end_time" field in the mutation.
func (m *AdvMutation) EndTime() (r time.Time, exists bool) {
	v := m.end_time
	if v == nil {
		return
	}
	return *v, true
}

// OldEndTime returns the old "end_time" field's value of the Adv entity.
// If the Adv object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdvMutation) OldEndTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndTime: %w", err)
	}
	return oldValue.EndTime, nil
}

// ResetEndTime resets all changes to the "end_time" field.
func (m *AdvMutation) ResetEndTime() {
	m.end_time = nil
}

// SetStatus sets the "status" field.
func (m *AdvMutation) SetStatus(i int) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *AdvMutation) Status() (r int, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Adv entity.
// If the Adv object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AdvMutation) OldStatus(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to the "status" field.
func (m *AdvMutation) AddStatus(i int) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *AdvMutation) AddedStatus() (r int, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *AdvMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// Where appends a list predicates to the AdvMutation builder.
func (m *AdvMutation) Where(ps ...predicate.Adv) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AdvMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AdvMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Adv, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AdvMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AdvMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Adv).
func (m *AdvMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AdvMutation) Fields() []string {
	fields := make([]string, 0, 16)
	if m.create_time != nil {
		fields = append(fields, adv.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, adv.FieldUpdateTime)
	}
	if m.code != nil {
		fields = append(fields, adv.FieldCode)
	}
	if m.mall_code != nil {
		fields = append(fields, adv.FieldMallCode)
	}
	if m.mall_name != nil {
		fields = append(fields, adv.FieldMallName)
	}
	if m.h3_index_6 != nil {
		fields = append(fields, adv.FieldH3Index6)
	}
	if m.h3_index_7 != nil {
		fields = append(fields, adv.FieldH3Index7)
	}
	if m.h3_index_8 != nil {
		fields = append(fields, adv.FieldH3Index8)
	}
	if m.img_path != nil {
		fields = append(fields, adv.FieldImgPath)
	}
	if m.url != nil {
		fields = append(fields, adv.FieldURL)
	}
	if m.ruler != nil {
		fields = append(fields, adv.FieldRuler)
	}
	if m.ord != nil {
		fields = append(fields, adv.FieldOrd)
	}
	if m.memo != nil {
		fields = append(fields, adv.FieldMemo)
	}
	if m.start_time != nil {
		fields = append(fields, adv.FieldStartTime)
	}
	if m.end_time != nil {
		fields = append(fields, adv.FieldEndTime)
	}
	if m.status != nil {
		fields = append(fields, adv.FieldStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AdvMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case adv.FieldCreateTime:
		return m.CreateTime()
	case adv.FieldUpdateTime:
		return m.UpdateTime()
	case adv.FieldCode:
		return m.Code()
	case adv.FieldMallCode:
		return m.MallCode()
	case adv.FieldMallName:
		return m.MallName()
	case adv.FieldH3Index6:
		return m.H3Index6()
	case adv.FieldH3Index7:
		return m.H3Index7()
	case adv.FieldH3Index8:
		return m.H3Index8()
	case adv.FieldImgPath:
		return m.ImgPath()
	case adv.FieldURL:
		return m.URL()
	case adv.FieldRuler:
		return m.Ruler()
	case adv.FieldOrd:
		return m.Ord()
	case adv.FieldMemo:
		return m.Memo()
	case adv.FieldStartTime:
		return m.StartTime()
	case adv.FieldEndTime:
		return m.EndTime()
	case adv.FieldStatus:
		return m.Status()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AdvMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case adv.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case adv.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case adv.FieldCode:
		return m.OldCode(ctx)
	case adv.FieldMallCode:
		return m.OldMallCode(ctx)
	case adv.FieldMallName:
		return m.OldMallName(ctx)
	case adv.FieldH3Index6:
		return m.OldH3Index6(ctx)
	case adv.FieldH3Index7:
		return m.OldH3Index7(ctx)
	case adv.FieldH3Index8:
		return m.OldH3Index8(ctx)
	case adv.FieldImgPath:
		return m.OldImgPath(ctx)
	case adv.FieldURL:
		return m.OldURL(ctx)
	case adv.FieldRuler:
		return m.OldRuler(ctx)
	case adv.FieldOrd:
		return m.OldOrd(ctx)
	case adv.FieldMemo:
		return m.OldMemo(ctx)
	case adv.FieldStartTime:
		return m.OldStartTime(ctx)
	case adv.FieldEndTime:
		return m.OldEndTime(ctx)
	case adv.FieldStatus:
		return m.OldStatus(ctx)
	}
	return nil, fmt.Errorf("unknown Adv field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AdvMutation) SetField(name string, value ent.Value) error {
	switch name {
	case adv.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case adv.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case adv.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case adv.FieldMallCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMallCode(v)
		return nil
	case adv.FieldMallName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMallName(v)
		return nil
	case adv.FieldH3Index6:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetH3Index6(v)
		return nil
	case adv.FieldH3Index7:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetH3Index7(v)
		return nil
	case adv.FieldH3Index8:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetH3Index8(v)
		return nil
	case adv.FieldImgPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImgPath(v)
		return nil
	case adv.FieldURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	case adv.FieldRuler:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRuler(v)
		return nil
	case adv.FieldOrd:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrd(v)
		return nil
	case adv.FieldMemo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMemo(v)
		return nil
	case adv.FieldStartTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartTime(v)
		return nil
	case adv.FieldEndTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndTime(v)
		return nil
	case adv.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	}
	return fmt.Errorf("unknown Adv field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AdvMutation) AddedFields() []string {
	var fields []string
	if m.addord != nil {
		fields = append(fields, adv.FieldOrd)
	}
	if m.addstatus != nil {
		fields = append(fields, adv.FieldStatus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AdvMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case adv.FieldOrd:
		return m.AddedOrd()
	case adv.FieldStatus:
		return m.AddedStatus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AdvMutation) AddField(name string, value ent.Value) error {
	switch name {
	case adv.FieldOrd:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrd(v)
		return nil
	case adv.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	}
	return fmt.Errorf("unknown Adv numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AdvMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AdvMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AdvMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Adv nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AdvMutation) ResetField(name string) error {
	switch name {
	case adv.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case adv.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case adv.FieldCode:
		m.ResetCode()
		return nil
	case adv.FieldMallCode:
		m.ResetMallCode()
		return nil
	case adv.FieldMallName:
		m.ResetMallName()
		return nil
	case adv.FieldH3Index6:
		m.ResetH3Index6()
		return nil
	case adv.FieldH3Index7:
		m.ResetH3Index7()
		return nil
	case adv.FieldH3Index8:
		m.ResetH3Index8()
		return nil
	case adv.FieldImgPath:
		m.ResetImgPath()
		return nil
	case adv.FieldURL:
		m.ResetURL()
		return nil
	case adv.FieldRuler:
		m.ResetRuler()
		return nil
	case adv.FieldOrd:
		m.ResetOrd()
		return nil
	case adv.FieldMemo:
		m.ResetMemo()
		return nil
	case adv.FieldStartTime:
		m.ResetStartTime()
		return nil
	case adv.FieldEndTime:
		m.ResetEndTime()
		return nil
	case adv.FieldStatus:
		m.ResetStatus()
		return nil
	}
	return fmt.Errorf("unknown Adv field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AdvMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AdvMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AdvMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AdvMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AdvMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AdvMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AdvMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Adv unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AdvMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Adv edge %s", name)
}

// MallMutation represents an operation that mutates the Mall nodes in the graph.
type MallMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	create_time   *time.Time
	update_time   *time.Time
	code          *string
	mall_code     *string
	mall_name     *string
	h3_index_6    *string
	h3_index_7    *string
	h3_index_8    *string
	memo          *string
	start_time    *time.Time
	status        *int
	addstatus     *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Mall, error)
	predicates    []predicate.Mall
}

var _ ent.Mutation = (*MallMutation)(nil)

// mallOption allows management of the mutation configuration using functional options.
type mallOption func(*MallMutation)

// newMallMutation creates new mutation for the Mall entity.
func newMallMutation(c config, op Op, opts ...mallOption) *MallMutation {
	m := &MallMutation{
		config:        c,
		op:            op,
		typ:           TypeMall,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMallID sets the ID field of the mutation.
func withMallID(id uuid.UUID) mallOption {
	return func(m *MallMutation) {
		var (
			err   error
			once  sync.Once
			value *Mall
		)
		m.oldValue = func(ctx context.Context) (*Mall, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Mall.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMall sets the old Mall of the mutation.
func withMall(node *Mall) mallOption {
	return func(m *MallMutation) {
		m.oldValue = func(context.Context) (*Mall, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MallMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MallMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Mall entities.
func (m *MallMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MallMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MallMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Mall.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *MallMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *MallMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Mall entity.
// If the Mall object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MallMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *MallMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *MallMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *MallMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Mall entity.
// If the Mall object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MallMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *MallMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetCode sets the "code" field.
func (m *MallMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *MallMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the Mall entity.
// If the Mall object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MallMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *MallMutation) ResetCode() {
	m.code = nil
}

// SetMallCode sets the "mall_code" field.
func (m *MallMutation) SetMallCode(s string) {
	m.mall_code = &s
}

// MallCode returns the value of the "mall_code" field in the mutation.
func (m *MallMutation) MallCode() (r string, exists bool) {
	v := m.mall_code
	if v == nil {
		return
	}
	return *v, true
}

// OldMallCode returns the old "mall_code" field's value of the Mall entity.
// If the Mall object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MallMutation) OldMallCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMallCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMallCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMallCode: %w", err)
	}
	return oldValue.MallCode, nil
}

// ResetMallCode resets all changes to the "mall_code" field.
func (m *MallMutation) ResetMallCode() {
	m.mall_code = nil
}

// SetMallName sets the "mall_name" field.
func (m *MallMutation) SetMallName(s string) {
	m.mall_name = &s
}

// MallName returns the value of the "mall_name" field in the mutation.
func (m *MallMutation) MallName() (r string, exists bool) {
	v := m.mall_name
	if v == nil {
		return
	}
	return *v, true
}

// OldMallName returns the old "mall_name" field's value of the Mall entity.
// If the Mall object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MallMutation) OldMallName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMallName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMallName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMallName: %w", err)
	}
	return oldValue.MallName, nil
}

// ResetMallName resets all changes to the "mall_name" field.
func (m *MallMutation) ResetMallName() {
	m.mall_name = nil
}

// SetH3Index6 sets the "h3_index_6" field.
func (m *MallMutation) SetH3Index6(s string) {
	m.h3_index_6 = &s
}

// H3Index6 returns the value of the "h3_index_6" field in the mutation.
func (m *MallMutation) H3Index6() (r string, exists bool) {
	v := m.h3_index_6
	if v == nil {
		return
	}
	return *v, true
}

// OldH3Index6 returns the old "h3_index_6" field's value of the Mall entity.
// If the Mall object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MallMutation) OldH3Index6(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldH3Index6 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldH3Index6 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldH3Index6: %w", err)
	}
	return oldValue.H3Index6, nil
}

// ResetH3Index6 resets all changes to the "h3_index_6" field.
func (m *MallMutation) ResetH3Index6() {
	m.h3_index_6 = nil
}

// SetH3Index7 sets the "h3_index_7" field.
func (m *MallMutation) SetH3Index7(s string) {
	m.h3_index_7 = &s
}

// H3Index7 returns the value of the "h3_index_7" field in the mutation.
func (m *MallMutation) H3Index7() (r string, exists bool) {
	v := m.h3_index_7
	if v == nil {
		return
	}
	return *v, true
}

// OldH3Index7 returns the old "h3_index_7" field's value of the Mall entity.
// If the Mall object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MallMutation) OldH3Index7(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldH3Index7 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldH3Index7 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldH3Index7: %w", err)
	}
	return oldValue.H3Index7, nil
}

// ResetH3Index7 resets all changes to the "h3_index_7" field.
func (m *MallMutation) ResetH3Index7() {
	m.h3_index_7 = nil
}

// SetH3Index8 sets the "h3_index_8" field.
func (m *MallMutation) SetH3Index8(s string) {
	m.h3_index_8 = &s
}

// H3Index8 returns the value of the "h3_index_8" field in the mutation.
func (m *MallMutation) H3Index8() (r string, exists bool) {
	v := m.h3_index_8
	if v == nil {
		return
	}
	return *v, true
}

// OldH3Index8 returns the old "h3_index_8" field's value of the Mall entity.
// If the Mall object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MallMutation) OldH3Index8(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldH3Index8 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldH3Index8 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldH3Index8: %w", err)
	}
	return oldValue.H3Index8, nil
}

// ResetH3Index8 resets all changes to the "h3_index_8" field.
func (m *MallMutation) ResetH3Index8() {
	m.h3_index_8 = nil
}

// SetMemo sets the "memo" field.
func (m *MallMutation) SetMemo(s string) {
	m.memo = &s
}

// Memo returns the value of the "memo" field in the mutation.
func (m *MallMutation) Memo() (r string, exists bool) {
	v := m.memo
	if v == nil {
		return
	}
	return *v, true
}

// OldMemo returns the old "memo" field's value of the Mall entity.
// If the Mall object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MallMutation) OldMemo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMemo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMemo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMemo: %w", err)
	}
	return oldValue.Memo, nil
}

// ResetMemo resets all changes to the "memo" field.
func (m *MallMutation) ResetMemo() {
	m.memo = nil
}

// SetStartTime sets the "start_time" field.
func (m *MallMutation) SetStartTime(t time.Time) {
	m.start_time = &t
}

// StartTime returns the value of the "start_time" field in the mutation.
func (m *MallMutation) StartTime() (r time.Time, exists bool) {
	v := m.start_time
	if v == nil {
		return
	}
	return *v, true
}

// OldStartTime returns the old "start_time" field's value of the Mall entity.
// If the Mall object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MallMutation) OldStartTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartTime: %w", err)
	}
	return oldValue.StartTime, nil
}

// ResetStartTime resets all changes to the "start_time" field.
func (m *MallMutation) ResetStartTime() {
	m.start_time = nil
}

// SetStatus sets the "status" field.
func (m *MallMutation) SetStatus(i int) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *MallMutation) Status() (r int, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Mall entity.
// If the Mall object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MallMutation) OldStatus(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to the "status" field.
func (m *MallMutation) AddStatus(i int) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *MallMutation) AddedStatus() (r int, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *MallMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// Where appends a list predicates to the MallMutation builder.
func (m *MallMutation) Where(ps ...predicate.Mall) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MallMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MallMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Mall, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MallMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MallMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Mall).
func (m *MallMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MallMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.create_time != nil {
		fields = append(fields, mall.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, mall.FieldUpdateTime)
	}
	if m.code != nil {
		fields = append(fields, mall.FieldCode)
	}
	if m.mall_code != nil {
		fields = append(fields, mall.FieldMallCode)
	}
	if m.mall_name != nil {
		fields = append(fields, mall.FieldMallName)
	}
	if m.h3_index_6 != nil {
		fields = append(fields, mall.FieldH3Index6)
	}
	if m.h3_index_7 != nil {
		fields = append(fields, mall.FieldH3Index7)
	}
	if m.h3_index_8 != nil {
		fields = append(fields, mall.FieldH3Index8)
	}
	if m.memo != nil {
		fields = append(fields, mall.FieldMemo)
	}
	if m.start_time != nil {
		fields = append(fields, mall.FieldStartTime)
	}
	if m.status != nil {
		fields = append(fields, mall.FieldStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MallMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case mall.FieldCreateTime:
		return m.CreateTime()
	case mall.FieldUpdateTime:
		return m.UpdateTime()
	case mall.FieldCode:
		return m.Code()
	case mall.FieldMallCode:
		return m.MallCode()
	case mall.FieldMallName:
		return m.MallName()
	case mall.FieldH3Index6:
		return m.H3Index6()
	case mall.FieldH3Index7:
		return m.H3Index7()
	case mall.FieldH3Index8:
		return m.H3Index8()
	case mall.FieldMemo:
		return m.Memo()
	case mall.FieldStartTime:
		return m.StartTime()
	case mall.FieldStatus:
		return m.Status()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MallMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case mall.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case mall.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case mall.FieldCode:
		return m.OldCode(ctx)
	case mall.FieldMallCode:
		return m.OldMallCode(ctx)
	case mall.FieldMallName:
		return m.OldMallName(ctx)
	case mall.FieldH3Index6:
		return m.OldH3Index6(ctx)
	case mall.FieldH3Index7:
		return m.OldH3Index7(ctx)
	case mall.FieldH3Index8:
		return m.OldH3Index8(ctx)
	case mall.FieldMemo:
		return m.OldMemo(ctx)
	case mall.FieldStartTime:
		return m.OldStartTime(ctx)
	case mall.FieldStatus:
		return m.OldStatus(ctx)
	}
	return nil, fmt.Errorf("unknown Mall field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MallMutation) SetField(name string, value ent.Value) error {
	switch name {
	case mall.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case mall.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case mall.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case mall.FieldMallCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMallCode(v)
		return nil
	case mall.FieldMallName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMallName(v)
		return nil
	case mall.FieldH3Index6:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetH3Index6(v)
		return nil
	case mall.FieldH3Index7:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetH3Index7(v)
		return nil
	case mall.FieldH3Index8:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetH3Index8(v)
		return nil
	case mall.FieldMemo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMemo(v)
		return nil
	case mall.FieldStartTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartTime(v)
		return nil
	case mall.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	}
	return fmt.Errorf("unknown Mall field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MallMutation) AddedFields() []string {
	var fields []string
	if m.addstatus != nil {
		fields = append(fields, mall.FieldStatus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MallMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case mall.FieldStatus:
		return m.AddedStatus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MallMutation) AddField(name string, value ent.Value) error {
	switch name {
	case mall.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	}
	return fmt.Errorf("unknown Mall numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MallMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MallMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MallMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Mall nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MallMutation) ResetField(name string) error {
	switch name {
	case mall.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case mall.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case mall.FieldCode:
		m.ResetCode()
		return nil
	case mall.FieldMallCode:
		m.ResetMallCode()
		return nil
	case mall.FieldMallName:
		m.ResetMallName()
		return nil
	case mall.FieldH3Index6:
		m.ResetH3Index6()
		return nil
	case mall.FieldH3Index7:
		m.ResetH3Index7()
		return nil
	case mall.FieldH3Index8:
		m.ResetH3Index8()
		return nil
	case mall.FieldMemo:
		m.ResetMemo()
		return nil
	case mall.FieldStartTime:
		m.ResetStartTime()
		return nil
	case mall.FieldStatus:
		m.ResetStatus()
		return nil
	}
	return fmt.Errorf("unknown Mall field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MallMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MallMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MallMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MallMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MallMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MallMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MallMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Mall unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MallMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Mall edge %s", name)
}
