// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/twiglab/crm/adv/orm/ent/adv"
)

// Adv is the model entity for the Adv schema.
type Adv struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// MallCode holds the value of the "mall_code" field.
	MallCode string `json:"mall_code,omitempty"`
	// MallName holds the value of the "mall_name" field.
	MallName string `json:"mall_name,omitempty"`
	// H3Index6 holds the value of the "h3_index_6" field.
	H3Index6 string `json:"h3_index_6,omitempty"`
	// H3Index7 holds the value of the "h3_index_7" field.
	H3Index7 string `json:"h3_index_7,omitempty"`
	// H3Index8 holds the value of the "h3_index_8" field.
	H3Index8 string `json:"h3_index_8,omitempty"`
	// ImgPath holds the value of the "img_path" field.
	ImgPath string `json:"img_path,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// Ruler holds the value of the "ruler" field.
	Ruler string `json:"ruler,omitempty"`
	// Ord holds the value of the "ord" field.
	Ord int `json:"ord,omitempty"`
	// Memo holds the value of the "memo" field.
	Memo string `json:"memo,omitempty"`
	// StartTime holds the value of the "start_time" field.
	StartTime time.Time `json:"start_time,omitempty"`
	// EndTime holds the value of the "end_time" field.
	EndTime time.Time `json:"end_time,omitempty"`
	// Status holds the value of the "status" field.
	Status       int `json:"status,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Adv) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case adv.FieldOrd, adv.FieldStatus:
			values[i] = new(sql.NullInt64)
		case adv.FieldCode, adv.FieldMallCode, adv.FieldMallName, adv.FieldH3Index6, adv.FieldH3Index7, adv.FieldH3Index8, adv.FieldImgPath, adv.FieldURL, adv.FieldRuler, adv.FieldMemo:
			values[i] = new(sql.NullString)
		case adv.FieldCreateTime, adv.FieldUpdateTime, adv.FieldStartTime, adv.FieldEndTime:
			values[i] = new(sql.NullTime)
		case adv.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Adv fields.
func (a *Adv) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case adv.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				a.ID = *value
			}
		case adv.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				a.CreateTime = value.Time
			}
		case adv.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				a.UpdateTime = value.Time
			}
		case adv.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				a.Code = value.String
			}
		case adv.FieldMallCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mall_code", values[i])
			} else if value.Valid {
				a.MallCode = value.String
			}
		case adv.FieldMallName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mall_name", values[i])
			} else if value.Valid {
				a.MallName = value.String
			}
		case adv.FieldH3Index6:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field h3_index_6", values[i])
			} else if value.Valid {
				a.H3Index6 = value.String
			}
		case adv.FieldH3Index7:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field h3_index_7", values[i])
			} else if value.Valid {
				a.H3Index7 = value.String
			}
		case adv.FieldH3Index8:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field h3_index_8", values[i])
			} else if value.Valid {
				a.H3Index8 = value.String
			}
		case adv.FieldImgPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field img_path", values[i])
			} else if value.Valid {
				a.ImgPath = value.String
			}
		case adv.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				a.URL = value.String
			}
		case adv.FieldRuler:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ruler", values[i])
			} else if value.Valid {
				a.Ruler = value.String
			}
		case adv.FieldOrd:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ord", values[i])
			} else if value.Valid {
				a.Ord = int(value.Int64)
			}
		case adv.FieldMemo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field memo", values[i])
			} else if value.Valid {
				a.Memo = value.String
			}
		case adv.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_time", values[i])
			} else if value.Valid {
				a.StartTime = value.Time
			}
		case adv.FieldEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_time", values[i])
			} else if value.Valid {
				a.EndTime = value.Time
			}
		case adv.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				a.Status = int(value.Int64)
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Adv.
// This includes values selected through modifiers, order, etc.
func (a *Adv) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// Update returns a builder for updating this Adv.
// Note that you need to call Adv.Unwrap() before calling this method if this Adv
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Adv) Update() *AdvUpdateOne {
	return NewAdvClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Adv entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Adv) Unwrap() *Adv {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Adv is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Adv) String() string {
	var builder strings.Builder
	builder.WriteString("Adv(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("create_time=")
	builder.WriteString(a.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(a.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(a.Code)
	builder.WriteString(", ")
	builder.WriteString("mall_code=")
	builder.WriteString(a.MallCode)
	builder.WriteString(", ")
	builder.WriteString("mall_name=")
	builder.WriteString(a.MallName)
	builder.WriteString(", ")
	builder.WriteString("h3_index_6=")
	builder.WriteString(a.H3Index6)
	builder.WriteString(", ")
	builder.WriteString("h3_index_7=")
	builder.WriteString(a.H3Index7)
	builder.WriteString(", ")
	builder.WriteString("h3_index_8=")
	builder.WriteString(a.H3Index8)
	builder.WriteString(", ")
	builder.WriteString("img_path=")
	builder.WriteString(a.ImgPath)
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(a.URL)
	builder.WriteString(", ")
	builder.WriteString("ruler=")
	builder.WriteString(a.Ruler)
	builder.WriteString(", ")
	builder.WriteString("ord=")
	builder.WriteString(fmt.Sprintf("%v", a.Ord))
	builder.WriteString(", ")
	builder.WriteString("memo=")
	builder.WriteString(a.Memo)
	builder.WriteString(", ")
	builder.WriteString("start_time=")
	builder.WriteString(a.StartTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_time=")
	builder.WriteString(a.EndTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", a.Status))
	builder.WriteByte(')')
	return builder.String()
}

// Advs is a parsable slice of Adv.
type Advs []*Adv
