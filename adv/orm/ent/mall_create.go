// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/twiglab/crm/adv/orm/ent/mall"
)

// MallCreate is the builder for creating a Mall entity.
type MallCreate struct {
	config
	mutation *MallMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (mc *MallCreate) SetCreateTime(t time.Time) *MallCreate {
	mc.mutation.SetCreateTime(t)
	return mc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (mc *MallCreate) SetNillableCreateTime(t *time.Time) *MallCreate {
	if t != nil {
		mc.SetCreateTime(*t)
	}
	return mc
}

// SetUpdateTime sets the "update_time" field.
func (mc *MallCreate) SetUpdateTime(t time.Time) *MallCreate {
	mc.mutation.SetUpdateTime(t)
	return mc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (mc *MallCreate) SetNillableUpdateTime(t *time.Time) *MallCreate {
	if t != nil {
		mc.SetUpdateTime(*t)
	}
	return mc
}

// SetCode sets the "code" field.
func (mc *MallCreate) SetCode(s string) *MallCreate {
	mc.mutation.SetCode(s)
	return mc
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (mc *MallCreate) SetNillableCode(s *string) *MallCreate {
	if s != nil {
		mc.SetCode(*s)
	}
	return mc
}

// SetMallCode sets the "mall_code" field.
func (mc *MallCreate) SetMallCode(s string) *MallCreate {
	mc.mutation.SetMallCode(s)
	return mc
}

// SetMallName sets the "mall_name" field.
func (mc *MallCreate) SetMallName(s string) *MallCreate {
	mc.mutation.SetMallName(s)
	return mc
}

// SetH3Index6 sets the "h3_index_6" field.
func (mc *MallCreate) SetH3Index6(s string) *MallCreate {
	mc.mutation.SetH3Index6(s)
	return mc
}

// SetH3Index7 sets the "h3_index_7" field.
func (mc *MallCreate) SetH3Index7(s string) *MallCreate {
	mc.mutation.SetH3Index7(s)
	return mc
}

// SetH3Index8 sets the "h3_index_8" field.
func (mc *MallCreate) SetH3Index8(s string) *MallCreate {
	mc.mutation.SetH3Index8(s)
	return mc
}

// SetMemo sets the "memo" field.
func (mc *MallCreate) SetMemo(s string) *MallCreate {
	mc.mutation.SetMemo(s)
	return mc
}

// SetStartTime sets the "start_time" field.
func (mc *MallCreate) SetStartTime(t time.Time) *MallCreate {
	mc.mutation.SetStartTime(t)
	return mc
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (mc *MallCreate) SetNillableStartTime(t *time.Time) *MallCreate {
	if t != nil {
		mc.SetStartTime(*t)
	}
	return mc
}

// SetStatus sets the "status" field.
func (mc *MallCreate) SetStatus(i int) *MallCreate {
	mc.mutation.SetStatus(i)
	return mc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mc *MallCreate) SetNillableStatus(i *int) *MallCreate {
	if i != nil {
		mc.SetStatus(*i)
	}
	return mc
}

// SetID sets the "id" field.
func (mc *MallCreate) SetID(u uuid.UUID) *MallCreate {
	mc.mutation.SetID(u)
	return mc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mc *MallCreate) SetNillableID(u *uuid.UUID) *MallCreate {
	if u != nil {
		mc.SetID(*u)
	}
	return mc
}

// Mutation returns the MallMutation object of the builder.
func (mc *MallCreate) Mutation() *MallMutation {
	return mc.mutation
}

// Save creates the Mall in the database.
func (mc *MallCreate) Save(ctx context.Context) (*Mall, error) {
	mc.defaults()
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MallCreate) SaveX(ctx context.Context) *Mall {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MallCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MallCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *MallCreate) defaults() {
	if _, ok := mc.mutation.CreateTime(); !ok {
		v := mall.DefaultCreateTime()
		mc.mutation.SetCreateTime(v)
	}
	if _, ok := mc.mutation.UpdateTime(); !ok {
		v := mall.DefaultUpdateTime()
		mc.mutation.SetUpdateTime(v)
	}
	if _, ok := mc.mutation.Code(); !ok {
		v := mall.DefaultCode()
		mc.mutation.SetCode(v)
	}
	if _, ok := mc.mutation.StartTime(); !ok {
		v := mall.DefaultStartTime()
		mc.mutation.SetStartTime(v)
	}
	if _, ok := mc.mutation.Status(); !ok {
		v := mall.DefaultStatus
		mc.mutation.SetStatus(v)
	}
	if _, ok := mc.mutation.ID(); !ok {
		v := mall.DefaultID()
		mc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MallCreate) check() error {
	if _, ok := mc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Mall.create_time"`)}
	}
	if _, ok := mc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Mall.update_time"`)}
	}
	if _, ok := mc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "Mall.code"`)}
	}
	if v, ok := mc.mutation.Code(); ok {
		if err := mall.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Mall.code": %w`, err)}
		}
	}
	if _, ok := mc.mutation.MallCode(); !ok {
		return &ValidationError{Name: "mall_code", err: errors.New(`ent: missing required field "Mall.mall_code"`)}
	}
	if v, ok := mc.mutation.MallCode(); ok {
		if err := mall.MallCodeValidator(v); err != nil {
			return &ValidationError{Name: "mall_code", err: fmt.Errorf(`ent: validator failed for field "Mall.mall_code": %w`, err)}
		}
	}
	if _, ok := mc.mutation.MallName(); !ok {
		return &ValidationError{Name: "mall_name", err: errors.New(`ent: missing required field "Mall.mall_name"`)}
	}
	if v, ok := mc.mutation.MallName(); ok {
		if err := mall.MallNameValidator(v); err != nil {
			return &ValidationError{Name: "mall_name", err: fmt.Errorf(`ent: validator failed for field "Mall.mall_name": %w`, err)}
		}
	}
	if _, ok := mc.mutation.H3Index6(); !ok {
		return &ValidationError{Name: "h3_index_6", err: errors.New(`ent: missing required field "Mall.h3_index_6"`)}
	}
	if v, ok := mc.mutation.H3Index6(); ok {
		if err := mall.H3Index6Validator(v); err != nil {
			return &ValidationError{Name: "h3_index_6", err: fmt.Errorf(`ent: validator failed for field "Mall.h3_index_6": %w`, err)}
		}
	}
	if _, ok := mc.mutation.H3Index7(); !ok {
		return &ValidationError{Name: "h3_index_7", err: errors.New(`ent: missing required field "Mall.h3_index_7"`)}
	}
	if v, ok := mc.mutation.H3Index7(); ok {
		if err := mall.H3Index7Validator(v); err != nil {
			return &ValidationError{Name: "h3_index_7", err: fmt.Errorf(`ent: validator failed for field "Mall.h3_index_7": %w`, err)}
		}
	}
	if _, ok := mc.mutation.H3Index8(); !ok {
		return &ValidationError{Name: "h3_index_8", err: errors.New(`ent: missing required field "Mall.h3_index_8"`)}
	}
	if v, ok := mc.mutation.H3Index8(); ok {
		if err := mall.H3Index8Validator(v); err != nil {
			return &ValidationError{Name: "h3_index_8", err: fmt.Errorf(`ent: validator failed for field "Mall.h3_index_8": %w`, err)}
		}
	}
	if _, ok := mc.mutation.Memo(); !ok {
		return &ValidationError{Name: "memo", err: errors.New(`ent: missing required field "Mall.memo"`)}
	}
	if v, ok := mc.mutation.Memo(); ok {
		if err := mall.MemoValidator(v); err != nil {
			return &ValidationError{Name: "memo", err: fmt.Errorf(`ent: validator failed for field "Mall.memo": %w`, err)}
		}
	}
	if _, ok := mc.mutation.StartTime(); !ok {
		return &ValidationError{Name: "start_time", err: errors.New(`ent: missing required field "Mall.start_time"`)}
	}
	if _, ok := mc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Mall.status"`)}
	}
	return nil
}

func (mc *MallCreate) sqlSave(ctx context.Context) (*Mall, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *MallCreate) createSpec() (*Mall, *sqlgraph.CreateSpec) {
	var (
		_node = &Mall{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(mall.Table, sqlgraph.NewFieldSpec(mall.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = mc.conflict
	if id, ok := mc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := mc.mutation.CreateTime(); ok {
		_spec.SetField(mall.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := mc.mutation.UpdateTime(); ok {
		_spec.SetField(mall.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := mc.mutation.Code(); ok {
		_spec.SetField(mall.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := mc.mutation.MallCode(); ok {
		_spec.SetField(mall.FieldMallCode, field.TypeString, value)
		_node.MallCode = value
	}
	if value, ok := mc.mutation.MallName(); ok {
		_spec.SetField(mall.FieldMallName, field.TypeString, value)
		_node.MallName = value
	}
	if value, ok := mc.mutation.H3Index6(); ok {
		_spec.SetField(mall.FieldH3Index6, field.TypeString, value)
		_node.H3Index6 = value
	}
	if value, ok := mc.mutation.H3Index7(); ok {
		_spec.SetField(mall.FieldH3Index7, field.TypeString, value)
		_node.H3Index7 = value
	}
	if value, ok := mc.mutation.H3Index8(); ok {
		_spec.SetField(mall.FieldH3Index8, field.TypeString, value)
		_node.H3Index8 = value
	}
	if value, ok := mc.mutation.Memo(); ok {
		_spec.SetField(mall.FieldMemo, field.TypeString, value)
		_node.Memo = value
	}
	if value, ok := mc.mutation.StartTime(); ok {
		_spec.SetField(mall.FieldStartTime, field.TypeTime, value)
		_node.StartTime = value
	}
	if value, ok := mc.mutation.Status(); ok {
		_spec.SetField(mall.FieldStatus, field.TypeInt, value)
		_node.Status = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Mall.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MallUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (mc *MallCreate) OnConflict(opts ...sql.ConflictOption) *MallUpsertOne {
	mc.conflict = opts
	return &MallUpsertOne{
		create: mc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Mall.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mc *MallCreate) OnConflictColumns(columns ...string) *MallUpsertOne {
	mc.conflict = append(mc.conflict, sql.ConflictColumns(columns...))
	return &MallUpsertOne{
		create: mc,
	}
}

type (
	// MallUpsertOne is the builder for "upsert"-ing
	//  one Mall node.
	MallUpsertOne struct {
		create *MallCreate
	}

	// MallUpsert is the "OnConflict" setter.
	MallUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *MallUpsert) SetUpdateTime(v time.Time) *MallUpsert {
	u.Set(mall.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *MallUpsert) UpdateUpdateTime() *MallUpsert {
	u.SetExcluded(mall.FieldUpdateTime)
	return u
}

// SetMallName sets the "mall_name" field.
func (u *MallUpsert) SetMallName(v string) *MallUpsert {
	u.Set(mall.FieldMallName, v)
	return u
}

// UpdateMallName sets the "mall_name" field to the value that was provided on create.
func (u *MallUpsert) UpdateMallName() *MallUpsert {
	u.SetExcluded(mall.FieldMallName)
	return u
}

// SetH3Index6 sets the "h3_index_6" field.
func (u *MallUpsert) SetH3Index6(v string) *MallUpsert {
	u.Set(mall.FieldH3Index6, v)
	return u
}

// UpdateH3Index6 sets the "h3_index_6" field to the value that was provided on create.
func (u *MallUpsert) UpdateH3Index6() *MallUpsert {
	u.SetExcluded(mall.FieldH3Index6)
	return u
}

// SetH3Index7 sets the "h3_index_7" field.
func (u *MallUpsert) SetH3Index7(v string) *MallUpsert {
	u.Set(mall.FieldH3Index7, v)
	return u
}

// UpdateH3Index7 sets the "h3_index_7" field to the value that was provided on create.
func (u *MallUpsert) UpdateH3Index7() *MallUpsert {
	u.SetExcluded(mall.FieldH3Index7)
	return u
}

// SetH3Index8 sets the "h3_index_8" field.
func (u *MallUpsert) SetH3Index8(v string) *MallUpsert {
	u.Set(mall.FieldH3Index8, v)
	return u
}

// UpdateH3Index8 sets the "h3_index_8" field to the value that was provided on create.
func (u *MallUpsert) UpdateH3Index8() *MallUpsert {
	u.SetExcluded(mall.FieldH3Index8)
	return u
}

// SetMemo sets the "memo" field.
func (u *MallUpsert) SetMemo(v string) *MallUpsert {
	u.Set(mall.FieldMemo, v)
	return u
}

// UpdateMemo sets the "memo" field to the value that was provided on create.
func (u *MallUpsert) UpdateMemo() *MallUpsert {
	u.SetExcluded(mall.FieldMemo)
	return u
}

// SetStatus sets the "status" field.
func (u *MallUpsert) SetStatus(v int) *MallUpsert {
	u.Set(mall.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *MallUpsert) UpdateStatus() *MallUpsert {
	u.SetExcluded(mall.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *MallUpsert) AddStatus(v int) *MallUpsert {
	u.Add(mall.FieldStatus, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Mall.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(mall.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MallUpsertOne) UpdateNewValues() *MallUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(mall.FieldID)
		}
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(mall.FieldCreateTime)
		}
		if _, exists := u.create.mutation.Code(); exists {
			s.SetIgnore(mall.FieldCode)
		}
		if _, exists := u.create.mutation.MallCode(); exists {
			s.SetIgnore(mall.FieldMallCode)
		}
		if _, exists := u.create.mutation.StartTime(); exists {
			s.SetIgnore(mall.FieldStartTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Mall.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MallUpsertOne) Ignore() *MallUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MallUpsertOne) DoNothing() *MallUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MallCreate.OnConflict
// documentation for more info.
func (u *MallUpsertOne) Update(set func(*MallUpsert)) *MallUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MallUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *MallUpsertOne) SetUpdateTime(v time.Time) *MallUpsertOne {
	return u.Update(func(s *MallUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *MallUpsertOne) UpdateUpdateTime() *MallUpsertOne {
	return u.Update(func(s *MallUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetMallName sets the "mall_name" field.
func (u *MallUpsertOne) SetMallName(v string) *MallUpsertOne {
	return u.Update(func(s *MallUpsert) {
		s.SetMallName(v)
	})
}

// UpdateMallName sets the "mall_name" field to the value that was provided on create.
func (u *MallUpsertOne) UpdateMallName() *MallUpsertOne {
	return u.Update(func(s *MallUpsert) {
		s.UpdateMallName()
	})
}

// SetH3Index6 sets the "h3_index_6" field.
func (u *MallUpsertOne) SetH3Index6(v string) *MallUpsertOne {
	return u.Update(func(s *MallUpsert) {
		s.SetH3Index6(v)
	})
}

// UpdateH3Index6 sets the "h3_index_6" field to the value that was provided on create.
func (u *MallUpsertOne) UpdateH3Index6() *MallUpsertOne {
	return u.Update(func(s *MallUpsert) {
		s.UpdateH3Index6()
	})
}

// SetH3Index7 sets the "h3_index_7" field.
func (u *MallUpsertOne) SetH3Index7(v string) *MallUpsertOne {
	return u.Update(func(s *MallUpsert) {
		s.SetH3Index7(v)
	})
}

// UpdateH3Index7 sets the "h3_index_7" field to the value that was provided on create.
func (u *MallUpsertOne) UpdateH3Index7() *MallUpsertOne {
	return u.Update(func(s *MallUpsert) {
		s.UpdateH3Index7()
	})
}

// SetH3Index8 sets the "h3_index_8" field.
func (u *MallUpsertOne) SetH3Index8(v string) *MallUpsertOne {
	return u.Update(func(s *MallUpsert) {
		s.SetH3Index8(v)
	})
}

// UpdateH3Index8 sets the "h3_index_8" field to the value that was provided on create.
func (u *MallUpsertOne) UpdateH3Index8() *MallUpsertOne {
	return u.Update(func(s *MallUpsert) {
		s.UpdateH3Index8()
	})
}

// SetMemo sets the "memo" field.
func (u *MallUpsertOne) SetMemo(v string) *MallUpsertOne {
	return u.Update(func(s *MallUpsert) {
		s.SetMemo(v)
	})
}

// UpdateMemo sets the "memo" field to the value that was provided on create.
func (u *MallUpsertOne) UpdateMemo() *MallUpsertOne {
	return u.Update(func(s *MallUpsert) {
		s.UpdateMemo()
	})
}

// SetStatus sets the "status" field.
func (u *MallUpsertOne) SetStatus(v int) *MallUpsertOne {
	return u.Update(func(s *MallUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *MallUpsertOne) AddStatus(v int) *MallUpsertOne {
	return u.Update(func(s *MallUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *MallUpsertOne) UpdateStatus() *MallUpsertOne {
	return u.Update(func(s *MallUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *MallUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MallCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MallUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MallUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: MallUpsertOne.ID is not supported by MySQL driver. Use MallUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MallUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MallCreateBulk is the builder for creating many Mall entities in bulk.
type MallCreateBulk struct {
	config
	err      error
	builders []*MallCreate
	conflict []sql.ConflictOption
}

// Save creates the Mall entities in the database.
func (mcb *MallCreateBulk) Save(ctx context.Context) ([]*Mall, error) {
	if mcb.err != nil {
		return nil, mcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Mall, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MallMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MallCreateBulk) SaveX(ctx context.Context) []*Mall {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MallCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MallCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Mall.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MallUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (mcb *MallCreateBulk) OnConflict(opts ...sql.ConflictOption) *MallUpsertBulk {
	mcb.conflict = opts
	return &MallUpsertBulk{
		create: mcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Mall.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mcb *MallCreateBulk) OnConflictColumns(columns ...string) *MallUpsertBulk {
	mcb.conflict = append(mcb.conflict, sql.ConflictColumns(columns...))
	return &MallUpsertBulk{
		create: mcb,
	}
}

// MallUpsertBulk is the builder for "upsert"-ing
// a bulk of Mall nodes.
type MallUpsertBulk struct {
	create *MallCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Mall.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(mall.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MallUpsertBulk) UpdateNewValues() *MallUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(mall.FieldID)
			}
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(mall.FieldCreateTime)
			}
			if _, exists := b.mutation.Code(); exists {
				s.SetIgnore(mall.FieldCode)
			}
			if _, exists := b.mutation.MallCode(); exists {
				s.SetIgnore(mall.FieldMallCode)
			}
			if _, exists := b.mutation.StartTime(); exists {
				s.SetIgnore(mall.FieldStartTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Mall.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MallUpsertBulk) Ignore() *MallUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MallUpsertBulk) DoNothing() *MallUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MallCreateBulk.OnConflict
// documentation for more info.
func (u *MallUpsertBulk) Update(set func(*MallUpsert)) *MallUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MallUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *MallUpsertBulk) SetUpdateTime(v time.Time) *MallUpsertBulk {
	return u.Update(func(s *MallUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *MallUpsertBulk) UpdateUpdateTime() *MallUpsertBulk {
	return u.Update(func(s *MallUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetMallName sets the "mall_name" field.
func (u *MallUpsertBulk) SetMallName(v string) *MallUpsertBulk {
	return u.Update(func(s *MallUpsert) {
		s.SetMallName(v)
	})
}

// UpdateMallName sets the "mall_name" field to the value that was provided on create.
func (u *MallUpsertBulk) UpdateMallName() *MallUpsertBulk {
	return u.Update(func(s *MallUpsert) {
		s.UpdateMallName()
	})
}

// SetH3Index6 sets the "h3_index_6" field.
func (u *MallUpsertBulk) SetH3Index6(v string) *MallUpsertBulk {
	return u.Update(func(s *MallUpsert) {
		s.SetH3Index6(v)
	})
}

// UpdateH3Index6 sets the "h3_index_6" field to the value that was provided on create.
func (u *MallUpsertBulk) UpdateH3Index6() *MallUpsertBulk {
	return u.Update(func(s *MallUpsert) {
		s.UpdateH3Index6()
	})
}

// SetH3Index7 sets the "h3_index_7" field.
func (u *MallUpsertBulk) SetH3Index7(v string) *MallUpsertBulk {
	return u.Update(func(s *MallUpsert) {
		s.SetH3Index7(v)
	})
}

// UpdateH3Index7 sets the "h3_index_7" field to the value that was provided on create.
func (u *MallUpsertBulk) UpdateH3Index7() *MallUpsertBulk {
	return u.Update(func(s *MallUpsert) {
		s.UpdateH3Index7()
	})
}

// SetH3Index8 sets the "h3_index_8" field.
func (u *MallUpsertBulk) SetH3Index8(v string) *MallUpsertBulk {
	return u.Update(func(s *MallUpsert) {
		s.SetH3Index8(v)
	})
}

// UpdateH3Index8 sets the "h3_index_8" field to the value that was provided on create.
func (u *MallUpsertBulk) UpdateH3Index8() *MallUpsertBulk {
	return u.Update(func(s *MallUpsert) {
		s.UpdateH3Index8()
	})
}

// SetMemo sets the "memo" field.
func (u *MallUpsertBulk) SetMemo(v string) *MallUpsertBulk {
	return u.Update(func(s *MallUpsert) {
		s.SetMemo(v)
	})
}

// UpdateMemo sets the "memo" field to the value that was provided on create.
func (u *MallUpsertBulk) UpdateMemo() *MallUpsertBulk {
	return u.Update(func(s *MallUpsert) {
		s.UpdateMemo()
	})
}

// SetStatus sets the "status" field.
func (u *MallUpsertBulk) SetStatus(v int) *MallUpsertBulk {
	return u.Update(func(s *MallUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *MallUpsertBulk) AddStatus(v int) *MallUpsertBulk {
	return u.Update(func(s *MallUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *MallUpsertBulk) UpdateStatus() *MallUpsertBulk {
	return u.Update(func(s *MallUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *MallUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MallCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MallCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MallUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
