// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/twiglab/crm/adv/orm/ent/adv"
	"github.com/twiglab/crm/adv/orm/ent/mall"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 2)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   adv.Table,
			Columns: adv.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: adv.FieldID,
			},
		},
		Type: "Adv",
		Fields: map[string]*sqlgraph.FieldSpec{
			adv.FieldCreateTime: {Type: field.TypeTime, Column: adv.FieldCreateTime},
			adv.FieldUpdateTime: {Type: field.TypeTime, Column: adv.FieldUpdateTime},
			adv.FieldCode:       {Type: field.TypeString, Column: adv.FieldCode},
			adv.FieldMallCode:   {Type: field.TypeString, Column: adv.FieldMallCode},
			adv.FieldMallName:   {Type: field.TypeString, Column: adv.FieldMallName},
			adv.FieldH3Index6:   {Type: field.TypeString, Column: adv.FieldH3Index6},
			adv.FieldH3Index7:   {Type: field.TypeString, Column: adv.FieldH3Index7},
			adv.FieldH3Index8:   {Type: field.TypeString, Column: adv.FieldH3Index8},
			adv.FieldImgPath:    {Type: field.TypeString, Column: adv.FieldImgPath},
			adv.FieldURL:        {Type: field.TypeString, Column: adv.FieldURL},
			adv.FieldRuler:      {Type: field.TypeString, Column: adv.FieldRuler},
			adv.FieldOrd:        {Type: field.TypeInt, Column: adv.FieldOrd},
			adv.FieldMemo:       {Type: field.TypeString, Column: adv.FieldMemo},
			adv.FieldStartTime:  {Type: field.TypeTime, Column: adv.FieldStartTime},
			adv.FieldEndTime:    {Type: field.TypeTime, Column: adv.FieldEndTime},
			adv.FieldStatus:     {Type: field.TypeInt, Column: adv.FieldStatus},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   mall.Table,
			Columns: mall.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: mall.FieldID,
			},
		},
		Type: "Mall",
		Fields: map[string]*sqlgraph.FieldSpec{
			mall.FieldCreateTime: {Type: field.TypeTime, Column: mall.FieldCreateTime},
			mall.FieldUpdateTime: {Type: field.TypeTime, Column: mall.FieldUpdateTime},
			mall.FieldCode:       {Type: field.TypeString, Column: mall.FieldCode},
			mall.FieldMallCode:   {Type: field.TypeString, Column: mall.FieldMallCode},
			mall.FieldMallName:   {Type: field.TypeString, Column: mall.FieldMallName},
			mall.FieldH3Index6:   {Type: field.TypeString, Column: mall.FieldH3Index6},
			mall.FieldH3Index7:   {Type: field.TypeString, Column: mall.FieldH3Index7},
			mall.FieldH3Index8:   {Type: field.TypeString, Column: mall.FieldH3Index8},
			mall.FieldMemo:       {Type: field.TypeString, Column: mall.FieldMemo},
			mall.FieldStartTime:  {Type: field.TypeTime, Column: mall.FieldStartTime},
			mall.FieldStatus:     {Type: field.TypeInt, Column: mall.FieldStatus},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (aq *AdvQuery) addPredicate(pred func(s *sql.Selector)) {
	aq.predicates = append(aq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AdvQuery builder.
func (aq *AdvQuery) Filter() *AdvFilter {
	return &AdvFilter{config: aq.config, predicateAdder: aq}
}

// addPredicate implements the predicateAdder interface.
func (m *AdvMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AdvMutation builder.
func (m *AdvMutation) Filter() *AdvFilter {
	return &AdvFilter{config: m.config, predicateAdder: m}
}

// AdvFilter provides a generic filtering capability at runtime for AdvQuery.
type AdvFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AdvFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *AdvFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(adv.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *AdvFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(adv.FieldCreateTime))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *AdvFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(adv.FieldUpdateTime))
}

// WhereCode applies the entql string predicate on the code field.
func (f *AdvFilter) WhereCode(p entql.StringP) {
	f.Where(p.Field(adv.FieldCode))
}

// WhereMallCode applies the entql string predicate on the mall_code field.
func (f *AdvFilter) WhereMallCode(p entql.StringP) {
	f.Where(p.Field(adv.FieldMallCode))
}

// WhereMallName applies the entql string predicate on the mall_name field.
func (f *AdvFilter) WhereMallName(p entql.StringP) {
	f.Where(p.Field(adv.FieldMallName))
}

// WhereH3Index6 applies the entql string predicate on the h3_index_6 field.
func (f *AdvFilter) WhereH3Index6(p entql.StringP) {
	f.Where(p.Field(adv.FieldH3Index6))
}

// WhereH3Index7 applies the entql string predicate on the h3_index_7 field.
func (f *AdvFilter) WhereH3Index7(p entql.StringP) {
	f.Where(p.Field(adv.FieldH3Index7))
}

// WhereH3Index8 applies the entql string predicate on the h3_index_8 field.
func (f *AdvFilter) WhereH3Index8(p entql.StringP) {
	f.Where(p.Field(adv.FieldH3Index8))
}

// WhereImgPath applies the entql string predicate on the img_path field.
func (f *AdvFilter) WhereImgPath(p entql.StringP) {
	f.Where(p.Field(adv.FieldImgPath))
}

// WhereURL applies the entql string predicate on the url field.
func (f *AdvFilter) WhereURL(p entql.StringP) {
	f.Where(p.Field(adv.FieldURL))
}

// WhereRuler applies the entql string predicate on the ruler field.
func (f *AdvFilter) WhereRuler(p entql.StringP) {
	f.Where(p.Field(adv.FieldRuler))
}

// WhereOrd applies the entql int predicate on the ord field.
func (f *AdvFilter) WhereOrd(p entql.IntP) {
	f.Where(p.Field(adv.FieldOrd))
}

// WhereMemo applies the entql string predicate on the memo field.
func (f *AdvFilter) WhereMemo(p entql.StringP) {
	f.Where(p.Field(adv.FieldMemo))
}

// WhereStartTime applies the entql time.Time predicate on the start_time field.
func (f *AdvFilter) WhereStartTime(p entql.TimeP) {
	f.Where(p.Field(adv.FieldStartTime))
}

// WhereEndTime applies the entql time.Time predicate on the end_time field.
func (f *AdvFilter) WhereEndTime(p entql.TimeP) {
	f.Where(p.Field(adv.FieldEndTime))
}

// WhereStatus applies the entql int predicate on the status field.
func (f *AdvFilter) WhereStatus(p entql.IntP) {
	f.Where(p.Field(adv.FieldStatus))
}

// addPredicate implements the predicateAdder interface.
func (mq *MallQuery) addPredicate(pred func(s *sql.Selector)) {
	mq.predicates = append(mq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the MallQuery builder.
func (mq *MallQuery) Filter() *MallFilter {
	return &MallFilter{config: mq.config, predicateAdder: mq}
}

// addPredicate implements the predicateAdder interface.
func (m *MallMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the MallMutation builder.
func (m *MallMutation) Filter() *MallFilter {
	return &MallFilter{config: m.config, predicateAdder: m}
}

// MallFilter provides a generic filtering capability at runtime for MallQuery.
type MallFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *MallFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *MallFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(mall.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *MallFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(mall.FieldCreateTime))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *MallFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(mall.FieldUpdateTime))
}

// WhereCode applies the entql string predicate on the code field.
func (f *MallFilter) WhereCode(p entql.StringP) {
	f.Where(p.Field(mall.FieldCode))
}

// WhereMallCode applies the entql string predicate on the mall_code field.
func (f *MallFilter) WhereMallCode(p entql.StringP) {
	f.Where(p.Field(mall.FieldMallCode))
}

// WhereMallName applies the entql string predicate on the mall_name field.
func (f *MallFilter) WhereMallName(p entql.StringP) {
	f.Where(p.Field(mall.FieldMallName))
}

// WhereH3Index6 applies the entql string predicate on the h3_index_6 field.
func (f *MallFilter) WhereH3Index6(p entql.StringP) {
	f.Where(p.Field(mall.FieldH3Index6))
}

// WhereH3Index7 applies the entql string predicate on the h3_index_7 field.
func (f *MallFilter) WhereH3Index7(p entql.StringP) {
	f.Where(p.Field(mall.FieldH3Index7))
}

// WhereH3Index8 applies the entql string predicate on the h3_index_8 field.
func (f *MallFilter) WhereH3Index8(p entql.StringP) {
	f.Where(p.Field(mall.FieldH3Index8))
}

// WhereMemo applies the entql string predicate on the memo field.
func (f *MallFilter) WhereMemo(p entql.StringP) {
	f.Where(p.Field(mall.FieldMemo))
}

// WhereStartTime applies the entql time.Time predicate on the start_time field.
func (f *MallFilter) WhereStartTime(p entql.TimeP) {
	f.Where(p.Field(mall.FieldStartTime))
}

// WhereStatus applies the entql int predicate on the status field.
func (f *MallFilter) WhereStatus(p entql.IntP) {
	f.Where(p.Field(mall.FieldStatus))
}
