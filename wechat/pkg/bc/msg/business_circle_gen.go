package msg

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *BusinessCircleAuthor) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "BusinessCircleMsg":
			err = z.BusinessCircleMsg.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "BusinessCircleMsg")
				return
			}
		case "OpenID":
			z.OpenID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "OpenID")
				return
			}
		case "Code":
			z.Code, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Code")
				return
			}
		case "MchID":
			z.MchID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "MchID")
				return
			}
		case "AuthType":
			z.AuthType, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "AuthType")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *BusinessCircleAuthor) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "BusinessCircleMsg"
	err = en.Append(0x85, 0xb1, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x4d, 0x73, 0x67)
	if err != nil {
		return
	}
	err = z.BusinessCircleMsg.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "BusinessCircleMsg")
		return
	}
	// write "OpenID"
	err = en.Append(0xa6, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteString(z.OpenID)
	if err != nil {
		err = msgp.WrapError(err, "OpenID")
		return
	}
	// write "Code"
	err = en.Append(0xa4, 0x43, 0x6f, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Code)
	if err != nil {
		err = msgp.WrapError(err, "Code")
		return
	}
	// write "MchID"
	err = en.Append(0xa5, 0x4d, 0x63, 0x68, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteString(z.MchID)
	if err != nil {
		err = msgp.WrapError(err, "MchID")
		return
	}
	// write "AuthType"
	err = en.Append(0xa8, 0x41, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.AuthType)
	if err != nil {
		err = msgp.WrapError(err, "AuthType")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *BusinessCircleAuthor) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "BusinessCircleMsg"
	o = append(o, 0x85, 0xb1, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x4d, 0x73, 0x67)
	o, err = z.BusinessCircleMsg.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "BusinessCircleMsg")
		return
	}
	// string "OpenID"
	o = append(o, 0xa6, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x44)
	o = msgp.AppendString(o, z.OpenID)
	// string "Code"
	o = append(o, 0xa4, 0x43, 0x6f, 0x64, 0x65)
	o = msgp.AppendString(o, z.Code)
	// string "MchID"
	o = append(o, 0xa5, 0x4d, 0x63, 0x68, 0x49, 0x44)
	o = msgp.AppendString(o, z.MchID)
	// string "AuthType"
	o = append(o, 0xa8, 0x41, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65)
	o = msgp.AppendString(o, z.AuthType)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *BusinessCircleAuthor) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "BusinessCircleMsg":
			bts, err = z.BusinessCircleMsg.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "BusinessCircleMsg")
				return
			}
		case "OpenID":
			z.OpenID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "OpenID")
				return
			}
		case "Code":
			z.Code, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Code")
				return
			}
		case "MchID":
			z.MchID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MchID")
				return
			}
		case "AuthType":
			z.AuthType, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "AuthType")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *BusinessCircleAuthor) Msgsize() (s int) {
	s = 1 + 18 + z.BusinessCircleMsg.Msgsize() + 7 + msgp.StringPrefixSize + len(z.OpenID) + 5 + msgp.StringPrefixSize + len(z.Code) + 6 + msgp.StringPrefixSize + len(z.MchID) + 9 + msgp.StringPrefixSize + len(z.AuthType)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *BusinessCircleMsg) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "MsgID":
			z.MsgID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "MsgID")
				return
			}
		case "CreateTime":
			z.CreateTime, err = dc.ReadTime()
			if err != nil {
				err = msgp.WrapError(err, "CreateTime")
				return
			}
		case "MsgType":
			z.MsgType, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "MsgType")
				return
			}
		case "Summary":
			z.Summary, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Summary")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *BusinessCircleMsg) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "MsgID"
	err = en.Append(0x84, 0xa5, 0x4d, 0x73, 0x67, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteString(z.MsgID)
	if err != nil {
		err = msgp.WrapError(err, "MsgID")
		return
	}
	// write "CreateTime"
	err = en.Append(0xaa, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteTime(z.CreateTime)
	if err != nil {
		err = msgp.WrapError(err, "CreateTime")
		return
	}
	// write "MsgType"
	err = en.Append(0xa7, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.MsgType)
	if err != nil {
		err = msgp.WrapError(err, "MsgType")
		return
	}
	// write "Summary"
	err = en.Append(0xa7, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79)
	if err != nil {
		return
	}
	err = en.WriteString(z.Summary)
	if err != nil {
		err = msgp.WrapError(err, "Summary")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *BusinessCircleMsg) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "MsgID"
	o = append(o, 0x84, 0xa5, 0x4d, 0x73, 0x67, 0x49, 0x44)
	o = msgp.AppendString(o, z.MsgID)
	// string "CreateTime"
	o = append(o, 0xaa, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65)
	o = msgp.AppendTime(o, z.CreateTime)
	// string "MsgType"
	o = append(o, 0xa7, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65)
	o = msgp.AppendString(o, z.MsgType)
	// string "Summary"
	o = append(o, 0xa7, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79)
	o = msgp.AppendString(o, z.Summary)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *BusinessCircleMsg) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "MsgID":
			z.MsgID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MsgID")
				return
			}
		case "CreateTime":
			z.CreateTime, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CreateTime")
				return
			}
		case "MsgType":
			z.MsgType, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MsgType")
				return
			}
		case "Summary":
			z.Summary, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Summary")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *BusinessCircleMsg) Msgsize() (s int) {
	s = 1 + 6 + msgp.StringPrefixSize + len(z.MsgID) + 11 + msgp.TimeSize + 8 + msgp.StringPrefixSize + len(z.MsgType) + 8 + msgp.StringPrefixSize + len(z.Summary)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *BusinessCirclePayment) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "BusinessCircleMsg":
			err = z.BusinessCircleMsg.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "BusinessCircleMsg")
				return
			}
		case "BusinessCircleShopBase":
			err = z.BusinessCircleShopBase.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "BusinessCircleShopBase")
				return
			}
		case "AppID":
			z.AppID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "AppID")
				return
			}
		case "OpenID":
			z.OpenID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "OpenID")
				return
			}
		case "Amount":
			z.Amount, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Amount")
				return
			}
		case "TimeEnd":
			z.TimeEnd, err = dc.ReadTime()
			if err != nil {
				err = msgp.WrapError(err, "TimeEnd")
				return
			}
		case "TransactionID":
			z.TransactionID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "TransactionID")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *BusinessCirclePayment) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 7
	// write "BusinessCircleMsg"
	err = en.Append(0x87, 0xb1, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x4d, 0x73, 0x67)
	if err != nil {
		return
	}
	err = z.BusinessCircleMsg.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "BusinessCircleMsg")
		return
	}
	// write "BusinessCircleShopBase"
	err = en.Append(0xb6, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x42, 0x61, 0x73, 0x65)
	if err != nil {
		return
	}
	err = z.BusinessCircleShopBase.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "BusinessCircleShopBase")
		return
	}
	// write "AppID"
	err = en.Append(0xa5, 0x41, 0x70, 0x70, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteString(z.AppID)
	if err != nil {
		err = msgp.WrapError(err, "AppID")
		return
	}
	// write "OpenID"
	err = en.Append(0xa6, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteString(z.OpenID)
	if err != nil {
		err = msgp.WrapError(err, "OpenID")
		return
	}
	// write "Amount"
	err = en.Append(0xa6, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Amount)
	if err != nil {
		err = msgp.WrapError(err, "Amount")
		return
	}
	// write "TimeEnd"
	err = en.Append(0xa7, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64)
	if err != nil {
		return
	}
	err = en.WriteTime(z.TimeEnd)
	if err != nil {
		err = msgp.WrapError(err, "TimeEnd")
		return
	}
	// write "TransactionID"
	err = en.Append(0xad, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteString(z.TransactionID)
	if err != nil {
		err = msgp.WrapError(err, "TransactionID")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *BusinessCirclePayment) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 7
	// string "BusinessCircleMsg"
	o = append(o, 0x87, 0xb1, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x4d, 0x73, 0x67)
	o, err = z.BusinessCircleMsg.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "BusinessCircleMsg")
		return
	}
	// string "BusinessCircleShopBase"
	o = append(o, 0xb6, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x42, 0x61, 0x73, 0x65)
	o, err = z.BusinessCircleShopBase.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "BusinessCircleShopBase")
		return
	}
	// string "AppID"
	o = append(o, 0xa5, 0x41, 0x70, 0x70, 0x49, 0x44)
	o = msgp.AppendString(o, z.AppID)
	// string "OpenID"
	o = append(o, 0xa6, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x44)
	o = msgp.AppendString(o, z.OpenID)
	// string "Amount"
	o = append(o, 0xa6, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74)
	o = msgp.AppendInt(o, z.Amount)
	// string "TimeEnd"
	o = append(o, 0xa7, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64)
	o = msgp.AppendTime(o, z.TimeEnd)
	// string "TransactionID"
	o = append(o, 0xad, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44)
	o = msgp.AppendString(o, z.TransactionID)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *BusinessCirclePayment) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "BusinessCircleMsg":
			bts, err = z.BusinessCircleMsg.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "BusinessCircleMsg")
				return
			}
		case "BusinessCircleShopBase":
			bts, err = z.BusinessCircleShopBase.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "BusinessCircleShopBase")
				return
			}
		case "AppID":
			z.AppID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "AppID")
				return
			}
		case "OpenID":
			z.OpenID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "OpenID")
				return
			}
		case "Amount":
			z.Amount, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Amount")
				return
			}
		case "TimeEnd":
			z.TimeEnd, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TimeEnd")
				return
			}
		case "TransactionID":
			z.TransactionID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TransactionID")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *BusinessCirclePayment) Msgsize() (s int) {
	s = 1 + 18 + z.BusinessCircleMsg.Msgsize() + 23 + z.BusinessCircleShopBase.Msgsize() + 6 + msgp.StringPrefixSize + len(z.AppID) + 7 + msgp.StringPrefixSize + len(z.OpenID) + 7 + msgp.IntSize + 8 + msgp.TimeSize + 14 + msgp.StringPrefixSize + len(z.TransactionID)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *BusinessCircleRefund) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "BusinessCircleMsg":
			err = z.BusinessCircleMsg.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "BusinessCircleMsg")
				return
			}
		case "BusinessCircleShopBase":
			err = z.BusinessCircleShopBase.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "BusinessCircleShopBase")
				return
			}
		case "AppID":
			z.AppID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "AppID")
				return
			}
		case "OpenID":
			z.OpenID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "OpenID")
				return
			}
		case "RefundTime":
			z.RefundTime, err = dc.ReadTime()
			if err != nil {
				err = msgp.WrapError(err, "RefundTime")
				return
			}
		case "PayAmount":
			z.PayAmount, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "PayAmount")
				return
			}
		case "RefundAmount":
			z.RefundAmount, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "RefundAmount")
				return
			}
		case "TransactionID":
			z.TransactionID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "TransactionID")
				return
			}
		case "RefundID":
			z.RefundID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "RefundID")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *BusinessCircleRefund) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 9
	// write "BusinessCircleMsg"
	err = en.Append(0x89, 0xb1, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x4d, 0x73, 0x67)
	if err != nil {
		return
	}
	err = z.BusinessCircleMsg.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "BusinessCircleMsg")
		return
	}
	// write "BusinessCircleShopBase"
	err = en.Append(0xb6, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x42, 0x61, 0x73, 0x65)
	if err != nil {
		return
	}
	err = z.BusinessCircleShopBase.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "BusinessCircleShopBase")
		return
	}
	// write "AppID"
	err = en.Append(0xa5, 0x41, 0x70, 0x70, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteString(z.AppID)
	if err != nil {
		err = msgp.WrapError(err, "AppID")
		return
	}
	// write "OpenID"
	err = en.Append(0xa6, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteString(z.OpenID)
	if err != nil {
		err = msgp.WrapError(err, "OpenID")
		return
	}
	// write "RefundTime"
	err = en.Append(0xaa, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteTime(z.RefundTime)
	if err != nil {
		err = msgp.WrapError(err, "RefundTime")
		return
	}
	// write "PayAmount"
	err = en.Append(0xa9, 0x50, 0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.PayAmount)
	if err != nil {
		err = msgp.WrapError(err, "PayAmount")
		return
	}
	// write "RefundAmount"
	err = en.Append(0xac, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.RefundAmount)
	if err != nil {
		err = msgp.WrapError(err, "RefundAmount")
		return
	}
	// write "TransactionID"
	err = en.Append(0xad, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteString(z.TransactionID)
	if err != nil {
		err = msgp.WrapError(err, "TransactionID")
		return
	}
	// write "RefundID"
	err = en.Append(0xa8, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteString(z.RefundID)
	if err != nil {
		err = msgp.WrapError(err, "RefundID")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *BusinessCircleRefund) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 9
	// string "BusinessCircleMsg"
	o = append(o, 0x89, 0xb1, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x4d, 0x73, 0x67)
	o, err = z.BusinessCircleMsg.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "BusinessCircleMsg")
		return
	}
	// string "BusinessCircleShopBase"
	o = append(o, 0xb6, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x42, 0x61, 0x73, 0x65)
	o, err = z.BusinessCircleShopBase.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "BusinessCircleShopBase")
		return
	}
	// string "AppID"
	o = append(o, 0xa5, 0x41, 0x70, 0x70, 0x49, 0x44)
	o = msgp.AppendString(o, z.AppID)
	// string "OpenID"
	o = append(o, 0xa6, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x44)
	o = msgp.AppendString(o, z.OpenID)
	// string "RefundTime"
	o = append(o, 0xaa, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65)
	o = msgp.AppendTime(o, z.RefundTime)
	// string "PayAmount"
	o = append(o, 0xa9, 0x50, 0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74)
	o = msgp.AppendInt(o, z.PayAmount)
	// string "RefundAmount"
	o = append(o, 0xac, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74)
	o = msgp.AppendInt(o, z.RefundAmount)
	// string "TransactionID"
	o = append(o, 0xad, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44)
	o = msgp.AppendString(o, z.TransactionID)
	// string "RefundID"
	o = append(o, 0xa8, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x49, 0x44)
	o = msgp.AppendString(o, z.RefundID)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *BusinessCircleRefund) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "BusinessCircleMsg":
			bts, err = z.BusinessCircleMsg.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "BusinessCircleMsg")
				return
			}
		case "BusinessCircleShopBase":
			bts, err = z.BusinessCircleShopBase.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "BusinessCircleShopBase")
				return
			}
		case "AppID":
			z.AppID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "AppID")
				return
			}
		case "OpenID":
			z.OpenID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "OpenID")
				return
			}
		case "RefundTime":
			z.RefundTime, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RefundTime")
				return
			}
		case "PayAmount":
			z.PayAmount, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PayAmount")
				return
			}
		case "RefundAmount":
			z.RefundAmount, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RefundAmount")
				return
			}
		case "TransactionID":
			z.TransactionID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TransactionID")
				return
			}
		case "RefundID":
			z.RefundID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RefundID")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *BusinessCircleRefund) Msgsize() (s int) {
	s = 1 + 18 + z.BusinessCircleMsg.Msgsize() + 23 + z.BusinessCircleShopBase.Msgsize() + 6 + msgp.StringPrefixSize + len(z.AppID) + 7 + msgp.StringPrefixSize + len(z.OpenID) + 11 + msgp.TimeSize + 10 + msgp.IntSize + 13 + msgp.IntSize + 14 + msgp.StringPrefixSize + len(z.TransactionID) + 9 + msgp.StringPrefixSize + len(z.RefundID)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *BusinessCircleShopBase) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "MchID":
			z.MchID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "MchID")
				return
			}
		case "MerchantName":
			z.MerchantName, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "MerchantName")
				return
			}
		case "ShopName":
			z.ShopName, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ShopName")
				return
			}
		case "ShopNumber":
			z.ShopNumber, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ShopNumber")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *BusinessCircleShopBase) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "MchID"
	err = en.Append(0x84, 0xa5, 0x4d, 0x63, 0x68, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteString(z.MchID)
	if err != nil {
		err = msgp.WrapError(err, "MchID")
		return
	}
	// write "MerchantName"
	err = en.Append(0xac, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.MerchantName)
	if err != nil {
		err = msgp.WrapError(err, "MerchantName")
		return
	}
	// write "ShopName"
	err = en.Append(0xa8, 0x53, 0x68, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.ShopName)
	if err != nil {
		err = msgp.WrapError(err, "ShopName")
		return
	}
	// write "ShopNumber"
	err = en.Append(0xaa, 0x53, 0x68, 0x6f, 0x70, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteString(z.ShopNumber)
	if err != nil {
		err = msgp.WrapError(err, "ShopNumber")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *BusinessCircleShopBase) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "MchID"
	o = append(o, 0x84, 0xa5, 0x4d, 0x63, 0x68, 0x49, 0x44)
	o = msgp.AppendString(o, z.MchID)
	// string "MerchantName"
	o = append(o, 0xac, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.MerchantName)
	// string "ShopName"
	o = append(o, 0xa8, 0x53, 0x68, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.ShopName)
	// string "ShopNumber"
	o = append(o, 0xaa, 0x53, 0x68, 0x6f, 0x70, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72)
	o = msgp.AppendString(o, z.ShopNumber)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *BusinessCircleShopBase) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "MchID":
			z.MchID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MchID")
				return
			}
		case "MerchantName":
			z.MerchantName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MerchantName")
				return
			}
		case "ShopName":
			z.ShopName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ShopName")
				return
			}
		case "ShopNumber":
			z.ShopNumber, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ShopNumber")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *BusinessCircleShopBase) Msgsize() (s int) {
	s = 1 + 6 + msgp.StringPrefixSize + len(z.MchID) + 13 + msgp.StringPrefixSize + len(z.MerchantName) + 9 + msgp.StringPrefixSize + len(z.ShopName) + 11 + msgp.StringPrefixSize + len(z.ShopNumber)
	return
}
