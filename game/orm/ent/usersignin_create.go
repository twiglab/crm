// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/twiglab/crm/game/orm/ent/usersignin"
)

// UserSignInCreate is the builder for creating a UserSignIn entity.
type UserSignInCreate struct {
	config
	mutation *UserSignInMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (usic *UserSignInCreate) SetUserID(i int) *UserSignInCreate {
	usic.mutation.SetUserID(i)
	return usic
}

// SetSignInTime sets the "sign_in_time" field.
func (usic *UserSignInCreate) SetSignInTime(t time.Time) *UserSignInCreate {
	usic.mutation.SetSignInTime(t)
	return usic
}

// SetNillableSignInTime sets the "sign_in_time" field if the given value is not nil.
func (usic *UserSignInCreate) SetNillableSignInTime(t *time.Time) *UserSignInCreate {
	if t != nil {
		usic.SetSignInTime(*t)
	}
	return usic
}

// SetPoints sets the "points" field.
func (usic *UserSignInCreate) SetPoints(i int) *UserSignInCreate {
	usic.mutation.SetPoints(i)
	return usic
}

// SetNillablePoints sets the "points" field if the given value is not nil.
func (usic *UserSignInCreate) SetNillablePoints(i *int) *UserSignInCreate {
	if i != nil {
		usic.SetPoints(*i)
	}
	return usic
}

// SetExtraPoints sets the "extra_points" field.
func (usic *UserSignInCreate) SetExtraPoints(i int) *UserSignInCreate {
	usic.mutation.SetExtraPoints(i)
	return usic
}

// SetNillableExtraPoints sets the "extra_points" field if the given value is not nil.
func (usic *UserSignInCreate) SetNillableExtraPoints(i *int) *UserSignInCreate {
	if i != nil {
		usic.SetExtraPoints(*i)
	}
	return usic
}

// SetRemark sets the "remark" field.
func (usic *UserSignInCreate) SetRemark(s string) *UserSignInCreate {
	usic.mutation.SetRemark(s)
	return usic
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (usic *UserSignInCreate) SetNillableRemark(s *string) *UserSignInCreate {
	if s != nil {
		usic.SetRemark(*s)
	}
	return usic
}

// Mutation returns the UserSignInMutation object of the builder.
func (usic *UserSignInCreate) Mutation() *UserSignInMutation {
	return usic.mutation
}

// Save creates the UserSignIn in the database.
func (usic *UserSignInCreate) Save(ctx context.Context) (*UserSignIn, error) {
	usic.defaults()
	return withHooks(ctx, usic.sqlSave, usic.mutation, usic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (usic *UserSignInCreate) SaveX(ctx context.Context) *UserSignIn {
	v, err := usic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (usic *UserSignInCreate) Exec(ctx context.Context) error {
	_, err := usic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usic *UserSignInCreate) ExecX(ctx context.Context) {
	if err := usic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (usic *UserSignInCreate) defaults() {
	if _, ok := usic.mutation.SignInTime(); !ok {
		v := usersignin.DefaultSignInTime()
		usic.mutation.SetSignInTime(v)
	}
	if _, ok := usic.mutation.Points(); !ok {
		v := usersignin.DefaultPoints
		usic.mutation.SetPoints(v)
	}
	if _, ok := usic.mutation.ExtraPoints(); !ok {
		v := usersignin.DefaultExtraPoints
		usic.mutation.SetExtraPoints(v)
	}
	if _, ok := usic.mutation.Remark(); !ok {
		v := usersignin.DefaultRemark
		usic.mutation.SetRemark(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (usic *UserSignInCreate) check() error {
	if _, ok := usic.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "UserSignIn.user_id"`)}
	}
	if _, ok := usic.mutation.SignInTime(); !ok {
		return &ValidationError{Name: "sign_in_time", err: errors.New(`ent: missing required field "UserSignIn.sign_in_time"`)}
	}
	if _, ok := usic.mutation.Points(); !ok {
		return &ValidationError{Name: "points", err: errors.New(`ent: missing required field "UserSignIn.points"`)}
	}
	if _, ok := usic.mutation.ExtraPoints(); !ok {
		return &ValidationError{Name: "extra_points", err: errors.New(`ent: missing required field "UserSignIn.extra_points"`)}
	}
	if _, ok := usic.mutation.Remark(); !ok {
		return &ValidationError{Name: "remark", err: errors.New(`ent: missing required field "UserSignIn.remark"`)}
	}
	return nil
}

func (usic *UserSignInCreate) sqlSave(ctx context.Context) (*UserSignIn, error) {
	if err := usic.check(); err != nil {
		return nil, err
	}
	_node, _spec := usic.createSpec()
	if err := sqlgraph.CreateNode(ctx, usic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	usic.mutation.id = &_node.ID
	usic.mutation.done = true
	return _node, nil
}

func (usic *UserSignInCreate) createSpec() (*UserSignIn, *sqlgraph.CreateSpec) {
	var (
		_node = &UserSignIn{config: usic.config}
		_spec = sqlgraph.NewCreateSpec(usersignin.Table, sqlgraph.NewFieldSpec(usersignin.FieldID, field.TypeInt))
	)
	if value, ok := usic.mutation.UserID(); ok {
		_spec.SetField(usersignin.FieldUserID, field.TypeInt, value)
		_node.UserID = value
	}
	if value, ok := usic.mutation.SignInTime(); ok {
		_spec.SetField(usersignin.FieldSignInTime, field.TypeTime, value)
		_node.SignInTime = value
	}
	if value, ok := usic.mutation.Points(); ok {
		_spec.SetField(usersignin.FieldPoints, field.TypeInt, value)
		_node.Points = value
	}
	if value, ok := usic.mutation.ExtraPoints(); ok {
		_spec.SetField(usersignin.FieldExtraPoints, field.TypeInt, value)
		_node.ExtraPoints = value
	}
	if value, ok := usic.mutation.Remark(); ok {
		_spec.SetField(usersignin.FieldRemark, field.TypeString, value)
		_node.Remark = value
	}
	return _node, _spec
}

// UserSignInCreateBulk is the builder for creating many UserSignIn entities in bulk.
type UserSignInCreateBulk struct {
	config
	err      error
	builders []*UserSignInCreate
}

// Save creates the UserSignIn entities in the database.
func (usicb *UserSignInCreateBulk) Save(ctx context.Context) ([]*UserSignIn, error) {
	if usicb.err != nil {
		return nil, usicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(usicb.builders))
	nodes := make([]*UserSignIn, len(usicb.builders))
	mutators := make([]Mutator, len(usicb.builders))
	for i := range usicb.builders {
		func(i int, root context.Context) {
			builder := usicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserSignInMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, usicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, usicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, usicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (usicb *UserSignInCreateBulk) SaveX(ctx context.Context) []*UserSignIn {
	v, err := usicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (usicb *UserSignInCreateBulk) Exec(ctx context.Context) error {
	_, err := usicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usicb *UserSignInCreateBulk) ExecX(ctx context.Context) {
	if err := usicb.Exec(ctx); err != nil {
		panic(err)
	}
}
