// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/twiglab/crm/game/orm/ent/predicate"
	"github.com/twiglab/crm/game/orm/ent/signintask"
)

// SignInTaskDelete is the builder for deleting a SignInTask entity.
type SignInTaskDelete struct {
	config
	hooks    []Hook
	mutation *SignInTaskMutation
}

// Where appends a list predicates to the SignInTaskDelete builder.
func (sitd *SignInTaskDelete) Where(ps ...predicate.SignInTask) *SignInTaskDelete {
	sitd.mutation.Where(ps...)
	return sitd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (sitd *SignInTaskDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, sitd.sqlExec, sitd.mutation, sitd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (sitd *SignInTaskDelete) ExecX(ctx context.Context) int {
	n, err := sitd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (sitd *SignInTaskDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(signintask.Table, sqlgraph.NewFieldSpec(signintask.FieldID, field.TypeInt))
	if ps := sitd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, sitd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	sitd.mutation.done = true
	return affected, err
}

// SignInTaskDeleteOne is the builder for deleting a single SignInTask entity.
type SignInTaskDeleteOne struct {
	sitd *SignInTaskDelete
}

// Where appends a list predicates to the SignInTaskDelete builder.
func (sitdo *SignInTaskDeleteOne) Where(ps ...predicate.SignInTask) *SignInTaskDeleteOne {
	sitdo.sitd.mutation.Where(ps...)
	return sitdo
}

// Exec executes the deletion query.
func (sitdo *SignInTaskDeleteOne) Exec(ctx context.Context) error {
	n, err := sitdo.sitd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{signintask.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (sitdo *SignInTaskDeleteOne) ExecX(ctx context.Context) {
	if err := sitdo.Exec(ctx); err != nil {
		panic(err)
	}
}
