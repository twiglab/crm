// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/twiglab/crm/game/orm/ent/signintask"
)

// SignInTask is the model entity for the SignInTask schema.
type SignInTask struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 任务ID
	TaskID int `json:"task_id,omitempty"`
	// 任务描述
	Description string `json:"description,omitempty"`
	// 开始时间
	StartTime time.Time `json:"start_time,omitempty"`
	// 结束时间
	EndTime time.Time `json:"end_time,omitempty"`
	// 奖励信息json
	RewardInfo   int `json:"reward_info,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SignInTask) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case signintask.FieldID, signintask.FieldTaskID, signintask.FieldRewardInfo:
			values[i] = new(sql.NullInt64)
		case signintask.FieldDescription:
			values[i] = new(sql.NullString)
		case signintask.FieldStartTime, signintask.FieldEndTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SignInTask fields.
func (sit *SignInTask) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case signintask.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sit.ID = int(value.Int64)
		case signintask.FieldTaskID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field task_id", values[i])
			} else if value.Valid {
				sit.TaskID = int(value.Int64)
			}
		case signintask.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				sit.Description = value.String
			}
		case signintask.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_time", values[i])
			} else if value.Valid {
				sit.StartTime = value.Time
			}
		case signintask.FieldEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_time", values[i])
			} else if value.Valid {
				sit.EndTime = value.Time
			}
		case signintask.FieldRewardInfo:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field reward_info", values[i])
			} else if value.Valid {
				sit.RewardInfo = int(value.Int64)
			}
		default:
			sit.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SignInTask.
// This includes values selected through modifiers, order, etc.
func (sit *SignInTask) Value(name string) (ent.Value, error) {
	return sit.selectValues.Get(name)
}

// Update returns a builder for updating this SignInTask.
// Note that you need to call SignInTask.Unwrap() before calling this method if this SignInTask
// was returned from a transaction, and the transaction was committed or rolled back.
func (sit *SignInTask) Update() *SignInTaskUpdateOne {
	return NewSignInTaskClient(sit.config).UpdateOne(sit)
}

// Unwrap unwraps the SignInTask entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sit *SignInTask) Unwrap() *SignInTask {
	_tx, ok := sit.config.driver.(*txDriver)
	if !ok {
		panic("ent: SignInTask is not a transactional entity")
	}
	sit.config.driver = _tx.drv
	return sit
}

// String implements the fmt.Stringer.
func (sit *SignInTask) String() string {
	var builder strings.Builder
	builder.WriteString("SignInTask(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sit.ID))
	builder.WriteString("task_id=")
	builder.WriteString(fmt.Sprintf("%v", sit.TaskID))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(sit.Description)
	builder.WriteString(", ")
	builder.WriteString("start_time=")
	builder.WriteString(sit.StartTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_time=")
	builder.WriteString(sit.EndTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("reward_info=")
	builder.WriteString(fmt.Sprintf("%v", sit.RewardInfo))
	builder.WriteByte(')')
	return builder.String()
}

// SignInTasks is a parsable slice of SignInTask.
type SignInTasks []*SignInTask
