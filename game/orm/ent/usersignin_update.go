// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/twiglab/crm/game/orm/ent/predicate"
	"github.com/twiglab/crm/game/orm/ent/usersignin"
)

// UserSignInUpdate is the builder for updating UserSignIn entities.
type UserSignInUpdate struct {
	config
	hooks    []Hook
	mutation *UserSignInMutation
}

// Where appends a list predicates to the UserSignInUpdate builder.
func (usiu *UserSignInUpdate) Where(ps ...predicate.UserSignIn) *UserSignInUpdate {
	usiu.mutation.Where(ps...)
	return usiu
}

// SetUserID sets the "user_id" field.
func (usiu *UserSignInUpdate) SetUserID(i int) *UserSignInUpdate {
	usiu.mutation.ResetUserID()
	usiu.mutation.SetUserID(i)
	return usiu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (usiu *UserSignInUpdate) SetNillableUserID(i *int) *UserSignInUpdate {
	if i != nil {
		usiu.SetUserID(*i)
	}
	return usiu
}

// AddUserID adds i to the "user_id" field.
func (usiu *UserSignInUpdate) AddUserID(i int) *UserSignInUpdate {
	usiu.mutation.AddUserID(i)
	return usiu
}

// SetSignInTime sets the "sign_in_time" field.
func (usiu *UserSignInUpdate) SetSignInTime(t time.Time) *UserSignInUpdate {
	usiu.mutation.SetSignInTime(t)
	return usiu
}

// SetNillableSignInTime sets the "sign_in_time" field if the given value is not nil.
func (usiu *UserSignInUpdate) SetNillableSignInTime(t *time.Time) *UserSignInUpdate {
	if t != nil {
		usiu.SetSignInTime(*t)
	}
	return usiu
}

// SetPoints sets the "points" field.
func (usiu *UserSignInUpdate) SetPoints(i int) *UserSignInUpdate {
	usiu.mutation.ResetPoints()
	usiu.mutation.SetPoints(i)
	return usiu
}

// SetNillablePoints sets the "points" field if the given value is not nil.
func (usiu *UserSignInUpdate) SetNillablePoints(i *int) *UserSignInUpdate {
	if i != nil {
		usiu.SetPoints(*i)
	}
	return usiu
}

// AddPoints adds i to the "points" field.
func (usiu *UserSignInUpdate) AddPoints(i int) *UserSignInUpdate {
	usiu.mutation.AddPoints(i)
	return usiu
}

// SetExtraPoints sets the "extra_points" field.
func (usiu *UserSignInUpdate) SetExtraPoints(i int) *UserSignInUpdate {
	usiu.mutation.ResetExtraPoints()
	usiu.mutation.SetExtraPoints(i)
	return usiu
}

// SetNillableExtraPoints sets the "extra_points" field if the given value is not nil.
func (usiu *UserSignInUpdate) SetNillableExtraPoints(i *int) *UserSignInUpdate {
	if i != nil {
		usiu.SetExtraPoints(*i)
	}
	return usiu
}

// AddExtraPoints adds i to the "extra_points" field.
func (usiu *UserSignInUpdate) AddExtraPoints(i int) *UserSignInUpdate {
	usiu.mutation.AddExtraPoints(i)
	return usiu
}

// SetRemark sets the "remark" field.
func (usiu *UserSignInUpdate) SetRemark(s string) *UserSignInUpdate {
	usiu.mutation.SetRemark(s)
	return usiu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (usiu *UserSignInUpdate) SetNillableRemark(s *string) *UserSignInUpdate {
	if s != nil {
		usiu.SetRemark(*s)
	}
	return usiu
}

// Mutation returns the UserSignInMutation object of the builder.
func (usiu *UserSignInUpdate) Mutation() *UserSignInMutation {
	return usiu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (usiu *UserSignInUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, usiu.sqlSave, usiu.mutation, usiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (usiu *UserSignInUpdate) SaveX(ctx context.Context) int {
	affected, err := usiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (usiu *UserSignInUpdate) Exec(ctx context.Context) error {
	_, err := usiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usiu *UserSignInUpdate) ExecX(ctx context.Context) {
	if err := usiu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (usiu *UserSignInUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(usersignin.Table, usersignin.Columns, sqlgraph.NewFieldSpec(usersignin.FieldID, field.TypeInt))
	if ps := usiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := usiu.mutation.UserID(); ok {
		_spec.SetField(usersignin.FieldUserID, field.TypeInt, value)
	}
	if value, ok := usiu.mutation.AddedUserID(); ok {
		_spec.AddField(usersignin.FieldUserID, field.TypeInt, value)
	}
	if value, ok := usiu.mutation.SignInTime(); ok {
		_spec.SetField(usersignin.FieldSignInTime, field.TypeTime, value)
	}
	if value, ok := usiu.mutation.Points(); ok {
		_spec.SetField(usersignin.FieldPoints, field.TypeInt, value)
	}
	if value, ok := usiu.mutation.AddedPoints(); ok {
		_spec.AddField(usersignin.FieldPoints, field.TypeInt, value)
	}
	if value, ok := usiu.mutation.ExtraPoints(); ok {
		_spec.SetField(usersignin.FieldExtraPoints, field.TypeInt, value)
	}
	if value, ok := usiu.mutation.AddedExtraPoints(); ok {
		_spec.AddField(usersignin.FieldExtraPoints, field.TypeInt, value)
	}
	if value, ok := usiu.mutation.Remark(); ok {
		_spec.SetField(usersignin.FieldRemark, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, usiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usersignin.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	usiu.mutation.done = true
	return n, nil
}

// UserSignInUpdateOne is the builder for updating a single UserSignIn entity.
type UserSignInUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserSignInMutation
}

// SetUserID sets the "user_id" field.
func (usiuo *UserSignInUpdateOne) SetUserID(i int) *UserSignInUpdateOne {
	usiuo.mutation.ResetUserID()
	usiuo.mutation.SetUserID(i)
	return usiuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (usiuo *UserSignInUpdateOne) SetNillableUserID(i *int) *UserSignInUpdateOne {
	if i != nil {
		usiuo.SetUserID(*i)
	}
	return usiuo
}

// AddUserID adds i to the "user_id" field.
func (usiuo *UserSignInUpdateOne) AddUserID(i int) *UserSignInUpdateOne {
	usiuo.mutation.AddUserID(i)
	return usiuo
}

// SetSignInTime sets the "sign_in_time" field.
func (usiuo *UserSignInUpdateOne) SetSignInTime(t time.Time) *UserSignInUpdateOne {
	usiuo.mutation.SetSignInTime(t)
	return usiuo
}

// SetNillableSignInTime sets the "sign_in_time" field if the given value is not nil.
func (usiuo *UserSignInUpdateOne) SetNillableSignInTime(t *time.Time) *UserSignInUpdateOne {
	if t != nil {
		usiuo.SetSignInTime(*t)
	}
	return usiuo
}

// SetPoints sets the "points" field.
func (usiuo *UserSignInUpdateOne) SetPoints(i int) *UserSignInUpdateOne {
	usiuo.mutation.ResetPoints()
	usiuo.mutation.SetPoints(i)
	return usiuo
}

// SetNillablePoints sets the "points" field if the given value is not nil.
func (usiuo *UserSignInUpdateOne) SetNillablePoints(i *int) *UserSignInUpdateOne {
	if i != nil {
		usiuo.SetPoints(*i)
	}
	return usiuo
}

// AddPoints adds i to the "points" field.
func (usiuo *UserSignInUpdateOne) AddPoints(i int) *UserSignInUpdateOne {
	usiuo.mutation.AddPoints(i)
	return usiuo
}

// SetExtraPoints sets the "extra_points" field.
func (usiuo *UserSignInUpdateOne) SetExtraPoints(i int) *UserSignInUpdateOne {
	usiuo.mutation.ResetExtraPoints()
	usiuo.mutation.SetExtraPoints(i)
	return usiuo
}

// SetNillableExtraPoints sets the "extra_points" field if the given value is not nil.
func (usiuo *UserSignInUpdateOne) SetNillableExtraPoints(i *int) *UserSignInUpdateOne {
	if i != nil {
		usiuo.SetExtraPoints(*i)
	}
	return usiuo
}

// AddExtraPoints adds i to the "extra_points" field.
func (usiuo *UserSignInUpdateOne) AddExtraPoints(i int) *UserSignInUpdateOne {
	usiuo.mutation.AddExtraPoints(i)
	return usiuo
}

// SetRemark sets the "remark" field.
func (usiuo *UserSignInUpdateOne) SetRemark(s string) *UserSignInUpdateOne {
	usiuo.mutation.SetRemark(s)
	return usiuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (usiuo *UserSignInUpdateOne) SetNillableRemark(s *string) *UserSignInUpdateOne {
	if s != nil {
		usiuo.SetRemark(*s)
	}
	return usiuo
}

// Mutation returns the UserSignInMutation object of the builder.
func (usiuo *UserSignInUpdateOne) Mutation() *UserSignInMutation {
	return usiuo.mutation
}

// Where appends a list predicates to the UserSignInUpdate builder.
func (usiuo *UserSignInUpdateOne) Where(ps ...predicate.UserSignIn) *UserSignInUpdateOne {
	usiuo.mutation.Where(ps...)
	return usiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (usiuo *UserSignInUpdateOne) Select(field string, fields ...string) *UserSignInUpdateOne {
	usiuo.fields = append([]string{field}, fields...)
	return usiuo
}

// Save executes the query and returns the updated UserSignIn entity.
func (usiuo *UserSignInUpdateOne) Save(ctx context.Context) (*UserSignIn, error) {
	return withHooks(ctx, usiuo.sqlSave, usiuo.mutation, usiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (usiuo *UserSignInUpdateOne) SaveX(ctx context.Context) *UserSignIn {
	node, err := usiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (usiuo *UserSignInUpdateOne) Exec(ctx context.Context) error {
	_, err := usiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usiuo *UserSignInUpdateOne) ExecX(ctx context.Context) {
	if err := usiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (usiuo *UserSignInUpdateOne) sqlSave(ctx context.Context) (_node *UserSignIn, err error) {
	_spec := sqlgraph.NewUpdateSpec(usersignin.Table, usersignin.Columns, sqlgraph.NewFieldSpec(usersignin.FieldID, field.TypeInt))
	id, ok := usiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserSignIn.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := usiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usersignin.FieldID)
		for _, f := range fields {
			if !usersignin.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != usersignin.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := usiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := usiuo.mutation.UserID(); ok {
		_spec.SetField(usersignin.FieldUserID, field.TypeInt, value)
	}
	if value, ok := usiuo.mutation.AddedUserID(); ok {
		_spec.AddField(usersignin.FieldUserID, field.TypeInt, value)
	}
	if value, ok := usiuo.mutation.SignInTime(); ok {
		_spec.SetField(usersignin.FieldSignInTime, field.TypeTime, value)
	}
	if value, ok := usiuo.mutation.Points(); ok {
		_spec.SetField(usersignin.FieldPoints, field.TypeInt, value)
	}
	if value, ok := usiuo.mutation.AddedPoints(); ok {
		_spec.AddField(usersignin.FieldPoints, field.TypeInt, value)
	}
	if value, ok := usiuo.mutation.ExtraPoints(); ok {
		_spec.SetField(usersignin.FieldExtraPoints, field.TypeInt, value)
	}
	if value, ok := usiuo.mutation.AddedExtraPoints(); ok {
		_spec.AddField(usersignin.FieldExtraPoints, field.TypeInt, value)
	}
	if value, ok := usiuo.mutation.Remark(); ok {
		_spec.SetField(usersignin.FieldRemark, field.TypeString, value)
	}
	_node = &UserSignIn{config: usiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, usiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usersignin.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	usiuo.mutation.done = true
	return _node, nil
}
