// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/twiglab/crm/game/orm/ent/signintask"
)

// SignInTaskCreate is the builder for creating a SignInTask entity.
type SignInTaskCreate struct {
	config
	mutation *SignInTaskMutation
	hooks    []Hook
}

// SetTaskID sets the "task_id" field.
func (sitc *SignInTaskCreate) SetTaskID(i int) *SignInTaskCreate {
	sitc.mutation.SetTaskID(i)
	return sitc
}

// SetDescription sets the "description" field.
func (sitc *SignInTaskCreate) SetDescription(s string) *SignInTaskCreate {
	sitc.mutation.SetDescription(s)
	return sitc
}

// SetStartTime sets the "start_time" field.
func (sitc *SignInTaskCreate) SetStartTime(t time.Time) *SignInTaskCreate {
	sitc.mutation.SetStartTime(t)
	return sitc
}

// SetEndTime sets the "end_time" field.
func (sitc *SignInTaskCreate) SetEndTime(t time.Time) *SignInTaskCreate {
	sitc.mutation.SetEndTime(t)
	return sitc
}

// SetRewardInfo sets the "reward_info" field.
func (sitc *SignInTaskCreate) SetRewardInfo(i int) *SignInTaskCreate {
	sitc.mutation.SetRewardInfo(i)
	return sitc
}

// Mutation returns the SignInTaskMutation object of the builder.
func (sitc *SignInTaskCreate) Mutation() *SignInTaskMutation {
	return sitc.mutation
}

// Save creates the SignInTask in the database.
func (sitc *SignInTaskCreate) Save(ctx context.Context) (*SignInTask, error) {
	return withHooks(ctx, sitc.sqlSave, sitc.mutation, sitc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sitc *SignInTaskCreate) SaveX(ctx context.Context) *SignInTask {
	v, err := sitc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sitc *SignInTaskCreate) Exec(ctx context.Context) error {
	_, err := sitc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sitc *SignInTaskCreate) ExecX(ctx context.Context) {
	if err := sitc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sitc *SignInTaskCreate) check() error {
	if _, ok := sitc.mutation.TaskID(); !ok {
		return &ValidationError{Name: "task_id", err: errors.New(`ent: missing required field "SignInTask.task_id"`)}
	}
	if _, ok := sitc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "SignInTask.description"`)}
	}
	if _, ok := sitc.mutation.StartTime(); !ok {
		return &ValidationError{Name: "start_time", err: errors.New(`ent: missing required field "SignInTask.start_time"`)}
	}
	if _, ok := sitc.mutation.EndTime(); !ok {
		return &ValidationError{Name: "end_time", err: errors.New(`ent: missing required field "SignInTask.end_time"`)}
	}
	if _, ok := sitc.mutation.RewardInfo(); !ok {
		return &ValidationError{Name: "reward_info", err: errors.New(`ent: missing required field "SignInTask.reward_info"`)}
	}
	return nil
}

func (sitc *SignInTaskCreate) sqlSave(ctx context.Context) (*SignInTask, error) {
	if err := sitc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sitc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sitc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sitc.mutation.id = &_node.ID
	sitc.mutation.done = true
	return _node, nil
}

func (sitc *SignInTaskCreate) createSpec() (*SignInTask, *sqlgraph.CreateSpec) {
	var (
		_node = &SignInTask{config: sitc.config}
		_spec = sqlgraph.NewCreateSpec(signintask.Table, sqlgraph.NewFieldSpec(signintask.FieldID, field.TypeInt))
	)
	if value, ok := sitc.mutation.TaskID(); ok {
		_spec.SetField(signintask.FieldTaskID, field.TypeInt, value)
		_node.TaskID = value
	}
	if value, ok := sitc.mutation.Description(); ok {
		_spec.SetField(signintask.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := sitc.mutation.StartTime(); ok {
		_spec.SetField(signintask.FieldStartTime, field.TypeTime, value)
		_node.StartTime = value
	}
	if value, ok := sitc.mutation.EndTime(); ok {
		_spec.SetField(signintask.FieldEndTime, field.TypeTime, value)
		_node.EndTime = value
	}
	if value, ok := sitc.mutation.RewardInfo(); ok {
		_spec.SetField(signintask.FieldRewardInfo, field.TypeInt, value)
		_node.RewardInfo = value
	}
	return _node, _spec
}

// SignInTaskCreateBulk is the builder for creating many SignInTask entities in bulk.
type SignInTaskCreateBulk struct {
	config
	err      error
	builders []*SignInTaskCreate
}

// Save creates the SignInTask entities in the database.
func (sitcb *SignInTaskCreateBulk) Save(ctx context.Context) ([]*SignInTask, error) {
	if sitcb.err != nil {
		return nil, sitcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sitcb.builders))
	nodes := make([]*SignInTask, len(sitcb.builders))
	mutators := make([]Mutator, len(sitcb.builders))
	for i := range sitcb.builders {
		func(i int, root context.Context) {
			builder := sitcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SignInTaskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sitcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sitcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sitcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sitcb *SignInTaskCreateBulk) SaveX(ctx context.Context) []*SignInTask {
	v, err := sitcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sitcb *SignInTaskCreateBulk) Exec(ctx context.Context) error {
	_, err := sitcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sitcb *SignInTaskCreateBulk) ExecX(ctx context.Context) {
	if err := sitcb.Exec(ctx); err != nil {
		panic(err)
	}
}
