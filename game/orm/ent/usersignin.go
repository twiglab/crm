// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/twiglab/crm/game/orm/ent/usersignin"
)

// UserSignIn is the model entity for the UserSignIn schema.
type UserSignIn struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 用户ID
	UserID int `json:"user_id,omitempty"`
	// 签到时间
	SignInTime time.Time `json:"sign_in_time,omitempty"`
	// 签到获得积分
	Points int `json:"points,omitempty"`
	// 额外获得积分
	ExtraPoints int `json:"extra_points,omitempty"`
	// 备注
	Remark       string `json:"remark,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserSignIn) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case usersignin.FieldID, usersignin.FieldUserID, usersignin.FieldPoints, usersignin.FieldExtraPoints:
			values[i] = new(sql.NullInt64)
		case usersignin.FieldRemark:
			values[i] = new(sql.NullString)
		case usersignin.FieldSignInTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserSignIn fields.
func (usi *UserSignIn) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case usersignin.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			usi.ID = int(value.Int64)
		case usersignin.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				usi.UserID = int(value.Int64)
			}
		case usersignin.FieldSignInTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field sign_in_time", values[i])
			} else if value.Valid {
				usi.SignInTime = value.Time
			}
		case usersignin.FieldPoints:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field points", values[i])
			} else if value.Valid {
				usi.Points = int(value.Int64)
			}
		case usersignin.FieldExtraPoints:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field extra_points", values[i])
			} else if value.Valid {
				usi.ExtraPoints = int(value.Int64)
			}
		case usersignin.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				usi.Remark = value.String
			}
		default:
			usi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserSignIn.
// This includes values selected through modifiers, order, etc.
func (usi *UserSignIn) Value(name string) (ent.Value, error) {
	return usi.selectValues.Get(name)
}

// Update returns a builder for updating this UserSignIn.
// Note that you need to call UserSignIn.Unwrap() before calling this method if this UserSignIn
// was returned from a transaction, and the transaction was committed or rolled back.
func (usi *UserSignIn) Update() *UserSignInUpdateOne {
	return NewUserSignInClient(usi.config).UpdateOne(usi)
}

// Unwrap unwraps the UserSignIn entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (usi *UserSignIn) Unwrap() *UserSignIn {
	_tx, ok := usi.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserSignIn is not a transactional entity")
	}
	usi.config.driver = _tx.drv
	return usi
}

// String implements the fmt.Stringer.
func (usi *UserSignIn) String() string {
	var builder strings.Builder
	builder.WriteString("UserSignIn(")
	builder.WriteString(fmt.Sprintf("id=%v, ", usi.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", usi.UserID))
	builder.WriteString(", ")
	builder.WriteString("sign_in_time=")
	builder.WriteString(usi.SignInTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("points=")
	builder.WriteString(fmt.Sprintf("%v", usi.Points))
	builder.WriteString(", ")
	builder.WriteString("extra_points=")
	builder.WriteString(fmt.Sprintf("%v", usi.ExtraPoints))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(usi.Remark)
	builder.WriteByte(')')
	return builder.String()
}

// UserSignIns is a parsable slice of UserSignIn.
type UserSignIns []*UserSignIn
