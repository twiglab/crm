// Code generated by ent, DO NOT EDIT.

package usersignin

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/twiglab/crm/game/orm/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.UserSignIn {
	return predicate.UserSignIn(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UserSignIn {
	return predicate.UserSignIn(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UserSignIn {
	return predicate.UserSignIn(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UserSignIn {
	return predicate.UserSignIn(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UserSignIn {
	return predicate.UserSignIn(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UserSignIn {
	return predicate.UserSignIn(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UserSignIn {
	return predicate.UserSignIn(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UserSignIn {
	return predicate.UserSignIn(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UserSignIn {
	return predicate.UserSignIn(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.UserSignIn {
	return predicate.UserSignIn(sql.FieldEQ(FieldUserID, v))
}

// SignInTime applies equality check predicate on the "sign_in_time" field. It's identical to SignInTimeEQ.
func SignInTime(v time.Time) predicate.UserSignIn {
	return predicate.UserSignIn(sql.FieldEQ(FieldSignInTime, v))
}

// Points applies equality check predicate on the "points" field. It's identical to PointsEQ.
func Points(v int) predicate.UserSignIn {
	return predicate.UserSignIn(sql.FieldEQ(FieldPoints, v))
}

// ExtraPoints applies equality check predicate on the "extra_points" field. It's identical to ExtraPointsEQ.
func ExtraPoints(v int) predicate.UserSignIn {
	return predicate.UserSignIn(sql.FieldEQ(FieldExtraPoints, v))
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.UserSignIn {
	return predicate.UserSignIn(sql.FieldEQ(FieldRemark, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.UserSignIn {
	return predicate.UserSignIn(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.UserSignIn {
	return predicate.UserSignIn(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.UserSignIn {
	return predicate.UserSignIn(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.UserSignIn {
	return predicate.UserSignIn(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v int) predicate.UserSignIn {
	return predicate.UserSignIn(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v int) predicate.UserSignIn {
	return predicate.UserSignIn(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v int) predicate.UserSignIn {
	return predicate.UserSignIn(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v int) predicate.UserSignIn {
	return predicate.UserSignIn(sql.FieldLTE(FieldUserID, v))
}

// SignInTimeEQ applies the EQ predicate on the "sign_in_time" field.
func SignInTimeEQ(v time.Time) predicate.UserSignIn {
	return predicate.UserSignIn(sql.FieldEQ(FieldSignInTime, v))
}

// SignInTimeNEQ applies the NEQ predicate on the "sign_in_time" field.
func SignInTimeNEQ(v time.Time) predicate.UserSignIn {
	return predicate.UserSignIn(sql.FieldNEQ(FieldSignInTime, v))
}

// SignInTimeIn applies the In predicate on the "sign_in_time" field.
func SignInTimeIn(vs ...time.Time) predicate.UserSignIn {
	return predicate.UserSignIn(sql.FieldIn(FieldSignInTime, vs...))
}

// SignInTimeNotIn applies the NotIn predicate on the "sign_in_time" field.
func SignInTimeNotIn(vs ...time.Time) predicate.UserSignIn {
	return predicate.UserSignIn(sql.FieldNotIn(FieldSignInTime, vs...))
}

// SignInTimeGT applies the GT predicate on the "sign_in_time" field.
func SignInTimeGT(v time.Time) predicate.UserSignIn {
	return predicate.UserSignIn(sql.FieldGT(FieldSignInTime, v))
}

// SignInTimeGTE applies the GTE predicate on the "sign_in_time" field.
func SignInTimeGTE(v time.Time) predicate.UserSignIn {
	return predicate.UserSignIn(sql.FieldGTE(FieldSignInTime, v))
}

// SignInTimeLT applies the LT predicate on the "sign_in_time" field.
func SignInTimeLT(v time.Time) predicate.UserSignIn {
	return predicate.UserSignIn(sql.FieldLT(FieldSignInTime, v))
}

// SignInTimeLTE applies the LTE predicate on the "sign_in_time" field.
func SignInTimeLTE(v time.Time) predicate.UserSignIn {
	return predicate.UserSignIn(sql.FieldLTE(FieldSignInTime, v))
}

// PointsEQ applies the EQ predicate on the "points" field.
func PointsEQ(v int) predicate.UserSignIn {
	return predicate.UserSignIn(sql.FieldEQ(FieldPoints, v))
}

// PointsNEQ applies the NEQ predicate on the "points" field.
func PointsNEQ(v int) predicate.UserSignIn {
	return predicate.UserSignIn(sql.FieldNEQ(FieldPoints, v))
}

// PointsIn applies the In predicate on the "points" field.
func PointsIn(vs ...int) predicate.UserSignIn {
	return predicate.UserSignIn(sql.FieldIn(FieldPoints, vs...))
}

// PointsNotIn applies the NotIn predicate on the "points" field.
func PointsNotIn(vs ...int) predicate.UserSignIn {
	return predicate.UserSignIn(sql.FieldNotIn(FieldPoints, vs...))
}

// PointsGT applies the GT predicate on the "points" field.
func PointsGT(v int) predicate.UserSignIn {
	return predicate.UserSignIn(sql.FieldGT(FieldPoints, v))
}

// PointsGTE applies the GTE predicate on the "points" field.
func PointsGTE(v int) predicate.UserSignIn {
	return predicate.UserSignIn(sql.FieldGTE(FieldPoints, v))
}

// PointsLT applies the LT predicate on the "points" field.
func PointsLT(v int) predicate.UserSignIn {
	return predicate.UserSignIn(sql.FieldLT(FieldPoints, v))
}

// PointsLTE applies the LTE predicate on the "points" field.
func PointsLTE(v int) predicate.UserSignIn {
	return predicate.UserSignIn(sql.FieldLTE(FieldPoints, v))
}

// ExtraPointsEQ applies the EQ predicate on the "extra_points" field.
func ExtraPointsEQ(v int) predicate.UserSignIn {
	return predicate.UserSignIn(sql.FieldEQ(FieldExtraPoints, v))
}

// ExtraPointsNEQ applies the NEQ predicate on the "extra_points" field.
func ExtraPointsNEQ(v int) predicate.UserSignIn {
	return predicate.UserSignIn(sql.FieldNEQ(FieldExtraPoints, v))
}

// ExtraPointsIn applies the In predicate on the "extra_points" field.
func ExtraPointsIn(vs ...int) predicate.UserSignIn {
	return predicate.UserSignIn(sql.FieldIn(FieldExtraPoints, vs...))
}

// ExtraPointsNotIn applies the NotIn predicate on the "extra_points" field.
func ExtraPointsNotIn(vs ...int) predicate.UserSignIn {
	return predicate.UserSignIn(sql.FieldNotIn(FieldExtraPoints, vs...))
}

// ExtraPointsGT applies the GT predicate on the "extra_points" field.
func ExtraPointsGT(v int) predicate.UserSignIn {
	return predicate.UserSignIn(sql.FieldGT(FieldExtraPoints, v))
}

// ExtraPointsGTE applies the GTE predicate on the "extra_points" field.
func ExtraPointsGTE(v int) predicate.UserSignIn {
	return predicate.UserSignIn(sql.FieldGTE(FieldExtraPoints, v))
}

// ExtraPointsLT applies the LT predicate on the "extra_points" field.
func ExtraPointsLT(v int) predicate.UserSignIn {
	return predicate.UserSignIn(sql.FieldLT(FieldExtraPoints, v))
}

// ExtraPointsLTE applies the LTE predicate on the "extra_points" field.
func ExtraPointsLTE(v int) predicate.UserSignIn {
	return predicate.UserSignIn(sql.FieldLTE(FieldExtraPoints, v))
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.UserSignIn {
	return predicate.UserSignIn(sql.FieldEQ(FieldRemark, v))
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.UserSignIn {
	return predicate.UserSignIn(sql.FieldNEQ(FieldRemark, v))
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.UserSignIn {
	return predicate.UserSignIn(sql.FieldIn(FieldRemark, vs...))
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.UserSignIn {
	return predicate.UserSignIn(sql.FieldNotIn(FieldRemark, vs...))
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.UserSignIn {
	return predicate.UserSignIn(sql.FieldGT(FieldRemark, v))
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.UserSignIn {
	return predicate.UserSignIn(sql.FieldGTE(FieldRemark, v))
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.UserSignIn {
	return predicate.UserSignIn(sql.FieldLT(FieldRemark, v))
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.UserSignIn {
	return predicate.UserSignIn(sql.FieldLTE(FieldRemark, v))
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.UserSignIn {
	return predicate.UserSignIn(sql.FieldContains(FieldRemark, v))
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.UserSignIn {
	return predicate.UserSignIn(sql.FieldHasPrefix(FieldRemark, v))
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.UserSignIn {
	return predicate.UserSignIn(sql.FieldHasSuffix(FieldRemark, v))
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.UserSignIn {
	return predicate.UserSignIn(sql.FieldEqualFold(FieldRemark, v))
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.UserSignIn {
	return predicate.UserSignIn(sql.FieldContainsFold(FieldRemark, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserSignIn) predicate.UserSignIn {
	return predicate.UserSignIn(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserSignIn) predicate.UserSignIn {
	return predicate.UserSignIn(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserSignIn) predicate.UserSignIn {
	return predicate.UserSignIn(sql.NotPredicates(p))
}
