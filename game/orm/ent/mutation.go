// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/twiglab/crm/game/orm/ent/predicate"
	"github.com/twiglab/crm/game/orm/ent/signintask"
	"github.com/twiglab/crm/game/orm/ent/usersignin"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeSignInTask = "SignInTask"
	TypeUserSignIn = "UserSignIn"
)

// SignInTaskMutation represents an operation that mutates the SignInTask nodes in the graph.
type SignInTaskMutation struct {
	config
	op             Op
	typ            string
	id             *int
	task_id        *int
	addtask_id     *int
	description    *string
	start_time     *time.Time
	end_time       *time.Time
	reward_info    *int
	addreward_info *int
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*SignInTask, error)
	predicates     []predicate.SignInTask
}

var _ ent.Mutation = (*SignInTaskMutation)(nil)

// signintaskOption allows management of the mutation configuration using functional options.
type signintaskOption func(*SignInTaskMutation)

// newSignInTaskMutation creates new mutation for the SignInTask entity.
func newSignInTaskMutation(c config, op Op, opts ...signintaskOption) *SignInTaskMutation {
	m := &SignInTaskMutation{
		config:        c,
		op:            op,
		typ:           TypeSignInTask,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSignInTaskID sets the ID field of the mutation.
func withSignInTaskID(id int) signintaskOption {
	return func(m *SignInTaskMutation) {
		var (
			err   error
			once  sync.Once
			value *SignInTask
		)
		m.oldValue = func(ctx context.Context) (*SignInTask, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SignInTask.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSignInTask sets the old SignInTask of the mutation.
func withSignInTask(node *SignInTask) signintaskOption {
	return func(m *SignInTaskMutation) {
		m.oldValue = func(context.Context) (*SignInTask, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SignInTaskMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SignInTaskMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SignInTaskMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SignInTaskMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SignInTask.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTaskID sets the "task_id" field.
func (m *SignInTaskMutation) SetTaskID(i int) {
	m.task_id = &i
	m.addtask_id = nil
}

// TaskID returns the value of the "task_id" field in the mutation.
func (m *SignInTaskMutation) TaskID() (r int, exists bool) {
	v := m.task_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTaskID returns the old "task_id" field's value of the SignInTask entity.
// If the SignInTask object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SignInTaskMutation) OldTaskID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTaskID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTaskID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaskID: %w", err)
	}
	return oldValue.TaskID, nil
}

// AddTaskID adds i to the "task_id" field.
func (m *SignInTaskMutation) AddTaskID(i int) {
	if m.addtask_id != nil {
		*m.addtask_id += i
	} else {
		m.addtask_id = &i
	}
}

// AddedTaskID returns the value that was added to the "task_id" field in this mutation.
func (m *SignInTaskMutation) AddedTaskID() (r int, exists bool) {
	v := m.addtask_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetTaskID resets all changes to the "task_id" field.
func (m *SignInTaskMutation) ResetTaskID() {
	m.task_id = nil
	m.addtask_id = nil
}

// SetDescription sets the "description" field.
func (m *SignInTaskMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *SignInTaskMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the SignInTask entity.
// If the SignInTask object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SignInTaskMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *SignInTaskMutation) ResetDescription() {
	m.description = nil
}

// SetStartTime sets the "start_time" field.
func (m *SignInTaskMutation) SetStartTime(t time.Time) {
	m.start_time = &t
}

// StartTime returns the value of the "start_time" field in the mutation.
func (m *SignInTaskMutation) StartTime() (r time.Time, exists bool) {
	v := m.start_time
	if v == nil {
		return
	}
	return *v, true
}

// OldStartTime returns the old "start_time" field's value of the SignInTask entity.
// If the SignInTask object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SignInTaskMutation) OldStartTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartTime: %w", err)
	}
	return oldValue.StartTime, nil
}

// ResetStartTime resets all changes to the "start_time" field.
func (m *SignInTaskMutation) ResetStartTime() {
	m.start_time = nil
}

// SetEndTime sets the "end_time" field.
func (m *SignInTaskMutation) SetEndTime(t time.Time) {
	m.end_time = &t
}

// EndTime returns the value of the "end_time" field in the mutation.
func (m *SignInTaskMutation) EndTime() (r time.Time, exists bool) {
	v := m.end_time
	if v == nil {
		return
	}
	return *v, true
}

// OldEndTime returns the old "end_time" field's value of the SignInTask entity.
// If the SignInTask object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SignInTaskMutation) OldEndTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndTime: %w", err)
	}
	return oldValue.EndTime, nil
}

// ResetEndTime resets all changes to the "end_time" field.
func (m *SignInTaskMutation) ResetEndTime() {
	m.end_time = nil
}

// SetRewardInfo sets the "reward_info" field.
func (m *SignInTaskMutation) SetRewardInfo(i int) {
	m.reward_info = &i
	m.addreward_info = nil
}

// RewardInfo returns the value of the "reward_info" field in the mutation.
func (m *SignInTaskMutation) RewardInfo() (r int, exists bool) {
	v := m.reward_info
	if v == nil {
		return
	}
	return *v, true
}

// OldRewardInfo returns the old "reward_info" field's value of the SignInTask entity.
// If the SignInTask object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SignInTaskMutation) OldRewardInfo(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRewardInfo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRewardInfo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRewardInfo: %w", err)
	}
	return oldValue.RewardInfo, nil
}

// AddRewardInfo adds i to the "reward_info" field.
func (m *SignInTaskMutation) AddRewardInfo(i int) {
	if m.addreward_info != nil {
		*m.addreward_info += i
	} else {
		m.addreward_info = &i
	}
}

// AddedRewardInfo returns the value that was added to the "reward_info" field in this mutation.
func (m *SignInTaskMutation) AddedRewardInfo() (r int, exists bool) {
	v := m.addreward_info
	if v == nil {
		return
	}
	return *v, true
}

// ResetRewardInfo resets all changes to the "reward_info" field.
func (m *SignInTaskMutation) ResetRewardInfo() {
	m.reward_info = nil
	m.addreward_info = nil
}

// Where appends a list predicates to the SignInTaskMutation builder.
func (m *SignInTaskMutation) Where(ps ...predicate.SignInTask) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SignInTaskMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SignInTaskMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SignInTask, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SignInTaskMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SignInTaskMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SignInTask).
func (m *SignInTaskMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SignInTaskMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.task_id != nil {
		fields = append(fields, signintask.FieldTaskID)
	}
	if m.description != nil {
		fields = append(fields, signintask.FieldDescription)
	}
	if m.start_time != nil {
		fields = append(fields, signintask.FieldStartTime)
	}
	if m.end_time != nil {
		fields = append(fields, signintask.FieldEndTime)
	}
	if m.reward_info != nil {
		fields = append(fields, signintask.FieldRewardInfo)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SignInTaskMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case signintask.FieldTaskID:
		return m.TaskID()
	case signintask.FieldDescription:
		return m.Description()
	case signintask.FieldStartTime:
		return m.StartTime()
	case signintask.FieldEndTime:
		return m.EndTime()
	case signintask.FieldRewardInfo:
		return m.RewardInfo()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SignInTaskMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case signintask.FieldTaskID:
		return m.OldTaskID(ctx)
	case signintask.FieldDescription:
		return m.OldDescription(ctx)
	case signintask.FieldStartTime:
		return m.OldStartTime(ctx)
	case signintask.FieldEndTime:
		return m.OldEndTime(ctx)
	case signintask.FieldRewardInfo:
		return m.OldRewardInfo(ctx)
	}
	return nil, fmt.Errorf("unknown SignInTask field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SignInTaskMutation) SetField(name string, value ent.Value) error {
	switch name {
	case signintask.FieldTaskID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaskID(v)
		return nil
	case signintask.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case signintask.FieldStartTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartTime(v)
		return nil
	case signintask.FieldEndTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndTime(v)
		return nil
	case signintask.FieldRewardInfo:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRewardInfo(v)
		return nil
	}
	return fmt.Errorf("unknown SignInTask field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SignInTaskMutation) AddedFields() []string {
	var fields []string
	if m.addtask_id != nil {
		fields = append(fields, signintask.FieldTaskID)
	}
	if m.addreward_info != nil {
		fields = append(fields, signintask.FieldRewardInfo)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SignInTaskMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case signintask.FieldTaskID:
		return m.AddedTaskID()
	case signintask.FieldRewardInfo:
		return m.AddedRewardInfo()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SignInTaskMutation) AddField(name string, value ent.Value) error {
	switch name {
	case signintask.FieldTaskID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTaskID(v)
		return nil
	case signintask.FieldRewardInfo:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRewardInfo(v)
		return nil
	}
	return fmt.Errorf("unknown SignInTask numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SignInTaskMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SignInTaskMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SignInTaskMutation) ClearField(name string) error {
	return fmt.Errorf("unknown SignInTask nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SignInTaskMutation) ResetField(name string) error {
	switch name {
	case signintask.FieldTaskID:
		m.ResetTaskID()
		return nil
	case signintask.FieldDescription:
		m.ResetDescription()
		return nil
	case signintask.FieldStartTime:
		m.ResetStartTime()
		return nil
	case signintask.FieldEndTime:
		m.ResetEndTime()
		return nil
	case signintask.FieldRewardInfo:
		m.ResetRewardInfo()
		return nil
	}
	return fmt.Errorf("unknown SignInTask field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SignInTaskMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SignInTaskMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SignInTaskMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SignInTaskMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SignInTaskMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SignInTaskMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SignInTaskMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown SignInTask unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SignInTaskMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown SignInTask edge %s", name)
}

// UserSignInMutation represents an operation that mutates the UserSignIn nodes in the graph.
type UserSignInMutation struct {
	config
	op              Op
	typ             string
	id              *int
	user_id         *int
	adduser_id      *int
	sign_in_time    *time.Time
	points          *int
	addpoints       *int
	extra_points    *int
	addextra_points *int
	remark          *string
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*UserSignIn, error)
	predicates      []predicate.UserSignIn
}

var _ ent.Mutation = (*UserSignInMutation)(nil)

// usersigninOption allows management of the mutation configuration using functional options.
type usersigninOption func(*UserSignInMutation)

// newUserSignInMutation creates new mutation for the UserSignIn entity.
func newUserSignInMutation(c config, op Op, opts ...usersigninOption) *UserSignInMutation {
	m := &UserSignInMutation{
		config:        c,
		op:            op,
		typ:           TypeUserSignIn,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserSignInID sets the ID field of the mutation.
func withUserSignInID(id int) usersigninOption {
	return func(m *UserSignInMutation) {
		var (
			err   error
			once  sync.Once
			value *UserSignIn
		)
		m.oldValue = func(ctx context.Context) (*UserSignIn, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserSignIn.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserSignIn sets the old UserSignIn of the mutation.
func withUserSignIn(node *UserSignIn) usersigninOption {
	return func(m *UserSignInMutation) {
		m.oldValue = func(context.Context) (*UserSignIn, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserSignInMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserSignInMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserSignInMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserSignInMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().UserSignIn.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *UserSignInMutation) SetUserID(i int) {
	m.user_id = &i
	m.adduser_id = nil
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *UserSignInMutation) UserID() (r int, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the UserSignIn entity.
// If the UserSignIn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserSignInMutation) OldUserID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// AddUserID adds i to the "user_id" field.
func (m *UserSignInMutation) AddUserID(i int) {
	if m.adduser_id != nil {
		*m.adduser_id += i
	} else {
		m.adduser_id = &i
	}
}

// AddedUserID returns the value that was added to the "user_id" field in this mutation.
func (m *UserSignInMutation) AddedUserID() (r int, exists bool) {
	v := m.adduser_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserID resets all changes to the "user_id" field.
func (m *UserSignInMutation) ResetUserID() {
	m.user_id = nil
	m.adduser_id = nil
}

// SetSignInTime sets the "sign_in_time" field.
func (m *UserSignInMutation) SetSignInTime(t time.Time) {
	m.sign_in_time = &t
}

// SignInTime returns the value of the "sign_in_time" field in the mutation.
func (m *UserSignInMutation) SignInTime() (r time.Time, exists bool) {
	v := m.sign_in_time
	if v == nil {
		return
	}
	return *v, true
}

// OldSignInTime returns the old "sign_in_time" field's value of the UserSignIn entity.
// If the UserSignIn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserSignInMutation) OldSignInTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSignInTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSignInTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSignInTime: %w", err)
	}
	return oldValue.SignInTime, nil
}

// ResetSignInTime resets all changes to the "sign_in_time" field.
func (m *UserSignInMutation) ResetSignInTime() {
	m.sign_in_time = nil
}

// SetPoints sets the "points" field.
func (m *UserSignInMutation) SetPoints(i int) {
	m.points = &i
	m.addpoints = nil
}

// Points returns the value of the "points" field in the mutation.
func (m *UserSignInMutation) Points() (r int, exists bool) {
	v := m.points
	if v == nil {
		return
	}
	return *v, true
}

// OldPoints returns the old "points" field's value of the UserSignIn entity.
// If the UserSignIn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserSignInMutation) OldPoints(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPoints is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPoints requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPoints: %w", err)
	}
	return oldValue.Points, nil
}

// AddPoints adds i to the "points" field.
func (m *UserSignInMutation) AddPoints(i int) {
	if m.addpoints != nil {
		*m.addpoints += i
	} else {
		m.addpoints = &i
	}
}

// AddedPoints returns the value that was added to the "points" field in this mutation.
func (m *UserSignInMutation) AddedPoints() (r int, exists bool) {
	v := m.addpoints
	if v == nil {
		return
	}
	return *v, true
}

// ResetPoints resets all changes to the "points" field.
func (m *UserSignInMutation) ResetPoints() {
	m.points = nil
	m.addpoints = nil
}

// SetExtraPoints sets the "extra_points" field.
func (m *UserSignInMutation) SetExtraPoints(i int) {
	m.extra_points = &i
	m.addextra_points = nil
}

// ExtraPoints returns the value of the "extra_points" field in the mutation.
func (m *UserSignInMutation) ExtraPoints() (r int, exists bool) {
	v := m.extra_points
	if v == nil {
		return
	}
	return *v, true
}

// OldExtraPoints returns the old "extra_points" field's value of the UserSignIn entity.
// If the UserSignIn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserSignInMutation) OldExtraPoints(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExtraPoints is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExtraPoints requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExtraPoints: %w", err)
	}
	return oldValue.ExtraPoints, nil
}

// AddExtraPoints adds i to the "extra_points" field.
func (m *UserSignInMutation) AddExtraPoints(i int) {
	if m.addextra_points != nil {
		*m.addextra_points += i
	} else {
		m.addextra_points = &i
	}
}

// AddedExtraPoints returns the value that was added to the "extra_points" field in this mutation.
func (m *UserSignInMutation) AddedExtraPoints() (r int, exists bool) {
	v := m.addextra_points
	if v == nil {
		return
	}
	return *v, true
}

// ResetExtraPoints resets all changes to the "extra_points" field.
func (m *UserSignInMutation) ResetExtraPoints() {
	m.extra_points = nil
	m.addextra_points = nil
}

// SetRemark sets the "remark" field.
func (m *UserSignInMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *UserSignInMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the UserSignIn entity.
// If the UserSignIn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserSignInMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ResetRemark resets all changes to the "remark" field.
func (m *UserSignInMutation) ResetRemark() {
	m.remark = nil
}

// Where appends a list predicates to the UserSignInMutation builder.
func (m *UserSignInMutation) Where(ps ...predicate.UserSignIn) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserSignInMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserSignInMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.UserSignIn, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserSignInMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserSignInMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (UserSignIn).
func (m *UserSignInMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserSignInMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.user_id != nil {
		fields = append(fields, usersignin.FieldUserID)
	}
	if m.sign_in_time != nil {
		fields = append(fields, usersignin.FieldSignInTime)
	}
	if m.points != nil {
		fields = append(fields, usersignin.FieldPoints)
	}
	if m.extra_points != nil {
		fields = append(fields, usersignin.FieldExtraPoints)
	}
	if m.remark != nil {
		fields = append(fields, usersignin.FieldRemark)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserSignInMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case usersignin.FieldUserID:
		return m.UserID()
	case usersignin.FieldSignInTime:
		return m.SignInTime()
	case usersignin.FieldPoints:
		return m.Points()
	case usersignin.FieldExtraPoints:
		return m.ExtraPoints()
	case usersignin.FieldRemark:
		return m.Remark()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserSignInMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case usersignin.FieldUserID:
		return m.OldUserID(ctx)
	case usersignin.FieldSignInTime:
		return m.OldSignInTime(ctx)
	case usersignin.FieldPoints:
		return m.OldPoints(ctx)
	case usersignin.FieldExtraPoints:
		return m.OldExtraPoints(ctx)
	case usersignin.FieldRemark:
		return m.OldRemark(ctx)
	}
	return nil, fmt.Errorf("unknown UserSignIn field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserSignInMutation) SetField(name string, value ent.Value) error {
	switch name {
	case usersignin.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case usersignin.FieldSignInTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSignInTime(v)
		return nil
	case usersignin.FieldPoints:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPoints(v)
		return nil
	case usersignin.FieldExtraPoints:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExtraPoints(v)
		return nil
	case usersignin.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	}
	return fmt.Errorf("unknown UserSignIn field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserSignInMutation) AddedFields() []string {
	var fields []string
	if m.adduser_id != nil {
		fields = append(fields, usersignin.FieldUserID)
	}
	if m.addpoints != nil {
		fields = append(fields, usersignin.FieldPoints)
	}
	if m.addextra_points != nil {
		fields = append(fields, usersignin.FieldExtraPoints)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserSignInMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case usersignin.FieldUserID:
		return m.AddedUserID()
	case usersignin.FieldPoints:
		return m.AddedPoints()
	case usersignin.FieldExtraPoints:
		return m.AddedExtraPoints()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserSignInMutation) AddField(name string, value ent.Value) error {
	switch name {
	case usersignin.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserID(v)
		return nil
	case usersignin.FieldPoints:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPoints(v)
		return nil
	case usersignin.FieldExtraPoints:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddExtraPoints(v)
		return nil
	}
	return fmt.Errorf("unknown UserSignIn numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserSignInMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserSignInMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserSignInMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UserSignIn nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserSignInMutation) ResetField(name string) error {
	switch name {
	case usersignin.FieldUserID:
		m.ResetUserID()
		return nil
	case usersignin.FieldSignInTime:
		m.ResetSignInTime()
		return nil
	case usersignin.FieldPoints:
		m.ResetPoints()
		return nil
	case usersignin.FieldExtraPoints:
		m.ResetExtraPoints()
		return nil
	case usersignin.FieldRemark:
		m.ResetRemark()
		return nil
	}
	return fmt.Errorf("unknown UserSignIn field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserSignInMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserSignInMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserSignInMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserSignInMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserSignInMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserSignInMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserSignInMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown UserSignIn unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserSignInMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown UserSignIn edge %s", name)
}
