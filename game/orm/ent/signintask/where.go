// Code generated by ent, DO NOT EDIT.

package signintask

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/twiglab/crm/game/orm/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.SignInTask {
	return predicate.SignInTask(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.SignInTask {
	return predicate.SignInTask(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.SignInTask {
	return predicate.SignInTask(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.SignInTask {
	return predicate.SignInTask(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.SignInTask {
	return predicate.SignInTask(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.SignInTask {
	return predicate.SignInTask(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.SignInTask {
	return predicate.SignInTask(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.SignInTask {
	return predicate.SignInTask(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.SignInTask {
	return predicate.SignInTask(sql.FieldLTE(FieldID, id))
}

// TaskID applies equality check predicate on the "task_id" field. It's identical to TaskIDEQ.
func TaskID(v int) predicate.SignInTask {
	return predicate.SignInTask(sql.FieldEQ(FieldTaskID, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.SignInTask {
	return predicate.SignInTask(sql.FieldEQ(FieldDescription, v))
}

// StartTime applies equality check predicate on the "start_time" field. It's identical to StartTimeEQ.
func StartTime(v time.Time) predicate.SignInTask {
	return predicate.SignInTask(sql.FieldEQ(FieldStartTime, v))
}

// EndTime applies equality check predicate on the "end_time" field. It's identical to EndTimeEQ.
func EndTime(v time.Time) predicate.SignInTask {
	return predicate.SignInTask(sql.FieldEQ(FieldEndTime, v))
}

// RewardInfo applies equality check predicate on the "reward_info" field. It's identical to RewardInfoEQ.
func RewardInfo(v int) predicate.SignInTask {
	return predicate.SignInTask(sql.FieldEQ(FieldRewardInfo, v))
}

// TaskIDEQ applies the EQ predicate on the "task_id" field.
func TaskIDEQ(v int) predicate.SignInTask {
	return predicate.SignInTask(sql.FieldEQ(FieldTaskID, v))
}

// TaskIDNEQ applies the NEQ predicate on the "task_id" field.
func TaskIDNEQ(v int) predicate.SignInTask {
	return predicate.SignInTask(sql.FieldNEQ(FieldTaskID, v))
}

// TaskIDIn applies the In predicate on the "task_id" field.
func TaskIDIn(vs ...int) predicate.SignInTask {
	return predicate.SignInTask(sql.FieldIn(FieldTaskID, vs...))
}

// TaskIDNotIn applies the NotIn predicate on the "task_id" field.
func TaskIDNotIn(vs ...int) predicate.SignInTask {
	return predicate.SignInTask(sql.FieldNotIn(FieldTaskID, vs...))
}

// TaskIDGT applies the GT predicate on the "task_id" field.
func TaskIDGT(v int) predicate.SignInTask {
	return predicate.SignInTask(sql.FieldGT(FieldTaskID, v))
}

// TaskIDGTE applies the GTE predicate on the "task_id" field.
func TaskIDGTE(v int) predicate.SignInTask {
	return predicate.SignInTask(sql.FieldGTE(FieldTaskID, v))
}

// TaskIDLT applies the LT predicate on the "task_id" field.
func TaskIDLT(v int) predicate.SignInTask {
	return predicate.SignInTask(sql.FieldLT(FieldTaskID, v))
}

// TaskIDLTE applies the LTE predicate on the "task_id" field.
func TaskIDLTE(v int) predicate.SignInTask {
	return predicate.SignInTask(sql.FieldLTE(FieldTaskID, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.SignInTask {
	return predicate.SignInTask(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.SignInTask {
	return predicate.SignInTask(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.SignInTask {
	return predicate.SignInTask(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.SignInTask {
	return predicate.SignInTask(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.SignInTask {
	return predicate.SignInTask(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.SignInTask {
	return predicate.SignInTask(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.SignInTask {
	return predicate.SignInTask(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.SignInTask {
	return predicate.SignInTask(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.SignInTask {
	return predicate.SignInTask(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.SignInTask {
	return predicate.SignInTask(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.SignInTask {
	return predicate.SignInTask(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.SignInTask {
	return predicate.SignInTask(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.SignInTask {
	return predicate.SignInTask(sql.FieldContainsFold(FieldDescription, v))
}

// StartTimeEQ applies the EQ predicate on the "start_time" field.
func StartTimeEQ(v time.Time) predicate.SignInTask {
	return predicate.SignInTask(sql.FieldEQ(FieldStartTime, v))
}

// StartTimeNEQ applies the NEQ predicate on the "start_time" field.
func StartTimeNEQ(v time.Time) predicate.SignInTask {
	return predicate.SignInTask(sql.FieldNEQ(FieldStartTime, v))
}

// StartTimeIn applies the In predicate on the "start_time" field.
func StartTimeIn(vs ...time.Time) predicate.SignInTask {
	return predicate.SignInTask(sql.FieldIn(FieldStartTime, vs...))
}

// StartTimeNotIn applies the NotIn predicate on the "start_time" field.
func StartTimeNotIn(vs ...time.Time) predicate.SignInTask {
	return predicate.SignInTask(sql.FieldNotIn(FieldStartTime, vs...))
}

// StartTimeGT applies the GT predicate on the "start_time" field.
func StartTimeGT(v time.Time) predicate.SignInTask {
	return predicate.SignInTask(sql.FieldGT(FieldStartTime, v))
}

// StartTimeGTE applies the GTE predicate on the "start_time" field.
func StartTimeGTE(v time.Time) predicate.SignInTask {
	return predicate.SignInTask(sql.FieldGTE(FieldStartTime, v))
}

// StartTimeLT applies the LT predicate on the "start_time" field.
func StartTimeLT(v time.Time) predicate.SignInTask {
	return predicate.SignInTask(sql.FieldLT(FieldStartTime, v))
}

// StartTimeLTE applies the LTE predicate on the "start_time" field.
func StartTimeLTE(v time.Time) predicate.SignInTask {
	return predicate.SignInTask(sql.FieldLTE(FieldStartTime, v))
}

// EndTimeEQ applies the EQ predicate on the "end_time" field.
func EndTimeEQ(v time.Time) predicate.SignInTask {
	return predicate.SignInTask(sql.FieldEQ(FieldEndTime, v))
}

// EndTimeNEQ applies the NEQ predicate on the "end_time" field.
func EndTimeNEQ(v time.Time) predicate.SignInTask {
	return predicate.SignInTask(sql.FieldNEQ(FieldEndTime, v))
}

// EndTimeIn applies the In predicate on the "end_time" field.
func EndTimeIn(vs ...time.Time) predicate.SignInTask {
	return predicate.SignInTask(sql.FieldIn(FieldEndTime, vs...))
}

// EndTimeNotIn applies the NotIn predicate on the "end_time" field.
func EndTimeNotIn(vs ...time.Time) predicate.SignInTask {
	return predicate.SignInTask(sql.FieldNotIn(FieldEndTime, vs...))
}

// EndTimeGT applies the GT predicate on the "end_time" field.
func EndTimeGT(v time.Time) predicate.SignInTask {
	return predicate.SignInTask(sql.FieldGT(FieldEndTime, v))
}

// EndTimeGTE applies the GTE predicate on the "end_time" field.
func EndTimeGTE(v time.Time) predicate.SignInTask {
	return predicate.SignInTask(sql.FieldGTE(FieldEndTime, v))
}

// EndTimeLT applies the LT predicate on the "end_time" field.
func EndTimeLT(v time.Time) predicate.SignInTask {
	return predicate.SignInTask(sql.FieldLT(FieldEndTime, v))
}

// EndTimeLTE applies the LTE predicate on the "end_time" field.
func EndTimeLTE(v time.Time) predicate.SignInTask {
	return predicate.SignInTask(sql.FieldLTE(FieldEndTime, v))
}

// RewardInfoEQ applies the EQ predicate on the "reward_info" field.
func RewardInfoEQ(v int) predicate.SignInTask {
	return predicate.SignInTask(sql.FieldEQ(FieldRewardInfo, v))
}

// RewardInfoNEQ applies the NEQ predicate on the "reward_info" field.
func RewardInfoNEQ(v int) predicate.SignInTask {
	return predicate.SignInTask(sql.FieldNEQ(FieldRewardInfo, v))
}

// RewardInfoIn applies the In predicate on the "reward_info" field.
func RewardInfoIn(vs ...int) predicate.SignInTask {
	return predicate.SignInTask(sql.FieldIn(FieldRewardInfo, vs...))
}

// RewardInfoNotIn applies the NotIn predicate on the "reward_info" field.
func RewardInfoNotIn(vs ...int) predicate.SignInTask {
	return predicate.SignInTask(sql.FieldNotIn(FieldRewardInfo, vs...))
}

// RewardInfoGT applies the GT predicate on the "reward_info" field.
func RewardInfoGT(v int) predicate.SignInTask {
	return predicate.SignInTask(sql.FieldGT(FieldRewardInfo, v))
}

// RewardInfoGTE applies the GTE predicate on the "reward_info" field.
func RewardInfoGTE(v int) predicate.SignInTask {
	return predicate.SignInTask(sql.FieldGTE(FieldRewardInfo, v))
}

// RewardInfoLT applies the LT predicate on the "reward_info" field.
func RewardInfoLT(v int) predicate.SignInTask {
	return predicate.SignInTask(sql.FieldLT(FieldRewardInfo, v))
}

// RewardInfoLTE applies the LTE predicate on the "reward_info" field.
func RewardInfoLTE(v int) predicate.SignInTask {
	return predicate.SignInTask(sql.FieldLTE(FieldRewardInfo, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SignInTask) predicate.SignInTask {
	return predicate.SignInTask(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SignInTask) predicate.SignInTask {
	return predicate.SignInTask(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SignInTask) predicate.SignInTask {
	return predicate.SignInTask(sql.NotPredicates(p))
}
