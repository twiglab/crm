// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/twiglab/crm/card/orm/ent/card"
)

// Card is the model entity for the Card schema.
type Card struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// CardBin holds the value of the "card_bin" field.
	CardBin string `json:"card_bin,omitempty"`
	// Type holds the value of the "type" field.
	Type int `json:"type,omitempty"`
	// Pic1 holds the value of the "pic1" field.
	Pic1 string `json:"pic1,omitempty"`
	// Pic2 holds the value of the "pic2" field.
	Pic2 string `json:"pic2,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount int64 `json:"amount,omitempty"`
	// MemberCode holds the value of the "member_code" field.
	MemberCode string `json:"member_code,omitempty"`
	// BindTime holds the value of the "bind_time" field.
	BindTime *time.Time `json:"bind_time,omitempty"`
	// LastUseTs holds the value of the "last_use_ts" field.
	LastUseTs int64 `json:"last_use_ts,omitempty"`
	// LastCleanBalance holds the value of the "last_clean_balance" field.
	LastCleanBalance int64 `json:"last_clean_balance,omitempty"`
	// LastCleanTs holds the value of the "last_clean_ts" field.
	LastCleanTs int16 `json:"last_clean_ts,omitempty"`
	// Status holds the value of the "status" field.
	Status       int `json:"status,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Card) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case card.FieldID, card.FieldType, card.FieldAmount, card.FieldLastUseTs, card.FieldLastCleanBalance, card.FieldLastCleanTs, card.FieldStatus:
			values[i] = new(sql.NullInt64)
		case card.FieldCode, card.FieldCardBin, card.FieldPic1, card.FieldPic2, card.FieldMemberCode:
			values[i] = new(sql.NullString)
		case card.FieldCreateTime, card.FieldUpdateTime, card.FieldBindTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Card fields.
func (c *Card) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case card.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case card.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				c.CreateTime = value.Time
			}
		case card.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				c.UpdateTime = value.Time
			}
		case card.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				c.Code = value.String
			}
		case card.FieldCardBin:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field card_bin", values[i])
			} else if value.Valid {
				c.CardBin = value.String
			}
		case card.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				c.Type = int(value.Int64)
			}
		case card.FieldPic1:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pic1", values[i])
			} else if value.Valid {
				c.Pic1 = value.String
			}
		case card.FieldPic2:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pic2", values[i])
			} else if value.Valid {
				c.Pic2 = value.String
			}
		case card.FieldAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				c.Amount = value.Int64
			}
		case card.FieldMemberCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field member_code", values[i])
			} else if value.Valid {
				c.MemberCode = value.String
			}
		case card.FieldBindTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field bind_time", values[i])
			} else if value.Valid {
				c.BindTime = new(time.Time)
				*c.BindTime = value.Time
			}
		case card.FieldLastUseTs:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field last_use_ts", values[i])
			} else if value.Valid {
				c.LastUseTs = value.Int64
			}
		case card.FieldLastCleanBalance:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field last_clean_balance", values[i])
			} else if value.Valid {
				c.LastCleanBalance = value.Int64
			}
		case card.FieldLastCleanTs:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field last_clean_ts", values[i])
			} else if value.Valid {
				c.LastCleanTs = int16(value.Int64)
			}
		case card.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				c.Status = int(value.Int64)
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Card.
// This includes values selected through modifiers, order, etc.
func (c *Card) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// Update returns a builder for updating this Card.
// Note that you need to call Card.Unwrap() before calling this method if this Card
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Card) Update() *CardUpdateOne {
	return NewCardClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Card entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Card) Unwrap() *Card {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Card is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Card) String() string {
	var builder strings.Builder
	builder.WriteString("Card(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("create_time=")
	builder.WriteString(c.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(c.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(c.Code)
	builder.WriteString(", ")
	builder.WriteString("card_bin=")
	builder.WriteString(c.CardBin)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", c.Type))
	builder.WriteString(", ")
	builder.WriteString("pic1=")
	builder.WriteString(c.Pic1)
	builder.WriteString(", ")
	builder.WriteString("pic2=")
	builder.WriteString(c.Pic2)
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", c.Amount))
	builder.WriteString(", ")
	builder.WriteString("member_code=")
	builder.WriteString(c.MemberCode)
	builder.WriteString(", ")
	if v := c.BindTime; v != nil {
		builder.WriteString("bind_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("last_use_ts=")
	builder.WriteString(fmt.Sprintf("%v", c.LastUseTs))
	builder.WriteString(", ")
	builder.WriteString("last_clean_balance=")
	builder.WriteString(fmt.Sprintf("%v", c.LastCleanBalance))
	builder.WriteString(", ")
	builder.WriteString("last_clean_ts=")
	builder.WriteString(fmt.Sprintf("%v", c.LastCleanTs))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", c.Status))
	builder.WriteByte(')')
	return builder.String()
}

// Cards is a parsable slice of Card.
type Cards []*Card
