// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/twiglab/crm/card/orm/ent/card"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 1)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   card.Table,
			Columns: card.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: card.FieldID,
			},
		},
		Type: "Card",
		Fields: map[string]*sqlgraph.FieldSpec{
			card.FieldCreateTime:       {Type: field.TypeTime, Column: card.FieldCreateTime},
			card.FieldUpdateTime:       {Type: field.TypeTime, Column: card.FieldUpdateTime},
			card.FieldCode:             {Type: field.TypeString, Column: card.FieldCode},
			card.FieldCardBin:          {Type: field.TypeString, Column: card.FieldCardBin},
			card.FieldType:             {Type: field.TypeInt, Column: card.FieldType},
			card.FieldPic1:             {Type: field.TypeString, Column: card.FieldPic1},
			card.FieldPic2:             {Type: field.TypeString, Column: card.FieldPic2},
			card.FieldAmount:           {Type: field.TypeInt64, Column: card.FieldAmount},
			card.FieldMemberCode:       {Type: field.TypeString, Column: card.FieldMemberCode},
			card.FieldBindTime:         {Type: field.TypeTime, Column: card.FieldBindTime},
			card.FieldLastUseTs:        {Type: field.TypeInt64, Column: card.FieldLastUseTs},
			card.FieldLastCleanBalance: {Type: field.TypeInt64, Column: card.FieldLastCleanBalance},
			card.FieldLastCleanTs:      {Type: field.TypeInt16, Column: card.FieldLastCleanTs},
			card.FieldStatus:           {Type: field.TypeInt, Column: card.FieldStatus},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (cq *CardQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CardQuery builder.
func (cq *CardQuery) Filter() *CardFilter {
	return &CardFilter{config: cq.config, predicateAdder: cq}
}

// addPredicate implements the predicateAdder interface.
func (m *CardMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CardMutation builder.
func (m *CardMutation) Filter() *CardFilter {
	return &CardFilter{config: m.config, predicateAdder: m}
}

// CardFilter provides a generic filtering capability at runtime for CardQuery.
type CardFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CardFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *CardFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(card.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *CardFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(card.FieldCreateTime))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *CardFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(card.FieldUpdateTime))
}

// WhereCode applies the entql string predicate on the code field.
func (f *CardFilter) WhereCode(p entql.StringP) {
	f.Where(p.Field(card.FieldCode))
}

// WhereCardBin applies the entql string predicate on the card_bin field.
func (f *CardFilter) WhereCardBin(p entql.StringP) {
	f.Where(p.Field(card.FieldCardBin))
}

// WhereType applies the entql int predicate on the type field.
func (f *CardFilter) WhereType(p entql.IntP) {
	f.Where(p.Field(card.FieldType))
}

// WherePic1 applies the entql string predicate on the pic1 field.
func (f *CardFilter) WherePic1(p entql.StringP) {
	f.Where(p.Field(card.FieldPic1))
}

// WherePic2 applies the entql string predicate on the pic2 field.
func (f *CardFilter) WherePic2(p entql.StringP) {
	f.Where(p.Field(card.FieldPic2))
}

// WhereAmount applies the entql int64 predicate on the amount field.
func (f *CardFilter) WhereAmount(p entql.Int64P) {
	f.Where(p.Field(card.FieldAmount))
}

// WhereMemberCode applies the entql string predicate on the member_code field.
func (f *CardFilter) WhereMemberCode(p entql.StringP) {
	f.Where(p.Field(card.FieldMemberCode))
}

// WhereBindTime applies the entql time.Time predicate on the bind_time field.
func (f *CardFilter) WhereBindTime(p entql.TimeP) {
	f.Where(p.Field(card.FieldBindTime))
}

// WhereLastUseTs applies the entql int64 predicate on the last_use_ts field.
func (f *CardFilter) WhereLastUseTs(p entql.Int64P) {
	f.Where(p.Field(card.FieldLastUseTs))
}

// WhereLastCleanBalance applies the entql int64 predicate on the last_clean_balance field.
func (f *CardFilter) WhereLastCleanBalance(p entql.Int64P) {
	f.Where(p.Field(card.FieldLastCleanBalance))
}

// WhereLastCleanTs applies the entql int16 predicate on the last_clean_ts field.
func (f *CardFilter) WhereLastCleanTs(p entql.Int16P) {
	f.Where(p.Field(card.FieldLastCleanTs))
}

// WhereStatus applies the entql int predicate on the status field.
func (f *CardFilter) WhereStatus(p entql.IntP) {
	f.Where(p.Field(card.FieldStatus))
}
