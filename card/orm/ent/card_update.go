// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/twiglab/crm/card/orm/ent/card"
	"github.com/twiglab/crm/card/orm/ent/predicate"
)

// CardUpdate is the builder for updating Card entities.
type CardUpdate struct {
	config
	hooks    []Hook
	mutation *CardMutation
}

// Where appends a list predicates to the CardUpdate builder.
func (cu *CardUpdate) Where(ps ...predicate.Card) *CardUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdateTime sets the "update_time" field.
func (cu *CardUpdate) SetUpdateTime(t time.Time) *CardUpdate {
	cu.mutation.SetUpdateTime(t)
	return cu
}

// SetType sets the "type" field.
func (cu *CardUpdate) SetType(i int) *CardUpdate {
	cu.mutation.ResetType()
	cu.mutation.SetType(i)
	return cu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cu *CardUpdate) SetNillableType(i *int) *CardUpdate {
	if i != nil {
		cu.SetType(*i)
	}
	return cu
}

// AddType adds i to the "type" field.
func (cu *CardUpdate) AddType(i int) *CardUpdate {
	cu.mutation.AddType(i)
	return cu
}

// SetMemberCode sets the "member_code" field.
func (cu *CardUpdate) SetMemberCode(s string) *CardUpdate {
	cu.mutation.SetMemberCode(s)
	return cu
}

// SetNillableMemberCode sets the "member_code" field if the given value is not nil.
func (cu *CardUpdate) SetNillableMemberCode(s *string) *CardUpdate {
	if s != nil {
		cu.SetMemberCode(*s)
	}
	return cu
}

// ClearMemberCode clears the value of the "member_code" field.
func (cu *CardUpdate) ClearMemberCode() *CardUpdate {
	cu.mutation.ClearMemberCode()
	return cu
}

// SetBindTime sets the "bind_time" field.
func (cu *CardUpdate) SetBindTime(t time.Time) *CardUpdate {
	cu.mutation.SetBindTime(t)
	return cu
}

// SetNillableBindTime sets the "bind_time" field if the given value is not nil.
func (cu *CardUpdate) SetNillableBindTime(t *time.Time) *CardUpdate {
	if t != nil {
		cu.SetBindTime(*t)
	}
	return cu
}

// ClearBindTime clears the value of the "bind_time" field.
func (cu *CardUpdate) ClearBindTime() *CardUpdate {
	cu.mutation.ClearBindTime()
	return cu
}

// SetLastUseTs sets the "last_use_ts" field.
func (cu *CardUpdate) SetLastUseTs(i int64) *CardUpdate {
	cu.mutation.ResetLastUseTs()
	cu.mutation.SetLastUseTs(i)
	return cu
}

// SetNillableLastUseTs sets the "last_use_ts" field if the given value is not nil.
func (cu *CardUpdate) SetNillableLastUseTs(i *int64) *CardUpdate {
	if i != nil {
		cu.SetLastUseTs(*i)
	}
	return cu
}

// AddLastUseTs adds i to the "last_use_ts" field.
func (cu *CardUpdate) AddLastUseTs(i int64) *CardUpdate {
	cu.mutation.AddLastUseTs(i)
	return cu
}

// SetStatus sets the "status" field.
func (cu *CardUpdate) SetStatus(i int) *CardUpdate {
	cu.mutation.ResetStatus()
	cu.mutation.SetStatus(i)
	return cu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cu *CardUpdate) SetNillableStatus(i *int) *CardUpdate {
	if i != nil {
		cu.SetStatus(*i)
	}
	return cu
}

// AddStatus adds i to the "status" field.
func (cu *CardUpdate) AddStatus(i int) *CardUpdate {
	cu.mutation.AddStatus(i)
	return cu
}

// Mutation returns the CardMutation object of the builder.
func (cu *CardUpdate) Mutation() *CardMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CardUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CardUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CardUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CardUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CardUpdate) defaults() {
	if _, ok := cu.mutation.UpdateTime(); !ok {
		v := card.UpdateDefaultUpdateTime()
		cu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CardUpdate) check() error {
	if v, ok := cu.mutation.MemberCode(); ok {
		if err := card.MemberCodeValidator(v); err != nil {
			return &ValidationError{Name: "member_code", err: fmt.Errorf(`ent: validator failed for field "Card.member_code": %w`, err)}
		}
	}
	return nil
}

func (cu *CardUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(card.Table, card.Columns, sqlgraph.NewFieldSpec(card.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdateTime(); ok {
		_spec.SetField(card.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := cu.mutation.GetType(); ok {
		_spec.SetField(card.FieldType, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedType(); ok {
		_spec.AddField(card.FieldType, field.TypeInt, value)
	}
	if value, ok := cu.mutation.MemberCode(); ok {
		_spec.SetField(card.FieldMemberCode, field.TypeString, value)
	}
	if cu.mutation.MemberCodeCleared() {
		_spec.ClearField(card.FieldMemberCode, field.TypeString)
	}
	if value, ok := cu.mutation.BindTime(); ok {
		_spec.SetField(card.FieldBindTime, field.TypeTime, value)
	}
	if cu.mutation.BindTimeCleared() {
		_spec.ClearField(card.FieldBindTime, field.TypeTime)
	}
	if value, ok := cu.mutation.LastUseTs(); ok {
		_spec.SetField(card.FieldLastUseTs, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.AddedLastUseTs(); ok {
		_spec.AddField(card.FieldLastUseTs, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.Status(); ok {
		_spec.SetField(card.FieldStatus, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedStatus(); ok {
		_spec.AddField(card.FieldStatus, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{card.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CardUpdateOne is the builder for updating a single Card entity.
type CardUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CardMutation
}

// SetUpdateTime sets the "update_time" field.
func (cuo *CardUpdateOne) SetUpdateTime(t time.Time) *CardUpdateOne {
	cuo.mutation.SetUpdateTime(t)
	return cuo
}

// SetType sets the "type" field.
func (cuo *CardUpdateOne) SetType(i int) *CardUpdateOne {
	cuo.mutation.ResetType()
	cuo.mutation.SetType(i)
	return cuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cuo *CardUpdateOne) SetNillableType(i *int) *CardUpdateOne {
	if i != nil {
		cuo.SetType(*i)
	}
	return cuo
}

// AddType adds i to the "type" field.
func (cuo *CardUpdateOne) AddType(i int) *CardUpdateOne {
	cuo.mutation.AddType(i)
	return cuo
}

// SetMemberCode sets the "member_code" field.
func (cuo *CardUpdateOne) SetMemberCode(s string) *CardUpdateOne {
	cuo.mutation.SetMemberCode(s)
	return cuo
}

// SetNillableMemberCode sets the "member_code" field if the given value is not nil.
func (cuo *CardUpdateOne) SetNillableMemberCode(s *string) *CardUpdateOne {
	if s != nil {
		cuo.SetMemberCode(*s)
	}
	return cuo
}

// ClearMemberCode clears the value of the "member_code" field.
func (cuo *CardUpdateOne) ClearMemberCode() *CardUpdateOne {
	cuo.mutation.ClearMemberCode()
	return cuo
}

// SetBindTime sets the "bind_time" field.
func (cuo *CardUpdateOne) SetBindTime(t time.Time) *CardUpdateOne {
	cuo.mutation.SetBindTime(t)
	return cuo
}

// SetNillableBindTime sets the "bind_time" field if the given value is not nil.
func (cuo *CardUpdateOne) SetNillableBindTime(t *time.Time) *CardUpdateOne {
	if t != nil {
		cuo.SetBindTime(*t)
	}
	return cuo
}

// ClearBindTime clears the value of the "bind_time" field.
func (cuo *CardUpdateOne) ClearBindTime() *CardUpdateOne {
	cuo.mutation.ClearBindTime()
	return cuo
}

// SetLastUseTs sets the "last_use_ts" field.
func (cuo *CardUpdateOne) SetLastUseTs(i int64) *CardUpdateOne {
	cuo.mutation.ResetLastUseTs()
	cuo.mutation.SetLastUseTs(i)
	return cuo
}

// SetNillableLastUseTs sets the "last_use_ts" field if the given value is not nil.
func (cuo *CardUpdateOne) SetNillableLastUseTs(i *int64) *CardUpdateOne {
	if i != nil {
		cuo.SetLastUseTs(*i)
	}
	return cuo
}

// AddLastUseTs adds i to the "last_use_ts" field.
func (cuo *CardUpdateOne) AddLastUseTs(i int64) *CardUpdateOne {
	cuo.mutation.AddLastUseTs(i)
	return cuo
}

// SetStatus sets the "status" field.
func (cuo *CardUpdateOne) SetStatus(i int) *CardUpdateOne {
	cuo.mutation.ResetStatus()
	cuo.mutation.SetStatus(i)
	return cuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cuo *CardUpdateOne) SetNillableStatus(i *int) *CardUpdateOne {
	if i != nil {
		cuo.SetStatus(*i)
	}
	return cuo
}

// AddStatus adds i to the "status" field.
func (cuo *CardUpdateOne) AddStatus(i int) *CardUpdateOne {
	cuo.mutation.AddStatus(i)
	return cuo
}

// Mutation returns the CardMutation object of the builder.
func (cuo *CardUpdateOne) Mutation() *CardMutation {
	return cuo.mutation
}

// Where appends a list predicates to the CardUpdate builder.
func (cuo *CardUpdateOne) Where(ps ...predicate.Card) *CardUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CardUpdateOne) Select(field string, fields ...string) *CardUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Card entity.
func (cuo *CardUpdateOne) Save(ctx context.Context) (*Card, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CardUpdateOne) SaveX(ctx context.Context) *Card {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CardUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CardUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CardUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdateTime(); !ok {
		v := card.UpdateDefaultUpdateTime()
		cuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CardUpdateOne) check() error {
	if v, ok := cuo.mutation.MemberCode(); ok {
		if err := card.MemberCodeValidator(v); err != nil {
			return &ValidationError{Name: "member_code", err: fmt.Errorf(`ent: validator failed for field "Card.member_code": %w`, err)}
		}
	}
	return nil
}

func (cuo *CardUpdateOne) sqlSave(ctx context.Context) (_node *Card, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(card.Table, card.Columns, sqlgraph.NewFieldSpec(card.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Card.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, card.FieldID)
		for _, f := range fields {
			if !card.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != card.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdateTime(); ok {
		_spec.SetField(card.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.GetType(); ok {
		_spec.SetField(card.FieldType, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedType(); ok {
		_spec.AddField(card.FieldType, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.MemberCode(); ok {
		_spec.SetField(card.FieldMemberCode, field.TypeString, value)
	}
	if cuo.mutation.MemberCodeCleared() {
		_spec.ClearField(card.FieldMemberCode, field.TypeString)
	}
	if value, ok := cuo.mutation.BindTime(); ok {
		_spec.SetField(card.FieldBindTime, field.TypeTime, value)
	}
	if cuo.mutation.BindTimeCleared() {
		_spec.ClearField(card.FieldBindTime, field.TypeTime)
	}
	if value, ok := cuo.mutation.LastUseTs(); ok {
		_spec.SetField(card.FieldLastUseTs, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.AddedLastUseTs(); ok {
		_spec.AddField(card.FieldLastUseTs, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.Status(); ok {
		_spec.SetField(card.FieldStatus, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedStatus(); ok {
		_spec.AddField(card.FieldStatus, field.TypeInt, value)
	}
	_node = &Card{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{card.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
