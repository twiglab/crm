// Code generated by ent, DO NOT EDIT.

package chargerecord

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the chargerecord type in the database.
	Label = "charge_record"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldPayCode holds the string denoting the pay_code field in the database.
	FieldPayCode = "pay_code"
	// FieldPayTs holds the string denoting the pay_ts field in the database.
	FieldPayTs = "pay_ts"
	// FieldDeduct holds the string denoting the deduct field in the database.
	FieldDeduct = "deduct"
	// FieldCardCode holds the string denoting the card_code field in the database.
	FieldCardCode = "card_code"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// Table holds the table name of the chargerecord in the database.
	Table = "t_charge_record"
)

// Columns holds all SQL columns for chargerecord fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldCode,
	FieldPayCode,
	FieldPayTs,
	FieldDeduct,
	FieldCardCode,
	FieldStatus,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultCode holds the default value on creation for the "code" field.
	DefaultCode func() string
	// CodeValidator is a validator for the "code" field. It is called by the builders before save.
	CodeValidator func(string) error
	// PayCodeValidator is a validator for the "pay_code" field. It is called by the builders before save.
	PayCodeValidator func(string) error
	// DefaultPayTs holds the default value on creation for the "pay_ts" field.
	DefaultPayTs int64
	// DefaultDeduct holds the default value on creation for the "deduct" field.
	DefaultDeduct int64
	// CardCodeValidator is a validator for the "card_code" field. It is called by the builders before save.
	CardCodeValidator func(string) error
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus int
)

// OrderOption defines the ordering options for the ChargeRecord queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}

// ByPayCode orders the results by the pay_code field.
func ByPayCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPayCode, opts...).ToFunc()
}

// ByPayTs orders the results by the pay_ts field.
func ByPayTs(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPayTs, opts...).ToFunc()
}

// ByDeduct orders the results by the deduct field.
func ByDeduct(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeduct, opts...).ToFunc()
}

// ByCardCode orders the results by the card_code field.
func ByCardCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCardCode, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}
