// Code generated by ent, DO NOT EDIT.

package chargerecord

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/twiglab/crm/card/orm/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldEQ(FieldUpdateTime, v))
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldEQ(FieldCode, v))
}

// PayCode applies equality check predicate on the "pay_code" field. It's identical to PayCodeEQ.
func PayCode(v string) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldEQ(FieldPayCode, v))
}

// PayTs applies equality check predicate on the "pay_ts" field. It's identical to PayTsEQ.
func PayTs(v int64) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldEQ(FieldPayTs, v))
}

// Deduct applies equality check predicate on the "deduct" field. It's identical to DeductEQ.
func Deduct(v int64) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldEQ(FieldDeduct, v))
}

// CardCode applies equality check predicate on the "card_code" field. It's identical to CardCodeEQ.
func CardCode(v string) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldEQ(FieldCardCode, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldEQ(FieldStatus, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldLTE(FieldUpdateTime, v))
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldEQ(FieldCode, v))
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldNEQ(FieldCode, v))
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldIn(FieldCode, vs...))
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldNotIn(FieldCode, vs...))
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldGT(FieldCode, v))
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldGTE(FieldCode, v))
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldLT(FieldCode, v))
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldLTE(FieldCode, v))
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldContains(FieldCode, v))
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldHasPrefix(FieldCode, v))
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldHasSuffix(FieldCode, v))
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldEqualFold(FieldCode, v))
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldContainsFold(FieldCode, v))
}

// PayCodeEQ applies the EQ predicate on the "pay_code" field.
func PayCodeEQ(v string) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldEQ(FieldPayCode, v))
}

// PayCodeNEQ applies the NEQ predicate on the "pay_code" field.
func PayCodeNEQ(v string) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldNEQ(FieldPayCode, v))
}

// PayCodeIn applies the In predicate on the "pay_code" field.
func PayCodeIn(vs ...string) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldIn(FieldPayCode, vs...))
}

// PayCodeNotIn applies the NotIn predicate on the "pay_code" field.
func PayCodeNotIn(vs ...string) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldNotIn(FieldPayCode, vs...))
}

// PayCodeGT applies the GT predicate on the "pay_code" field.
func PayCodeGT(v string) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldGT(FieldPayCode, v))
}

// PayCodeGTE applies the GTE predicate on the "pay_code" field.
func PayCodeGTE(v string) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldGTE(FieldPayCode, v))
}

// PayCodeLT applies the LT predicate on the "pay_code" field.
func PayCodeLT(v string) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldLT(FieldPayCode, v))
}

// PayCodeLTE applies the LTE predicate on the "pay_code" field.
func PayCodeLTE(v string) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldLTE(FieldPayCode, v))
}

// PayCodeContains applies the Contains predicate on the "pay_code" field.
func PayCodeContains(v string) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldContains(FieldPayCode, v))
}

// PayCodeHasPrefix applies the HasPrefix predicate on the "pay_code" field.
func PayCodeHasPrefix(v string) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldHasPrefix(FieldPayCode, v))
}

// PayCodeHasSuffix applies the HasSuffix predicate on the "pay_code" field.
func PayCodeHasSuffix(v string) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldHasSuffix(FieldPayCode, v))
}

// PayCodeEqualFold applies the EqualFold predicate on the "pay_code" field.
func PayCodeEqualFold(v string) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldEqualFold(FieldPayCode, v))
}

// PayCodeContainsFold applies the ContainsFold predicate on the "pay_code" field.
func PayCodeContainsFold(v string) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldContainsFold(FieldPayCode, v))
}

// PayTsEQ applies the EQ predicate on the "pay_ts" field.
func PayTsEQ(v int64) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldEQ(FieldPayTs, v))
}

// PayTsNEQ applies the NEQ predicate on the "pay_ts" field.
func PayTsNEQ(v int64) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldNEQ(FieldPayTs, v))
}

// PayTsIn applies the In predicate on the "pay_ts" field.
func PayTsIn(vs ...int64) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldIn(FieldPayTs, vs...))
}

// PayTsNotIn applies the NotIn predicate on the "pay_ts" field.
func PayTsNotIn(vs ...int64) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldNotIn(FieldPayTs, vs...))
}

// PayTsGT applies the GT predicate on the "pay_ts" field.
func PayTsGT(v int64) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldGT(FieldPayTs, v))
}

// PayTsGTE applies the GTE predicate on the "pay_ts" field.
func PayTsGTE(v int64) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldGTE(FieldPayTs, v))
}

// PayTsLT applies the LT predicate on the "pay_ts" field.
func PayTsLT(v int64) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldLT(FieldPayTs, v))
}

// PayTsLTE applies the LTE predicate on the "pay_ts" field.
func PayTsLTE(v int64) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldLTE(FieldPayTs, v))
}

// DeductEQ applies the EQ predicate on the "deduct" field.
func DeductEQ(v int64) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldEQ(FieldDeduct, v))
}

// DeductNEQ applies the NEQ predicate on the "deduct" field.
func DeductNEQ(v int64) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldNEQ(FieldDeduct, v))
}

// DeductIn applies the In predicate on the "deduct" field.
func DeductIn(vs ...int64) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldIn(FieldDeduct, vs...))
}

// DeductNotIn applies the NotIn predicate on the "deduct" field.
func DeductNotIn(vs ...int64) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldNotIn(FieldDeduct, vs...))
}

// DeductGT applies the GT predicate on the "deduct" field.
func DeductGT(v int64) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldGT(FieldDeduct, v))
}

// DeductGTE applies the GTE predicate on the "deduct" field.
func DeductGTE(v int64) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldGTE(FieldDeduct, v))
}

// DeductLT applies the LT predicate on the "deduct" field.
func DeductLT(v int64) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldLT(FieldDeduct, v))
}

// DeductLTE applies the LTE predicate on the "deduct" field.
func DeductLTE(v int64) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldLTE(FieldDeduct, v))
}

// CardCodeEQ applies the EQ predicate on the "card_code" field.
func CardCodeEQ(v string) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldEQ(FieldCardCode, v))
}

// CardCodeNEQ applies the NEQ predicate on the "card_code" field.
func CardCodeNEQ(v string) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldNEQ(FieldCardCode, v))
}

// CardCodeIn applies the In predicate on the "card_code" field.
func CardCodeIn(vs ...string) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldIn(FieldCardCode, vs...))
}

// CardCodeNotIn applies the NotIn predicate on the "card_code" field.
func CardCodeNotIn(vs ...string) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldNotIn(FieldCardCode, vs...))
}

// CardCodeGT applies the GT predicate on the "card_code" field.
func CardCodeGT(v string) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldGT(FieldCardCode, v))
}

// CardCodeGTE applies the GTE predicate on the "card_code" field.
func CardCodeGTE(v string) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldGTE(FieldCardCode, v))
}

// CardCodeLT applies the LT predicate on the "card_code" field.
func CardCodeLT(v string) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldLT(FieldCardCode, v))
}

// CardCodeLTE applies the LTE predicate on the "card_code" field.
func CardCodeLTE(v string) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldLTE(FieldCardCode, v))
}

// CardCodeContains applies the Contains predicate on the "card_code" field.
func CardCodeContains(v string) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldContains(FieldCardCode, v))
}

// CardCodeHasPrefix applies the HasPrefix predicate on the "card_code" field.
func CardCodeHasPrefix(v string) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldHasPrefix(FieldCardCode, v))
}

// CardCodeHasSuffix applies the HasSuffix predicate on the "card_code" field.
func CardCodeHasSuffix(v string) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldHasSuffix(FieldCardCode, v))
}

// CardCodeEqualFold applies the EqualFold predicate on the "card_code" field.
func CardCodeEqualFold(v string) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldEqualFold(FieldCardCode, v))
}

// CardCodeContainsFold applies the ContainsFold predicate on the "card_code" field.
func CardCodeContainsFold(v string) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldContainsFold(FieldCardCode, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.FieldLTE(FieldStatus, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ChargeRecord) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ChargeRecord) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ChargeRecord) predicate.ChargeRecord {
	return predicate.ChargeRecord(sql.NotPredicates(p))
}
