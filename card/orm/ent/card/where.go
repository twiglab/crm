// Code generated by ent, DO NOT EDIT.

package card

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/twiglab/crm/card/orm/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Card {
	return predicate.Card(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Card {
	return predicate.Card(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Card {
	return predicate.Card(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Card {
	return predicate.Card(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Card {
	return predicate.Card(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Card {
	return predicate.Card(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Card {
	return predicate.Card(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Card {
	return predicate.Card(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Card {
	return predicate.Card(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Card {
	return predicate.Card(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Card {
	return predicate.Card(sql.FieldEQ(FieldUpdateTime, v))
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.Card {
	return predicate.Card(sql.FieldEQ(FieldCode, v))
}

// CardCode applies equality check predicate on the "card_code" field. It's identical to CardCodeEQ.
func CardCode(v string) predicate.Card {
	return predicate.Card(sql.FieldEQ(FieldCardCode, v))
}

// MemberCode applies equality check predicate on the "member_code" field. It's identical to MemberCodeEQ.
func MemberCode(v string) predicate.Card {
	return predicate.Card(sql.FieldEQ(FieldMemberCode, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v int) predicate.Card {
	return predicate.Card(sql.FieldEQ(FieldType, v))
}

// Balance applies equality check predicate on the "balance" field. It's identical to BalanceEQ.
func Balance(v int) predicate.Card {
	return predicate.Card(sql.FieldEQ(FieldBalance, v))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v int) predicate.Card {
	return predicate.Card(sql.FieldEQ(FieldAmount, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int) predicate.Card {
	return predicate.Card(sql.FieldEQ(FieldStatus, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Card {
	return predicate.Card(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Card {
	return predicate.Card(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Card {
	return predicate.Card(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Card {
	return predicate.Card(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Card {
	return predicate.Card(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Card {
	return predicate.Card(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Card {
	return predicate.Card(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Card {
	return predicate.Card(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Card {
	return predicate.Card(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Card {
	return predicate.Card(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Card {
	return predicate.Card(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Card {
	return predicate.Card(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Card {
	return predicate.Card(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Card {
	return predicate.Card(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Card {
	return predicate.Card(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Card {
	return predicate.Card(sql.FieldLTE(FieldUpdateTime, v))
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.Card {
	return predicate.Card(sql.FieldEQ(FieldCode, v))
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.Card {
	return predicate.Card(sql.FieldNEQ(FieldCode, v))
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.Card {
	return predicate.Card(sql.FieldIn(FieldCode, vs...))
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.Card {
	return predicate.Card(sql.FieldNotIn(FieldCode, vs...))
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.Card {
	return predicate.Card(sql.FieldGT(FieldCode, v))
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.Card {
	return predicate.Card(sql.FieldGTE(FieldCode, v))
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.Card {
	return predicate.Card(sql.FieldLT(FieldCode, v))
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.Card {
	return predicate.Card(sql.FieldLTE(FieldCode, v))
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.Card {
	return predicate.Card(sql.FieldContains(FieldCode, v))
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.Card {
	return predicate.Card(sql.FieldHasPrefix(FieldCode, v))
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.Card {
	return predicate.Card(sql.FieldHasSuffix(FieldCode, v))
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.Card {
	return predicate.Card(sql.FieldEqualFold(FieldCode, v))
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.Card {
	return predicate.Card(sql.FieldContainsFold(FieldCode, v))
}

// CardCodeEQ applies the EQ predicate on the "card_code" field.
func CardCodeEQ(v string) predicate.Card {
	return predicate.Card(sql.FieldEQ(FieldCardCode, v))
}

// CardCodeNEQ applies the NEQ predicate on the "card_code" field.
func CardCodeNEQ(v string) predicate.Card {
	return predicate.Card(sql.FieldNEQ(FieldCardCode, v))
}

// CardCodeIn applies the In predicate on the "card_code" field.
func CardCodeIn(vs ...string) predicate.Card {
	return predicate.Card(sql.FieldIn(FieldCardCode, vs...))
}

// CardCodeNotIn applies the NotIn predicate on the "card_code" field.
func CardCodeNotIn(vs ...string) predicate.Card {
	return predicate.Card(sql.FieldNotIn(FieldCardCode, vs...))
}

// CardCodeGT applies the GT predicate on the "card_code" field.
func CardCodeGT(v string) predicate.Card {
	return predicate.Card(sql.FieldGT(FieldCardCode, v))
}

// CardCodeGTE applies the GTE predicate on the "card_code" field.
func CardCodeGTE(v string) predicate.Card {
	return predicate.Card(sql.FieldGTE(FieldCardCode, v))
}

// CardCodeLT applies the LT predicate on the "card_code" field.
func CardCodeLT(v string) predicate.Card {
	return predicate.Card(sql.FieldLT(FieldCardCode, v))
}

// CardCodeLTE applies the LTE predicate on the "card_code" field.
func CardCodeLTE(v string) predicate.Card {
	return predicate.Card(sql.FieldLTE(FieldCardCode, v))
}

// CardCodeContains applies the Contains predicate on the "card_code" field.
func CardCodeContains(v string) predicate.Card {
	return predicate.Card(sql.FieldContains(FieldCardCode, v))
}

// CardCodeHasPrefix applies the HasPrefix predicate on the "card_code" field.
func CardCodeHasPrefix(v string) predicate.Card {
	return predicate.Card(sql.FieldHasPrefix(FieldCardCode, v))
}

// CardCodeHasSuffix applies the HasSuffix predicate on the "card_code" field.
func CardCodeHasSuffix(v string) predicate.Card {
	return predicate.Card(sql.FieldHasSuffix(FieldCardCode, v))
}

// CardCodeEqualFold applies the EqualFold predicate on the "card_code" field.
func CardCodeEqualFold(v string) predicate.Card {
	return predicate.Card(sql.FieldEqualFold(FieldCardCode, v))
}

// CardCodeContainsFold applies the ContainsFold predicate on the "card_code" field.
func CardCodeContainsFold(v string) predicate.Card {
	return predicate.Card(sql.FieldContainsFold(FieldCardCode, v))
}

// MemberCodeEQ applies the EQ predicate on the "member_code" field.
func MemberCodeEQ(v string) predicate.Card {
	return predicate.Card(sql.FieldEQ(FieldMemberCode, v))
}

// MemberCodeNEQ applies the NEQ predicate on the "member_code" field.
func MemberCodeNEQ(v string) predicate.Card {
	return predicate.Card(sql.FieldNEQ(FieldMemberCode, v))
}

// MemberCodeIn applies the In predicate on the "member_code" field.
func MemberCodeIn(vs ...string) predicate.Card {
	return predicate.Card(sql.FieldIn(FieldMemberCode, vs...))
}

// MemberCodeNotIn applies the NotIn predicate on the "member_code" field.
func MemberCodeNotIn(vs ...string) predicate.Card {
	return predicate.Card(sql.FieldNotIn(FieldMemberCode, vs...))
}

// MemberCodeGT applies the GT predicate on the "member_code" field.
func MemberCodeGT(v string) predicate.Card {
	return predicate.Card(sql.FieldGT(FieldMemberCode, v))
}

// MemberCodeGTE applies the GTE predicate on the "member_code" field.
func MemberCodeGTE(v string) predicate.Card {
	return predicate.Card(sql.FieldGTE(FieldMemberCode, v))
}

// MemberCodeLT applies the LT predicate on the "member_code" field.
func MemberCodeLT(v string) predicate.Card {
	return predicate.Card(sql.FieldLT(FieldMemberCode, v))
}

// MemberCodeLTE applies the LTE predicate on the "member_code" field.
func MemberCodeLTE(v string) predicate.Card {
	return predicate.Card(sql.FieldLTE(FieldMemberCode, v))
}

// MemberCodeContains applies the Contains predicate on the "member_code" field.
func MemberCodeContains(v string) predicate.Card {
	return predicate.Card(sql.FieldContains(FieldMemberCode, v))
}

// MemberCodeHasPrefix applies the HasPrefix predicate on the "member_code" field.
func MemberCodeHasPrefix(v string) predicate.Card {
	return predicate.Card(sql.FieldHasPrefix(FieldMemberCode, v))
}

// MemberCodeHasSuffix applies the HasSuffix predicate on the "member_code" field.
func MemberCodeHasSuffix(v string) predicate.Card {
	return predicate.Card(sql.FieldHasSuffix(FieldMemberCode, v))
}

// MemberCodeEqualFold applies the EqualFold predicate on the "member_code" field.
func MemberCodeEqualFold(v string) predicate.Card {
	return predicate.Card(sql.FieldEqualFold(FieldMemberCode, v))
}

// MemberCodeContainsFold applies the ContainsFold predicate on the "member_code" field.
func MemberCodeContainsFold(v string) predicate.Card {
	return predicate.Card(sql.FieldContainsFold(FieldMemberCode, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v int) predicate.Card {
	return predicate.Card(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v int) predicate.Card {
	return predicate.Card(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...int) predicate.Card {
	return predicate.Card(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...int) predicate.Card {
	return predicate.Card(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v int) predicate.Card {
	return predicate.Card(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v int) predicate.Card {
	return predicate.Card(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v int) predicate.Card {
	return predicate.Card(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v int) predicate.Card {
	return predicate.Card(sql.FieldLTE(FieldType, v))
}

// BalanceEQ applies the EQ predicate on the "balance" field.
func BalanceEQ(v int) predicate.Card {
	return predicate.Card(sql.FieldEQ(FieldBalance, v))
}

// BalanceNEQ applies the NEQ predicate on the "balance" field.
func BalanceNEQ(v int) predicate.Card {
	return predicate.Card(sql.FieldNEQ(FieldBalance, v))
}

// BalanceIn applies the In predicate on the "balance" field.
func BalanceIn(vs ...int) predicate.Card {
	return predicate.Card(sql.FieldIn(FieldBalance, vs...))
}

// BalanceNotIn applies the NotIn predicate on the "balance" field.
func BalanceNotIn(vs ...int) predicate.Card {
	return predicate.Card(sql.FieldNotIn(FieldBalance, vs...))
}

// BalanceGT applies the GT predicate on the "balance" field.
func BalanceGT(v int) predicate.Card {
	return predicate.Card(sql.FieldGT(FieldBalance, v))
}

// BalanceGTE applies the GTE predicate on the "balance" field.
func BalanceGTE(v int) predicate.Card {
	return predicate.Card(sql.FieldGTE(FieldBalance, v))
}

// BalanceLT applies the LT predicate on the "balance" field.
func BalanceLT(v int) predicate.Card {
	return predicate.Card(sql.FieldLT(FieldBalance, v))
}

// BalanceLTE applies the LTE predicate on the "balance" field.
func BalanceLTE(v int) predicate.Card {
	return predicate.Card(sql.FieldLTE(FieldBalance, v))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v int) predicate.Card {
	return predicate.Card(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v int) predicate.Card {
	return predicate.Card(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...int) predicate.Card {
	return predicate.Card(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...int) predicate.Card {
	return predicate.Card(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v int) predicate.Card {
	return predicate.Card(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v int) predicate.Card {
	return predicate.Card(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v int) predicate.Card {
	return predicate.Card(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v int) predicate.Card {
	return predicate.Card(sql.FieldLTE(FieldAmount, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int) predicate.Card {
	return predicate.Card(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int) predicate.Card {
	return predicate.Card(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int) predicate.Card {
	return predicate.Card(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int) predicate.Card {
	return predicate.Card(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int) predicate.Card {
	return predicate.Card(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int) predicate.Card {
	return predicate.Card(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int) predicate.Card {
	return predicate.Card(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int) predicate.Card {
	return predicate.Card(sql.FieldLTE(FieldStatus, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Card) predicate.Card {
	return predicate.Card(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Card) predicate.Card {
	return predicate.Card(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Card) predicate.Card {
	return predicate.Card(sql.NotPredicates(p))
}
