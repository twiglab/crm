// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/twiglab/crm/card/orm/ent/chargerecord"
)

// ChargeRecordCreate is the builder for creating a ChargeRecord entity.
type ChargeRecordCreate struct {
	config
	mutation *ChargeRecordMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (crc *ChargeRecordCreate) SetCreateTime(t time.Time) *ChargeRecordCreate {
	crc.mutation.SetCreateTime(t)
	return crc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (crc *ChargeRecordCreate) SetNillableCreateTime(t *time.Time) *ChargeRecordCreate {
	if t != nil {
		crc.SetCreateTime(*t)
	}
	return crc
}

// SetUpdateTime sets the "update_time" field.
func (crc *ChargeRecordCreate) SetUpdateTime(t time.Time) *ChargeRecordCreate {
	crc.mutation.SetUpdateTime(t)
	return crc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (crc *ChargeRecordCreate) SetNillableUpdateTime(t *time.Time) *ChargeRecordCreate {
	if t != nil {
		crc.SetUpdateTime(*t)
	}
	return crc
}

// SetCode sets the "code" field.
func (crc *ChargeRecordCreate) SetCode(s string) *ChargeRecordCreate {
	crc.mutation.SetCode(s)
	return crc
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (crc *ChargeRecordCreate) SetNillableCode(s *string) *ChargeRecordCreate {
	if s != nil {
		crc.SetCode(*s)
	}
	return crc
}

// SetPayCode sets the "pay_code" field.
func (crc *ChargeRecordCreate) SetPayCode(s string) *ChargeRecordCreate {
	crc.mutation.SetPayCode(s)
	return crc
}

// SetPayTs sets the "pay_ts" field.
func (crc *ChargeRecordCreate) SetPayTs(i int64) *ChargeRecordCreate {
	crc.mutation.SetPayTs(i)
	return crc
}

// SetNillablePayTs sets the "pay_ts" field if the given value is not nil.
func (crc *ChargeRecordCreate) SetNillablePayTs(i *int64) *ChargeRecordCreate {
	if i != nil {
		crc.SetPayTs(*i)
	}
	return crc
}

// SetDeduct sets the "deduct" field.
func (crc *ChargeRecordCreate) SetDeduct(i int64) *ChargeRecordCreate {
	crc.mutation.SetDeduct(i)
	return crc
}

// SetNillableDeduct sets the "deduct" field if the given value is not nil.
func (crc *ChargeRecordCreate) SetNillableDeduct(i *int64) *ChargeRecordCreate {
	if i != nil {
		crc.SetDeduct(*i)
	}
	return crc
}

// SetCardCode sets the "card_code" field.
func (crc *ChargeRecordCreate) SetCardCode(s string) *ChargeRecordCreate {
	crc.mutation.SetCardCode(s)
	return crc
}

// SetStatus sets the "status" field.
func (crc *ChargeRecordCreate) SetStatus(i int) *ChargeRecordCreate {
	crc.mutation.SetStatus(i)
	return crc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (crc *ChargeRecordCreate) SetNillableStatus(i *int) *ChargeRecordCreate {
	if i != nil {
		crc.SetStatus(*i)
	}
	return crc
}

// Mutation returns the ChargeRecordMutation object of the builder.
func (crc *ChargeRecordCreate) Mutation() *ChargeRecordMutation {
	return crc.mutation
}

// Save creates the ChargeRecord in the database.
func (crc *ChargeRecordCreate) Save(ctx context.Context) (*ChargeRecord, error) {
	crc.defaults()
	return withHooks(ctx, crc.sqlSave, crc.mutation, crc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (crc *ChargeRecordCreate) SaveX(ctx context.Context) *ChargeRecord {
	v, err := crc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (crc *ChargeRecordCreate) Exec(ctx context.Context) error {
	_, err := crc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (crc *ChargeRecordCreate) ExecX(ctx context.Context) {
	if err := crc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (crc *ChargeRecordCreate) defaults() {
	if _, ok := crc.mutation.CreateTime(); !ok {
		v := chargerecord.DefaultCreateTime()
		crc.mutation.SetCreateTime(v)
	}
	if _, ok := crc.mutation.UpdateTime(); !ok {
		v := chargerecord.DefaultUpdateTime()
		crc.mutation.SetUpdateTime(v)
	}
	if _, ok := crc.mutation.Code(); !ok {
		v := chargerecord.DefaultCode()
		crc.mutation.SetCode(v)
	}
	if _, ok := crc.mutation.PayTs(); !ok {
		v := chargerecord.DefaultPayTs
		crc.mutation.SetPayTs(v)
	}
	if _, ok := crc.mutation.Deduct(); !ok {
		v := chargerecord.DefaultDeduct
		crc.mutation.SetDeduct(v)
	}
	if _, ok := crc.mutation.Status(); !ok {
		v := chargerecord.DefaultStatus
		crc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (crc *ChargeRecordCreate) check() error {
	if _, ok := crc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "ChargeRecord.create_time"`)}
	}
	if _, ok := crc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "ChargeRecord.update_time"`)}
	}
	if _, ok := crc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "ChargeRecord.code"`)}
	}
	if v, ok := crc.mutation.Code(); ok {
		if err := chargerecord.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "ChargeRecord.code": %w`, err)}
		}
	}
	if _, ok := crc.mutation.PayCode(); !ok {
		return &ValidationError{Name: "pay_code", err: errors.New(`ent: missing required field "ChargeRecord.pay_code"`)}
	}
	if v, ok := crc.mutation.PayCode(); ok {
		if err := chargerecord.PayCodeValidator(v); err != nil {
			return &ValidationError{Name: "pay_code", err: fmt.Errorf(`ent: validator failed for field "ChargeRecord.pay_code": %w`, err)}
		}
	}
	if _, ok := crc.mutation.PayTs(); !ok {
		return &ValidationError{Name: "pay_ts", err: errors.New(`ent: missing required field "ChargeRecord.pay_ts"`)}
	}
	if _, ok := crc.mutation.Deduct(); !ok {
		return &ValidationError{Name: "deduct", err: errors.New(`ent: missing required field "ChargeRecord.deduct"`)}
	}
	if _, ok := crc.mutation.CardCode(); !ok {
		return &ValidationError{Name: "card_code", err: errors.New(`ent: missing required field "ChargeRecord.card_code"`)}
	}
	if v, ok := crc.mutation.CardCode(); ok {
		if err := chargerecord.CardCodeValidator(v); err != nil {
			return &ValidationError{Name: "card_code", err: fmt.Errorf(`ent: validator failed for field "ChargeRecord.card_code": %w`, err)}
		}
	}
	if _, ok := crc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "ChargeRecord.status"`)}
	}
	return nil
}

func (crc *ChargeRecordCreate) sqlSave(ctx context.Context) (*ChargeRecord, error) {
	if err := crc.check(); err != nil {
		return nil, err
	}
	_node, _spec := crc.createSpec()
	if err := sqlgraph.CreateNode(ctx, crc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	crc.mutation.id = &_node.ID
	crc.mutation.done = true
	return _node, nil
}

func (crc *ChargeRecordCreate) createSpec() (*ChargeRecord, *sqlgraph.CreateSpec) {
	var (
		_node = &ChargeRecord{config: crc.config}
		_spec = sqlgraph.NewCreateSpec(chargerecord.Table, sqlgraph.NewFieldSpec(chargerecord.FieldID, field.TypeInt))
	)
	_spec.OnConflict = crc.conflict
	if value, ok := crc.mutation.CreateTime(); ok {
		_spec.SetField(chargerecord.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := crc.mutation.UpdateTime(); ok {
		_spec.SetField(chargerecord.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := crc.mutation.Code(); ok {
		_spec.SetField(chargerecord.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := crc.mutation.PayCode(); ok {
		_spec.SetField(chargerecord.FieldPayCode, field.TypeString, value)
		_node.PayCode = value
	}
	if value, ok := crc.mutation.PayTs(); ok {
		_spec.SetField(chargerecord.FieldPayTs, field.TypeInt64, value)
		_node.PayTs = value
	}
	if value, ok := crc.mutation.Deduct(); ok {
		_spec.SetField(chargerecord.FieldDeduct, field.TypeInt64, value)
		_node.Deduct = value
	}
	if value, ok := crc.mutation.CardCode(); ok {
		_spec.SetField(chargerecord.FieldCardCode, field.TypeString, value)
		_node.CardCode = value
	}
	if value, ok := crc.mutation.Status(); ok {
		_spec.SetField(chargerecord.FieldStatus, field.TypeInt, value)
		_node.Status = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ChargeRecord.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ChargeRecordUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (crc *ChargeRecordCreate) OnConflict(opts ...sql.ConflictOption) *ChargeRecordUpsertOne {
	crc.conflict = opts
	return &ChargeRecordUpsertOne{
		create: crc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ChargeRecord.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (crc *ChargeRecordCreate) OnConflictColumns(columns ...string) *ChargeRecordUpsertOne {
	crc.conflict = append(crc.conflict, sql.ConflictColumns(columns...))
	return &ChargeRecordUpsertOne{
		create: crc,
	}
}

type (
	// ChargeRecordUpsertOne is the builder for "upsert"-ing
	//  one ChargeRecord node.
	ChargeRecordUpsertOne struct {
		create *ChargeRecordCreate
	}

	// ChargeRecordUpsert is the "OnConflict" setter.
	ChargeRecordUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *ChargeRecordUpsert) SetUpdateTime(v time.Time) *ChargeRecordUpsert {
	u.Set(chargerecord.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *ChargeRecordUpsert) UpdateUpdateTime() *ChargeRecordUpsert {
	u.SetExcluded(chargerecord.FieldUpdateTime)
	return u
}

// SetPayCode sets the "pay_code" field.
func (u *ChargeRecordUpsert) SetPayCode(v string) *ChargeRecordUpsert {
	u.Set(chargerecord.FieldPayCode, v)
	return u
}

// UpdatePayCode sets the "pay_code" field to the value that was provided on create.
func (u *ChargeRecordUpsert) UpdatePayCode() *ChargeRecordUpsert {
	u.SetExcluded(chargerecord.FieldPayCode)
	return u
}

// SetPayTs sets the "pay_ts" field.
func (u *ChargeRecordUpsert) SetPayTs(v int64) *ChargeRecordUpsert {
	u.Set(chargerecord.FieldPayTs, v)
	return u
}

// UpdatePayTs sets the "pay_ts" field to the value that was provided on create.
func (u *ChargeRecordUpsert) UpdatePayTs() *ChargeRecordUpsert {
	u.SetExcluded(chargerecord.FieldPayTs)
	return u
}

// AddPayTs adds v to the "pay_ts" field.
func (u *ChargeRecordUpsert) AddPayTs(v int64) *ChargeRecordUpsert {
	u.Add(chargerecord.FieldPayTs, v)
	return u
}

// SetDeduct sets the "deduct" field.
func (u *ChargeRecordUpsert) SetDeduct(v int64) *ChargeRecordUpsert {
	u.Set(chargerecord.FieldDeduct, v)
	return u
}

// UpdateDeduct sets the "deduct" field to the value that was provided on create.
func (u *ChargeRecordUpsert) UpdateDeduct() *ChargeRecordUpsert {
	u.SetExcluded(chargerecord.FieldDeduct)
	return u
}

// AddDeduct adds v to the "deduct" field.
func (u *ChargeRecordUpsert) AddDeduct(v int64) *ChargeRecordUpsert {
	u.Add(chargerecord.FieldDeduct, v)
	return u
}

// SetStatus sets the "status" field.
func (u *ChargeRecordUpsert) SetStatus(v int) *ChargeRecordUpsert {
	u.Set(chargerecord.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ChargeRecordUpsert) UpdateStatus() *ChargeRecordUpsert {
	u.SetExcluded(chargerecord.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *ChargeRecordUpsert) AddStatus(v int) *ChargeRecordUpsert {
	u.Add(chargerecord.FieldStatus, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.ChargeRecord.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ChargeRecordUpsertOne) UpdateNewValues() *ChargeRecordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(chargerecord.FieldCreateTime)
		}
		if _, exists := u.create.mutation.Code(); exists {
			s.SetIgnore(chargerecord.FieldCode)
		}
		if _, exists := u.create.mutation.CardCode(); exists {
			s.SetIgnore(chargerecord.FieldCardCode)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ChargeRecord.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ChargeRecordUpsertOne) Ignore() *ChargeRecordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ChargeRecordUpsertOne) DoNothing() *ChargeRecordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ChargeRecordCreate.OnConflict
// documentation for more info.
func (u *ChargeRecordUpsertOne) Update(set func(*ChargeRecordUpsert)) *ChargeRecordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ChargeRecordUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *ChargeRecordUpsertOne) SetUpdateTime(v time.Time) *ChargeRecordUpsertOne {
	return u.Update(func(s *ChargeRecordUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *ChargeRecordUpsertOne) UpdateUpdateTime() *ChargeRecordUpsertOne {
	return u.Update(func(s *ChargeRecordUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetPayCode sets the "pay_code" field.
func (u *ChargeRecordUpsertOne) SetPayCode(v string) *ChargeRecordUpsertOne {
	return u.Update(func(s *ChargeRecordUpsert) {
		s.SetPayCode(v)
	})
}

// UpdatePayCode sets the "pay_code" field to the value that was provided on create.
func (u *ChargeRecordUpsertOne) UpdatePayCode() *ChargeRecordUpsertOne {
	return u.Update(func(s *ChargeRecordUpsert) {
		s.UpdatePayCode()
	})
}

// SetPayTs sets the "pay_ts" field.
func (u *ChargeRecordUpsertOne) SetPayTs(v int64) *ChargeRecordUpsertOne {
	return u.Update(func(s *ChargeRecordUpsert) {
		s.SetPayTs(v)
	})
}

// AddPayTs adds v to the "pay_ts" field.
func (u *ChargeRecordUpsertOne) AddPayTs(v int64) *ChargeRecordUpsertOne {
	return u.Update(func(s *ChargeRecordUpsert) {
		s.AddPayTs(v)
	})
}

// UpdatePayTs sets the "pay_ts" field to the value that was provided on create.
func (u *ChargeRecordUpsertOne) UpdatePayTs() *ChargeRecordUpsertOne {
	return u.Update(func(s *ChargeRecordUpsert) {
		s.UpdatePayTs()
	})
}

// SetDeduct sets the "deduct" field.
func (u *ChargeRecordUpsertOne) SetDeduct(v int64) *ChargeRecordUpsertOne {
	return u.Update(func(s *ChargeRecordUpsert) {
		s.SetDeduct(v)
	})
}

// AddDeduct adds v to the "deduct" field.
func (u *ChargeRecordUpsertOne) AddDeduct(v int64) *ChargeRecordUpsertOne {
	return u.Update(func(s *ChargeRecordUpsert) {
		s.AddDeduct(v)
	})
}

// UpdateDeduct sets the "deduct" field to the value that was provided on create.
func (u *ChargeRecordUpsertOne) UpdateDeduct() *ChargeRecordUpsertOne {
	return u.Update(func(s *ChargeRecordUpsert) {
		s.UpdateDeduct()
	})
}

// SetStatus sets the "status" field.
func (u *ChargeRecordUpsertOne) SetStatus(v int) *ChargeRecordUpsertOne {
	return u.Update(func(s *ChargeRecordUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *ChargeRecordUpsertOne) AddStatus(v int) *ChargeRecordUpsertOne {
	return u.Update(func(s *ChargeRecordUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ChargeRecordUpsertOne) UpdateStatus() *ChargeRecordUpsertOne {
	return u.Update(func(s *ChargeRecordUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *ChargeRecordUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ChargeRecordCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ChargeRecordUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ChargeRecordUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ChargeRecordUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ChargeRecordCreateBulk is the builder for creating many ChargeRecord entities in bulk.
type ChargeRecordCreateBulk struct {
	config
	err      error
	builders []*ChargeRecordCreate
	conflict []sql.ConflictOption
}

// Save creates the ChargeRecord entities in the database.
func (crcb *ChargeRecordCreateBulk) Save(ctx context.Context) ([]*ChargeRecord, error) {
	if crcb.err != nil {
		return nil, crcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(crcb.builders))
	nodes := make([]*ChargeRecord, len(crcb.builders))
	mutators := make([]Mutator, len(crcb.builders))
	for i := range crcb.builders {
		func(i int, root context.Context) {
			builder := crcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ChargeRecordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, crcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = crcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, crcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, crcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (crcb *ChargeRecordCreateBulk) SaveX(ctx context.Context) []*ChargeRecord {
	v, err := crcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (crcb *ChargeRecordCreateBulk) Exec(ctx context.Context) error {
	_, err := crcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (crcb *ChargeRecordCreateBulk) ExecX(ctx context.Context) {
	if err := crcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ChargeRecord.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ChargeRecordUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (crcb *ChargeRecordCreateBulk) OnConflict(opts ...sql.ConflictOption) *ChargeRecordUpsertBulk {
	crcb.conflict = opts
	return &ChargeRecordUpsertBulk{
		create: crcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ChargeRecord.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (crcb *ChargeRecordCreateBulk) OnConflictColumns(columns ...string) *ChargeRecordUpsertBulk {
	crcb.conflict = append(crcb.conflict, sql.ConflictColumns(columns...))
	return &ChargeRecordUpsertBulk{
		create: crcb,
	}
}

// ChargeRecordUpsertBulk is the builder for "upsert"-ing
// a bulk of ChargeRecord nodes.
type ChargeRecordUpsertBulk struct {
	create *ChargeRecordCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ChargeRecord.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ChargeRecordUpsertBulk) UpdateNewValues() *ChargeRecordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(chargerecord.FieldCreateTime)
			}
			if _, exists := b.mutation.Code(); exists {
				s.SetIgnore(chargerecord.FieldCode)
			}
			if _, exists := b.mutation.CardCode(); exists {
				s.SetIgnore(chargerecord.FieldCardCode)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ChargeRecord.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ChargeRecordUpsertBulk) Ignore() *ChargeRecordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ChargeRecordUpsertBulk) DoNothing() *ChargeRecordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ChargeRecordCreateBulk.OnConflict
// documentation for more info.
func (u *ChargeRecordUpsertBulk) Update(set func(*ChargeRecordUpsert)) *ChargeRecordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ChargeRecordUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *ChargeRecordUpsertBulk) SetUpdateTime(v time.Time) *ChargeRecordUpsertBulk {
	return u.Update(func(s *ChargeRecordUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *ChargeRecordUpsertBulk) UpdateUpdateTime() *ChargeRecordUpsertBulk {
	return u.Update(func(s *ChargeRecordUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetPayCode sets the "pay_code" field.
func (u *ChargeRecordUpsertBulk) SetPayCode(v string) *ChargeRecordUpsertBulk {
	return u.Update(func(s *ChargeRecordUpsert) {
		s.SetPayCode(v)
	})
}

// UpdatePayCode sets the "pay_code" field to the value that was provided on create.
func (u *ChargeRecordUpsertBulk) UpdatePayCode() *ChargeRecordUpsertBulk {
	return u.Update(func(s *ChargeRecordUpsert) {
		s.UpdatePayCode()
	})
}

// SetPayTs sets the "pay_ts" field.
func (u *ChargeRecordUpsertBulk) SetPayTs(v int64) *ChargeRecordUpsertBulk {
	return u.Update(func(s *ChargeRecordUpsert) {
		s.SetPayTs(v)
	})
}

// AddPayTs adds v to the "pay_ts" field.
func (u *ChargeRecordUpsertBulk) AddPayTs(v int64) *ChargeRecordUpsertBulk {
	return u.Update(func(s *ChargeRecordUpsert) {
		s.AddPayTs(v)
	})
}

// UpdatePayTs sets the "pay_ts" field to the value that was provided on create.
func (u *ChargeRecordUpsertBulk) UpdatePayTs() *ChargeRecordUpsertBulk {
	return u.Update(func(s *ChargeRecordUpsert) {
		s.UpdatePayTs()
	})
}

// SetDeduct sets the "deduct" field.
func (u *ChargeRecordUpsertBulk) SetDeduct(v int64) *ChargeRecordUpsertBulk {
	return u.Update(func(s *ChargeRecordUpsert) {
		s.SetDeduct(v)
	})
}

// AddDeduct adds v to the "deduct" field.
func (u *ChargeRecordUpsertBulk) AddDeduct(v int64) *ChargeRecordUpsertBulk {
	return u.Update(func(s *ChargeRecordUpsert) {
		s.AddDeduct(v)
	})
}

// UpdateDeduct sets the "deduct" field to the value that was provided on create.
func (u *ChargeRecordUpsertBulk) UpdateDeduct() *ChargeRecordUpsertBulk {
	return u.Update(func(s *ChargeRecordUpsert) {
		s.UpdateDeduct()
	})
}

// SetStatus sets the "status" field.
func (u *ChargeRecordUpsertBulk) SetStatus(v int) *ChargeRecordUpsertBulk {
	return u.Update(func(s *ChargeRecordUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *ChargeRecordUpsertBulk) AddStatus(v int) *ChargeRecordUpsertBulk {
	return u.Update(func(s *ChargeRecordUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ChargeRecordUpsertBulk) UpdateStatus() *ChargeRecordUpsertBulk {
	return u.Update(func(s *ChargeRecordUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *ChargeRecordUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ChargeRecordCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ChargeRecordCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ChargeRecordUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
