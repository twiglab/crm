package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.63

import (
	"context"
	"fmt"

	"github.com/twiglab/crm/card/gql/graph/model"
)

// BindCard is the resolver for the bindCard field.
func (r *mutationResolver) BindCard(ctx context.Context, input model.BindCardReq) (*model.CardResp, error) {
	cobj, err := r.Client.CardBindMember(ctx, input.Code, input.MemberCode)
	if err != nil {
		return nil, err
	}

	return &model.CardResp{
		Code:          cobj.Code,
		CodeBin:       cobj.CardBin,
		Type:          cobj.Type,
		Pic1:          cobj.Pic1,
		Pic2:          cobj.Pic2,
		Amount:        int(cobj.Amount),
		MemberCode:    &input.MemberCode,
		LastCleanTime: nil,
		Status:        cobj.Status,
	}, nil
}

// ActiveCard is the resolver for the activeCard field.
func (r *mutationResolver) ActiveCard(ctx context.Context, input model.ActiveCardReq) (*model.CardResp, error) {
	cobj, err := r.Client.CardActive(ctx, input.Code)
	if err != nil {
		return nil, err
	}

	return &model.CardResp{
		Code:          cobj.Code,
		CodeBin:       cobj.CardBin,
		Type:          cobj.Type,
		Pic1:          cobj.Pic1,
		Pic2:          cobj.Pic2,
		Amount:        int(cobj.Amount),
		MemberCode:    &cobj.MemberCode,
		LastCleanTime: nil,
		Status:        cobj.Status,
	}, nil
}

// GetChargeRecordCode is the resolver for the getChargeRecordCode field.
func (r *mutationResolver) GetChargeRecordCode(ctx context.Context, input model.ChargeRecordCodeReq) (*model.ChargeRecordCodeResp, error) {
	cobj, err := r.Client.GetMenberCardDetailByCode(ctx, input.CardCode, input.MemberCode)
	if err != nil {
		return nil, err
	}
	if cobj.MemberCode != input.MemberCode {
		return nil, fmt.Errorf("card not binded to member")
	}

	pc, err := r.Client.GetPayCode(ctx, input.CardCode)
	if err != nil {
		return nil, err
	}

	return &model.ChargeRecordCodeResp{Code: pc}, nil
}

// UseChargeRecordCode is the resolver for the useChargeRecordCode field.
func (r *mutationResolver) UseChargeRecordCode(ctx context.Context, input model.UseRecordCodeReq) (*model.UseRecordCodResp, error) {
	err := r.Client.CardExpend(ctx, input.Code, int64(input.Consume))
	if err != nil {
		return nil, err
	}
	return &model.UseRecordCodResp{Op: true}, nil
}

// QueryCardDetail is the resolver for the queryCardDetail field.
func (r *queryResolver) QueryCardDetail(ctx context.Context, input *model.QueryCardByCode) (*model.CardResp, error) {
	cobj, err := r.Client.GetCardDetailByCode(ctx, input.Code)
	if err != nil {
		return nil, err
	}

	return &model.CardResp{
		Code:          cobj.Code,
		CodeBin:       cobj.CardBin,
		Type:          cobj.Type,
		Pic1:          cobj.Pic1,
		Pic2:          cobj.Pic2,
		Amount:        int(cobj.Amount),
		MemberCode:    &cobj.MemberCode,
		LastCleanTime: nil,
		Status:        cobj.Status,
	}, nil
}

// QueryCardList is the resolver for the queryCardList field.
func (r *queryResolver) QueryCardList(ctx context.Context, input *model.PaginationReq) ([]*model.CardResp, error) {
	cobjs, err := r.Client.GetCardListPagin(ctx, input.Cursor, input.Order, input.Limit)
	if err != nil {
		return nil, err
	}

	var rets []*model.CardResp
	for _, cobj := range cobjs {
		obj := &model.CardResp{
			Code:          cobj.Code,
			CodeBin:       cobj.CardBin,
			Type:          cobj.Type,
			Pic1:          cobj.Pic1,
			Pic2:          cobj.Pic2,
			Amount:        int(cobj.Amount),
			MemberCode:    &cobj.MemberCode,
			LastCleanTime: nil,
			Status:        cobj.Status,
		}
		rets = append(rets, obj)
	}

	return rets, nil
}

// QueryCardByMemberCode is the resolver for the queryCardByMemberCode field.
func (r *queryResolver) QueryCardByMemberCode(ctx context.Context, input *model.QueryCardByMemberCode) ([]*model.CardResp, error) {
	cobjs, err := r.Client.GetAllCardByMember(ctx, input.MemberCode)
	if err != nil {
		return nil, err
	}

	var rets []*model.CardResp
	for _, cobj := range cobjs {
		obj := &model.CardResp{
			Code:       cobj.Code,
			CodeBin:    cobj.CardBin,
			MemberCode: &cobj.MemberCode,
			Type:       cobj.Type,
			Amount:     int(cobj.Amount),
		}
		rets = append(rets, obj)
	}
	return rets, nil
}

// QueryCardBalance is the resolver for the queryCardBalance field.
func (r *queryResolver) QueryCardBalance(ctx context.Context, input *model.QueryCardBalanceReq) (int, error) {
	balance, err := r.Client.GetBalance(ctx, input.CardCode, input.MemberCode)
	if err != nil {
		return 0, err
	}
	return int(balance), nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
