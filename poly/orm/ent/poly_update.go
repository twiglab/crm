// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/twiglab/crm/poly/orm/ent/poly"
	"github.com/twiglab/crm/poly/orm/ent/predicate"
)

// PolyUpdate is the builder for updating Poly entities.
type PolyUpdate struct {
	config
	hooks    []Hook
	mutation *PolyMutation
}

// Where appends a list predicates to the PolyUpdate builder.
func (pu *PolyUpdate) Where(ps ...predicate.Poly) *PolyUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetOperator sets the "operator" field.
func (pu *PolyUpdate) SetOperator(s string) *PolyUpdate {
	pu.mutation.SetOperator(s)
	return pu
}

// SetNillableOperator sets the "operator" field if the given value is not nil.
func (pu *PolyUpdate) SetNillableOperator(s *string) *PolyUpdate {
	if s != nil {
		pu.SetOperator(*s)
	}
	return pu
}

// SetRuleCode sets the "rule_code" field.
func (pu *PolyUpdate) SetRuleCode(s string) *PolyUpdate {
	pu.mutation.SetRuleCode(s)
	return pu
}

// SetNillableRuleCode sets the "rule_code" field if the given value is not nil.
func (pu *PolyUpdate) SetNillableRuleCode(s *string) *PolyUpdate {
	if s != nil {
		pu.SetRuleCode(*s)
	}
	return pu
}

// SetActivityName sets the "activity_name" field.
func (pu *PolyUpdate) SetActivityName(s string) *PolyUpdate {
	pu.mutation.SetActivityName(s)
	return pu
}

// SetNillableActivityName sets the "activity_name" field if the given value is not nil.
func (pu *PolyUpdate) SetNillableActivityName(s *string) *PolyUpdate {
	if s != nil {
		pu.SetActivityName(*s)
	}
	return pu
}

// SetActivityDesc sets the "activity_desc" field.
func (pu *PolyUpdate) SetActivityDesc(s string) *PolyUpdate {
	pu.mutation.SetActivityDesc(s)
	return pu
}

// SetNillableActivityDesc sets the "activity_desc" field if the given value is not nil.
func (pu *PolyUpdate) SetNillableActivityDesc(s *string) *PolyUpdate {
	if s != nil {
		pu.SetActivityDesc(*s)
	}
	return pu
}

// SetActivityBudget sets the "activity_budget" field.
func (pu *PolyUpdate) SetActivityBudget(i int64) *PolyUpdate {
	pu.mutation.ResetActivityBudget()
	pu.mutation.SetActivityBudget(i)
	return pu
}

// SetNillableActivityBudget sets the "activity_budget" field if the given value is not nil.
func (pu *PolyUpdate) SetNillableActivityBudget(i *int64) *PolyUpdate {
	if i != nil {
		pu.SetActivityBudget(*i)
	}
	return pu
}

// AddActivityBudget adds i to the "activity_budget" field.
func (pu *PolyUpdate) AddActivityBudget(i int64) *PolyUpdate {
	pu.mutation.AddActivityBudget(i)
	return pu
}

// SetActivityStartTime sets the "activity_start_time" field.
func (pu *PolyUpdate) SetActivityStartTime(t time.Time) *PolyUpdate {
	pu.mutation.SetActivityStartTime(t)
	return pu
}

// SetNillableActivityStartTime sets the "activity_start_time" field if the given value is not nil.
func (pu *PolyUpdate) SetNillableActivityStartTime(t *time.Time) *PolyUpdate {
	if t != nil {
		pu.SetActivityStartTime(*t)
	}
	return pu
}

// SetActivityEndTime sets the "activity_end_time" field.
func (pu *PolyUpdate) SetActivityEndTime(t time.Time) *PolyUpdate {
	pu.mutation.SetActivityEndTime(t)
	return pu
}

// SetNillableActivityEndTime sets the "activity_end_time" field if the given value is not nil.
func (pu *PolyUpdate) SetNillableActivityEndTime(t *time.Time) *PolyUpdate {
	if t != nil {
		pu.SetActivityEndTime(*t)
	}
	return pu
}

// SetActivityStatus sets the "activity_status" field.
func (pu *PolyUpdate) SetActivityStatus(i int) *PolyUpdate {
	pu.mutation.ResetActivityStatus()
	pu.mutation.SetActivityStatus(i)
	return pu
}

// SetNillableActivityStatus sets the "activity_status" field if the given value is not nil.
func (pu *PolyUpdate) SetNillableActivityStatus(i *int) *PolyUpdate {
	if i != nil {
		pu.SetActivityStatus(*i)
	}
	return pu
}

// AddActivityStatus adds i to the "activity_status" field.
func (pu *PolyUpdate) AddActivityStatus(i int) *PolyUpdate {
	pu.mutation.AddActivityStatus(i)
	return pu
}

// SetActivityType sets the "activity_type" field.
func (pu *PolyUpdate) SetActivityType(i int) *PolyUpdate {
	pu.mutation.ResetActivityType()
	pu.mutation.SetActivityType(i)
	return pu
}

// SetNillableActivityType sets the "activity_type" field if the given value is not nil.
func (pu *PolyUpdate) SetNillableActivityType(i *int) *PolyUpdate {
	if i != nil {
		pu.SetActivityType(*i)
	}
	return pu
}

// AddActivityType adds i to the "activity_type" field.
func (pu *PolyUpdate) AddActivityType(i int) *PolyUpdate {
	pu.mutation.AddActivityType(i)
	return pu
}

// Mutation returns the PolyMutation object of the builder.
func (pu *PolyUpdate) Mutation() *PolyMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PolyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PolyUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PolyUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PolyUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PolyUpdate) check() error {
	if v, ok := pu.mutation.Operator(); ok {
		if err := poly.OperatorValidator(v); err != nil {
			return &ValidationError{Name: "operator", err: fmt.Errorf(`ent: validator failed for field "Poly.operator": %w`, err)}
		}
	}
	if v, ok := pu.mutation.RuleCode(); ok {
		if err := poly.RuleCodeValidator(v); err != nil {
			return &ValidationError{Name: "rule_code", err: fmt.Errorf(`ent: validator failed for field "Poly.rule_code": %w`, err)}
		}
	}
	if v, ok := pu.mutation.ActivityName(); ok {
		if err := poly.ActivityNameValidator(v); err != nil {
			return &ValidationError{Name: "activity_name", err: fmt.Errorf(`ent: validator failed for field "Poly.activity_name": %w`, err)}
		}
	}
	if v, ok := pu.mutation.ActivityDesc(); ok {
		if err := poly.ActivityDescValidator(v); err != nil {
			return &ValidationError{Name: "activity_desc", err: fmt.Errorf(`ent: validator failed for field "Poly.activity_desc": %w`, err)}
		}
	}
	return nil
}

func (pu *PolyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(poly.Table, poly.Columns, sqlgraph.NewFieldSpec(poly.FieldID, field.TypeUUID))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Operator(); ok {
		_spec.SetField(poly.FieldOperator, field.TypeString, value)
	}
	if value, ok := pu.mutation.RuleCode(); ok {
		_spec.SetField(poly.FieldRuleCode, field.TypeString, value)
	}
	if value, ok := pu.mutation.ActivityName(); ok {
		_spec.SetField(poly.FieldActivityName, field.TypeString, value)
	}
	if value, ok := pu.mutation.ActivityDesc(); ok {
		_spec.SetField(poly.FieldActivityDesc, field.TypeString, value)
	}
	if value, ok := pu.mutation.ActivityBudget(); ok {
		_spec.SetField(poly.FieldActivityBudget, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedActivityBudget(); ok {
		_spec.AddField(poly.FieldActivityBudget, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.ActivityStartTime(); ok {
		_spec.SetField(poly.FieldActivityStartTime, field.TypeTime, value)
	}
	if value, ok := pu.mutation.ActivityEndTime(); ok {
		_spec.SetField(poly.FieldActivityEndTime, field.TypeTime, value)
	}
	if value, ok := pu.mutation.ActivityStatus(); ok {
		_spec.SetField(poly.FieldActivityStatus, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedActivityStatus(); ok {
		_spec.AddField(poly.FieldActivityStatus, field.TypeInt, value)
	}
	if value, ok := pu.mutation.ActivityType(); ok {
		_spec.SetField(poly.FieldActivityType, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedActivityType(); ok {
		_spec.AddField(poly.FieldActivityType, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{poly.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PolyUpdateOne is the builder for updating a single Poly entity.
type PolyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PolyMutation
}

// SetOperator sets the "operator" field.
func (puo *PolyUpdateOne) SetOperator(s string) *PolyUpdateOne {
	puo.mutation.SetOperator(s)
	return puo
}

// SetNillableOperator sets the "operator" field if the given value is not nil.
func (puo *PolyUpdateOne) SetNillableOperator(s *string) *PolyUpdateOne {
	if s != nil {
		puo.SetOperator(*s)
	}
	return puo
}

// SetRuleCode sets the "rule_code" field.
func (puo *PolyUpdateOne) SetRuleCode(s string) *PolyUpdateOne {
	puo.mutation.SetRuleCode(s)
	return puo
}

// SetNillableRuleCode sets the "rule_code" field if the given value is not nil.
func (puo *PolyUpdateOne) SetNillableRuleCode(s *string) *PolyUpdateOne {
	if s != nil {
		puo.SetRuleCode(*s)
	}
	return puo
}

// SetActivityName sets the "activity_name" field.
func (puo *PolyUpdateOne) SetActivityName(s string) *PolyUpdateOne {
	puo.mutation.SetActivityName(s)
	return puo
}

// SetNillableActivityName sets the "activity_name" field if the given value is not nil.
func (puo *PolyUpdateOne) SetNillableActivityName(s *string) *PolyUpdateOne {
	if s != nil {
		puo.SetActivityName(*s)
	}
	return puo
}

// SetActivityDesc sets the "activity_desc" field.
func (puo *PolyUpdateOne) SetActivityDesc(s string) *PolyUpdateOne {
	puo.mutation.SetActivityDesc(s)
	return puo
}

// SetNillableActivityDesc sets the "activity_desc" field if the given value is not nil.
func (puo *PolyUpdateOne) SetNillableActivityDesc(s *string) *PolyUpdateOne {
	if s != nil {
		puo.SetActivityDesc(*s)
	}
	return puo
}

// SetActivityBudget sets the "activity_budget" field.
func (puo *PolyUpdateOne) SetActivityBudget(i int64) *PolyUpdateOne {
	puo.mutation.ResetActivityBudget()
	puo.mutation.SetActivityBudget(i)
	return puo
}

// SetNillableActivityBudget sets the "activity_budget" field if the given value is not nil.
func (puo *PolyUpdateOne) SetNillableActivityBudget(i *int64) *PolyUpdateOne {
	if i != nil {
		puo.SetActivityBudget(*i)
	}
	return puo
}

// AddActivityBudget adds i to the "activity_budget" field.
func (puo *PolyUpdateOne) AddActivityBudget(i int64) *PolyUpdateOne {
	puo.mutation.AddActivityBudget(i)
	return puo
}

// SetActivityStartTime sets the "activity_start_time" field.
func (puo *PolyUpdateOne) SetActivityStartTime(t time.Time) *PolyUpdateOne {
	puo.mutation.SetActivityStartTime(t)
	return puo
}

// SetNillableActivityStartTime sets the "activity_start_time" field if the given value is not nil.
func (puo *PolyUpdateOne) SetNillableActivityStartTime(t *time.Time) *PolyUpdateOne {
	if t != nil {
		puo.SetActivityStartTime(*t)
	}
	return puo
}

// SetActivityEndTime sets the "activity_end_time" field.
func (puo *PolyUpdateOne) SetActivityEndTime(t time.Time) *PolyUpdateOne {
	puo.mutation.SetActivityEndTime(t)
	return puo
}

// SetNillableActivityEndTime sets the "activity_end_time" field if the given value is not nil.
func (puo *PolyUpdateOne) SetNillableActivityEndTime(t *time.Time) *PolyUpdateOne {
	if t != nil {
		puo.SetActivityEndTime(*t)
	}
	return puo
}

// SetActivityStatus sets the "activity_status" field.
func (puo *PolyUpdateOne) SetActivityStatus(i int) *PolyUpdateOne {
	puo.mutation.ResetActivityStatus()
	puo.mutation.SetActivityStatus(i)
	return puo
}

// SetNillableActivityStatus sets the "activity_status" field if the given value is not nil.
func (puo *PolyUpdateOne) SetNillableActivityStatus(i *int) *PolyUpdateOne {
	if i != nil {
		puo.SetActivityStatus(*i)
	}
	return puo
}

// AddActivityStatus adds i to the "activity_status" field.
func (puo *PolyUpdateOne) AddActivityStatus(i int) *PolyUpdateOne {
	puo.mutation.AddActivityStatus(i)
	return puo
}

// SetActivityType sets the "activity_type" field.
func (puo *PolyUpdateOne) SetActivityType(i int) *PolyUpdateOne {
	puo.mutation.ResetActivityType()
	puo.mutation.SetActivityType(i)
	return puo
}

// SetNillableActivityType sets the "activity_type" field if the given value is not nil.
func (puo *PolyUpdateOne) SetNillableActivityType(i *int) *PolyUpdateOne {
	if i != nil {
		puo.SetActivityType(*i)
	}
	return puo
}

// AddActivityType adds i to the "activity_type" field.
func (puo *PolyUpdateOne) AddActivityType(i int) *PolyUpdateOne {
	puo.mutation.AddActivityType(i)
	return puo
}

// Mutation returns the PolyMutation object of the builder.
func (puo *PolyUpdateOne) Mutation() *PolyMutation {
	return puo.mutation
}

// Where appends a list predicates to the PolyUpdate builder.
func (puo *PolyUpdateOne) Where(ps ...predicate.Poly) *PolyUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PolyUpdateOne) Select(field string, fields ...string) *PolyUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Poly entity.
func (puo *PolyUpdateOne) Save(ctx context.Context) (*Poly, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PolyUpdateOne) SaveX(ctx context.Context) *Poly {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PolyUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PolyUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PolyUpdateOne) check() error {
	if v, ok := puo.mutation.Operator(); ok {
		if err := poly.OperatorValidator(v); err != nil {
			return &ValidationError{Name: "operator", err: fmt.Errorf(`ent: validator failed for field "Poly.operator": %w`, err)}
		}
	}
	if v, ok := puo.mutation.RuleCode(); ok {
		if err := poly.RuleCodeValidator(v); err != nil {
			return &ValidationError{Name: "rule_code", err: fmt.Errorf(`ent: validator failed for field "Poly.rule_code": %w`, err)}
		}
	}
	if v, ok := puo.mutation.ActivityName(); ok {
		if err := poly.ActivityNameValidator(v); err != nil {
			return &ValidationError{Name: "activity_name", err: fmt.Errorf(`ent: validator failed for field "Poly.activity_name": %w`, err)}
		}
	}
	if v, ok := puo.mutation.ActivityDesc(); ok {
		if err := poly.ActivityDescValidator(v); err != nil {
			return &ValidationError{Name: "activity_desc", err: fmt.Errorf(`ent: validator failed for field "Poly.activity_desc": %w`, err)}
		}
	}
	return nil
}

func (puo *PolyUpdateOne) sqlSave(ctx context.Context) (_node *Poly, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(poly.Table, poly.Columns, sqlgraph.NewFieldSpec(poly.FieldID, field.TypeUUID))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Poly.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, poly.FieldID)
		for _, f := range fields {
			if !poly.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != poly.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Operator(); ok {
		_spec.SetField(poly.FieldOperator, field.TypeString, value)
	}
	if value, ok := puo.mutation.RuleCode(); ok {
		_spec.SetField(poly.FieldRuleCode, field.TypeString, value)
	}
	if value, ok := puo.mutation.ActivityName(); ok {
		_spec.SetField(poly.FieldActivityName, field.TypeString, value)
	}
	if value, ok := puo.mutation.ActivityDesc(); ok {
		_spec.SetField(poly.FieldActivityDesc, field.TypeString, value)
	}
	if value, ok := puo.mutation.ActivityBudget(); ok {
		_spec.SetField(poly.FieldActivityBudget, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedActivityBudget(); ok {
		_spec.AddField(poly.FieldActivityBudget, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.ActivityStartTime(); ok {
		_spec.SetField(poly.FieldActivityStartTime, field.TypeTime, value)
	}
	if value, ok := puo.mutation.ActivityEndTime(); ok {
		_spec.SetField(poly.FieldActivityEndTime, field.TypeTime, value)
	}
	if value, ok := puo.mutation.ActivityStatus(); ok {
		_spec.SetField(poly.FieldActivityStatus, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedActivityStatus(); ok {
		_spec.AddField(poly.FieldActivityStatus, field.TypeInt, value)
	}
	if value, ok := puo.mutation.ActivityType(); ok {
		_spec.SetField(poly.FieldActivityType, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedActivityType(); ok {
		_spec.AddField(poly.FieldActivityType, field.TypeInt, value)
	}
	_node = &Poly{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{poly.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
