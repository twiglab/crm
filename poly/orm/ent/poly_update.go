// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/twiglab/crm/poly/orm/ent/poly"
	"github.com/twiglab/crm/poly/orm/ent/predicate"
)

// PolyUpdate is the builder for updating Poly entities.
type PolyUpdate struct {
	config
	hooks    []Hook
	mutation *PolyMutation
}

// Where appends a list predicates to the PolyUpdate builder.
func (pu *PolyUpdate) Where(ps ...predicate.Poly) *PolyUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdateTime sets the "update_time" field.
func (pu *PolyUpdate) SetUpdateTime(t time.Time) *PolyUpdate {
	pu.mutation.SetUpdateTime(t)
	return pu
}

// SetName sets the "name" field.
func (pu *PolyUpdate) SetName(s string) *PolyUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *PolyUpdate) SetNillableName(s *string) *PolyUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetTitle sets the "title" field.
func (pu *PolyUpdate) SetTitle(s string) *PolyUpdate {
	pu.mutation.SetTitle(s)
	return pu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (pu *PolyUpdate) SetNillableTitle(s *string) *PolyUpdate {
	if s != nil {
		pu.SetTitle(*s)
	}
	return pu
}

// SetMemo sets the "memo" field.
func (pu *PolyUpdate) SetMemo(s string) *PolyUpdate {
	pu.mutation.SetMemo(s)
	return pu
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (pu *PolyUpdate) SetNillableMemo(s *string) *PolyUpdate {
	if s != nil {
		pu.SetMemo(*s)
	}
	return pu
}

// SetLogoPic sets the "logo_pic" field.
func (pu *PolyUpdate) SetLogoPic(s string) *PolyUpdate {
	pu.mutation.SetLogoPic(s)
	return pu
}

// SetNillableLogoPic sets the "logo_pic" field if the given value is not nil.
func (pu *PolyUpdate) SetNillableLogoPic(s *string) *PolyUpdate {
	if s != nil {
		pu.SetLogoPic(*s)
	}
	return pu
}

// SetPic1 sets the "pic1" field.
func (pu *PolyUpdate) SetPic1(s string) *PolyUpdate {
	pu.mutation.SetPic1(s)
	return pu
}

// SetNillablePic1 sets the "pic1" field if the given value is not nil.
func (pu *PolyUpdate) SetNillablePic1(s *string) *PolyUpdate {
	if s != nil {
		pu.SetPic1(*s)
	}
	return pu
}

// SetPic2 sets the "pic2" field.
func (pu *PolyUpdate) SetPic2(s string) *PolyUpdate {
	pu.mutation.SetPic2(s)
	return pu
}

// SetNillablePic2 sets the "pic2" field if the given value is not nil.
func (pu *PolyUpdate) SetNillablePic2(s *string) *PolyUpdate {
	if s != nil {
		pu.SetPic2(*s)
	}
	return pu
}

// SetPic3 sets the "pic3" field.
func (pu *PolyUpdate) SetPic3(s string) *PolyUpdate {
	pu.mutation.SetPic3(s)
	return pu
}

// SetNillablePic3 sets the "pic3" field if the given value is not nil.
func (pu *PolyUpdate) SetNillablePic3(s *string) *PolyUpdate {
	if s != nil {
		pu.SetPic3(*s)
	}
	return pu
}

// SetMenkan sets the "menkan" field.
func (pu *PolyUpdate) SetMenkan(s string) *PolyUpdate {
	pu.mutation.SetMenkan(s)
	return pu
}

// SetNillableMenkan sets the "menkan" field if the given value is not nil.
func (pu *PolyUpdate) SetNillableMenkan(s *string) *PolyUpdate {
	if s != nil {
		pu.SetMenkan(*s)
	}
	return pu
}

// SetFafang sets the "fafang" field.
func (pu *PolyUpdate) SetFafang(s string) *PolyUpdate {
	pu.mutation.SetFafang(s)
	return pu
}

// SetNillableFafang sets the "fafang" field if the given value is not nil.
func (pu *PolyUpdate) SetNillableFafang(s *string) *PolyUpdate {
	if s != nil {
		pu.SetFafang(*s)
	}
	return pu
}

// SetXiaoqi sets the "xiaoqi" field.
func (pu *PolyUpdate) SetXiaoqi(s string) *PolyUpdate {
	pu.mutation.SetXiaoqi(s)
	return pu
}

// SetNillableXiaoqi sets the "xiaoqi" field if the given value is not nil.
func (pu *PolyUpdate) SetNillableXiaoqi(s *string) *PolyUpdate {
	if s != nil {
		pu.SetXiaoqi(*s)
	}
	return pu
}

// SetShiyong sets the "shiyong" field.
func (pu *PolyUpdate) SetShiyong(s string) *PolyUpdate {
	pu.mutation.SetShiyong(s)
	return pu
}

// SetNillableShiyong sets the "shiyong" field if the given value is not nil.
func (pu *PolyUpdate) SetNillableShiyong(s *string) *PolyUpdate {
	if s != nil {
		pu.SetShiyong(*s)
	}
	return pu
}

// SetStatus sets the "status" field.
func (pu *PolyUpdate) SetStatus(i int32) *PolyUpdate {
	pu.mutation.ResetStatus()
	pu.mutation.SetStatus(i)
	return pu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pu *PolyUpdate) SetNillableStatus(i *int32) *PolyUpdate {
	if i != nil {
		pu.SetStatus(*i)
	}
	return pu
}

// AddStatus adds i to the "status" field.
func (pu *PolyUpdate) AddStatus(i int32) *PolyUpdate {
	pu.mutation.AddStatus(i)
	return pu
}

// SetType sets the "type" field.
func (pu *PolyUpdate) SetType(i int32) *PolyUpdate {
	pu.mutation.ResetType()
	pu.mutation.SetType(i)
	return pu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (pu *PolyUpdate) SetNillableType(i *int32) *PolyUpdate {
	if i != nil {
		pu.SetType(*i)
	}
	return pu
}

// AddType adds i to the "type" field.
func (pu *PolyUpdate) AddType(i int32) *PolyUpdate {
	pu.mutation.AddType(i)
	return pu
}

// Mutation returns the PolyMutation object of the builder.
func (pu *PolyUpdate) Mutation() *PolyMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PolyUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PolyUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PolyUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PolyUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PolyUpdate) defaults() {
	if _, ok := pu.mutation.UpdateTime(); !ok {
		v := poly.UpdateDefaultUpdateTime()
		pu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PolyUpdate) check() error {
	if v, ok := pu.mutation.Name(); ok {
		if err := poly.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Poly.name": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Title(); ok {
		if err := poly.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Poly.title": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Memo(); ok {
		if err := poly.MemoValidator(v); err != nil {
			return &ValidationError{Name: "memo", err: fmt.Errorf(`ent: validator failed for field "Poly.memo": %w`, err)}
		}
	}
	if v, ok := pu.mutation.LogoPic(); ok {
		if err := poly.LogoPicValidator(v); err != nil {
			return &ValidationError{Name: "logo_pic", err: fmt.Errorf(`ent: validator failed for field "Poly.logo_pic": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Pic1(); ok {
		if err := poly.Pic1Validator(v); err != nil {
			return &ValidationError{Name: "pic1", err: fmt.Errorf(`ent: validator failed for field "Poly.pic1": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Pic2(); ok {
		if err := poly.Pic2Validator(v); err != nil {
			return &ValidationError{Name: "pic2", err: fmt.Errorf(`ent: validator failed for field "Poly.pic2": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Pic3(); ok {
		if err := poly.Pic3Validator(v); err != nil {
			return &ValidationError{Name: "pic3", err: fmt.Errorf(`ent: validator failed for field "Poly.pic3": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Menkan(); ok {
		if err := poly.MenkanValidator(v); err != nil {
			return &ValidationError{Name: "menkan", err: fmt.Errorf(`ent: validator failed for field "Poly.menkan": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Fafang(); ok {
		if err := poly.FafangValidator(v); err != nil {
			return &ValidationError{Name: "fafang", err: fmt.Errorf(`ent: validator failed for field "Poly.fafang": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Xiaoqi(); ok {
		if err := poly.XiaoqiValidator(v); err != nil {
			return &ValidationError{Name: "xiaoqi", err: fmt.Errorf(`ent: validator failed for field "Poly.xiaoqi": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Shiyong(); ok {
		if err := poly.ShiyongValidator(v); err != nil {
			return &ValidationError{Name: "shiyong", err: fmt.Errorf(`ent: validator failed for field "Poly.shiyong": %w`, err)}
		}
	}
	return nil
}

func (pu *PolyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(poly.Table, poly.Columns, sqlgraph.NewFieldSpec(poly.FieldID, field.TypeUUID))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdateTime(); ok {
		_spec.SetField(poly.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(poly.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Title(); ok {
		_spec.SetField(poly.FieldTitle, field.TypeString, value)
	}
	if value, ok := pu.mutation.Memo(); ok {
		_spec.SetField(poly.FieldMemo, field.TypeString, value)
	}
	if value, ok := pu.mutation.LogoPic(); ok {
		_spec.SetField(poly.FieldLogoPic, field.TypeString, value)
	}
	if value, ok := pu.mutation.Pic1(); ok {
		_spec.SetField(poly.FieldPic1, field.TypeString, value)
	}
	if value, ok := pu.mutation.Pic2(); ok {
		_spec.SetField(poly.FieldPic2, field.TypeString, value)
	}
	if value, ok := pu.mutation.Pic3(); ok {
		_spec.SetField(poly.FieldPic3, field.TypeString, value)
	}
	if value, ok := pu.mutation.Menkan(); ok {
		_spec.SetField(poly.FieldMenkan, field.TypeString, value)
	}
	if value, ok := pu.mutation.Fafang(); ok {
		_spec.SetField(poly.FieldFafang, field.TypeString, value)
	}
	if value, ok := pu.mutation.Xiaoqi(); ok {
		_spec.SetField(poly.FieldXiaoqi, field.TypeString, value)
	}
	if value, ok := pu.mutation.Shiyong(); ok {
		_spec.SetField(poly.FieldShiyong, field.TypeString, value)
	}
	if value, ok := pu.mutation.Status(); ok {
		_spec.SetField(poly.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := pu.mutation.AddedStatus(); ok {
		_spec.AddField(poly.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := pu.mutation.GetType(); ok {
		_spec.SetField(poly.FieldType, field.TypeInt32, value)
	}
	if value, ok := pu.mutation.AddedType(); ok {
		_spec.AddField(poly.FieldType, field.TypeInt32, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{poly.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PolyUpdateOne is the builder for updating a single Poly entity.
type PolyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PolyMutation
}

// SetUpdateTime sets the "update_time" field.
func (puo *PolyUpdateOne) SetUpdateTime(t time.Time) *PolyUpdateOne {
	puo.mutation.SetUpdateTime(t)
	return puo
}

// SetName sets the "name" field.
func (puo *PolyUpdateOne) SetName(s string) *PolyUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *PolyUpdateOne) SetNillableName(s *string) *PolyUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetTitle sets the "title" field.
func (puo *PolyUpdateOne) SetTitle(s string) *PolyUpdateOne {
	puo.mutation.SetTitle(s)
	return puo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (puo *PolyUpdateOne) SetNillableTitle(s *string) *PolyUpdateOne {
	if s != nil {
		puo.SetTitle(*s)
	}
	return puo
}

// SetMemo sets the "memo" field.
func (puo *PolyUpdateOne) SetMemo(s string) *PolyUpdateOne {
	puo.mutation.SetMemo(s)
	return puo
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (puo *PolyUpdateOne) SetNillableMemo(s *string) *PolyUpdateOne {
	if s != nil {
		puo.SetMemo(*s)
	}
	return puo
}

// SetLogoPic sets the "logo_pic" field.
func (puo *PolyUpdateOne) SetLogoPic(s string) *PolyUpdateOne {
	puo.mutation.SetLogoPic(s)
	return puo
}

// SetNillableLogoPic sets the "logo_pic" field if the given value is not nil.
func (puo *PolyUpdateOne) SetNillableLogoPic(s *string) *PolyUpdateOne {
	if s != nil {
		puo.SetLogoPic(*s)
	}
	return puo
}

// SetPic1 sets the "pic1" field.
func (puo *PolyUpdateOne) SetPic1(s string) *PolyUpdateOne {
	puo.mutation.SetPic1(s)
	return puo
}

// SetNillablePic1 sets the "pic1" field if the given value is not nil.
func (puo *PolyUpdateOne) SetNillablePic1(s *string) *PolyUpdateOne {
	if s != nil {
		puo.SetPic1(*s)
	}
	return puo
}

// SetPic2 sets the "pic2" field.
func (puo *PolyUpdateOne) SetPic2(s string) *PolyUpdateOne {
	puo.mutation.SetPic2(s)
	return puo
}

// SetNillablePic2 sets the "pic2" field if the given value is not nil.
func (puo *PolyUpdateOne) SetNillablePic2(s *string) *PolyUpdateOne {
	if s != nil {
		puo.SetPic2(*s)
	}
	return puo
}

// SetPic3 sets the "pic3" field.
func (puo *PolyUpdateOne) SetPic3(s string) *PolyUpdateOne {
	puo.mutation.SetPic3(s)
	return puo
}

// SetNillablePic3 sets the "pic3" field if the given value is not nil.
func (puo *PolyUpdateOne) SetNillablePic3(s *string) *PolyUpdateOne {
	if s != nil {
		puo.SetPic3(*s)
	}
	return puo
}

// SetMenkan sets the "menkan" field.
func (puo *PolyUpdateOne) SetMenkan(s string) *PolyUpdateOne {
	puo.mutation.SetMenkan(s)
	return puo
}

// SetNillableMenkan sets the "menkan" field if the given value is not nil.
func (puo *PolyUpdateOne) SetNillableMenkan(s *string) *PolyUpdateOne {
	if s != nil {
		puo.SetMenkan(*s)
	}
	return puo
}

// SetFafang sets the "fafang" field.
func (puo *PolyUpdateOne) SetFafang(s string) *PolyUpdateOne {
	puo.mutation.SetFafang(s)
	return puo
}

// SetNillableFafang sets the "fafang" field if the given value is not nil.
func (puo *PolyUpdateOne) SetNillableFafang(s *string) *PolyUpdateOne {
	if s != nil {
		puo.SetFafang(*s)
	}
	return puo
}

// SetXiaoqi sets the "xiaoqi" field.
func (puo *PolyUpdateOne) SetXiaoqi(s string) *PolyUpdateOne {
	puo.mutation.SetXiaoqi(s)
	return puo
}

// SetNillableXiaoqi sets the "xiaoqi" field if the given value is not nil.
func (puo *PolyUpdateOne) SetNillableXiaoqi(s *string) *PolyUpdateOne {
	if s != nil {
		puo.SetXiaoqi(*s)
	}
	return puo
}

// SetShiyong sets the "shiyong" field.
func (puo *PolyUpdateOne) SetShiyong(s string) *PolyUpdateOne {
	puo.mutation.SetShiyong(s)
	return puo
}

// SetNillableShiyong sets the "shiyong" field if the given value is not nil.
func (puo *PolyUpdateOne) SetNillableShiyong(s *string) *PolyUpdateOne {
	if s != nil {
		puo.SetShiyong(*s)
	}
	return puo
}

// SetStatus sets the "status" field.
func (puo *PolyUpdateOne) SetStatus(i int32) *PolyUpdateOne {
	puo.mutation.ResetStatus()
	puo.mutation.SetStatus(i)
	return puo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (puo *PolyUpdateOne) SetNillableStatus(i *int32) *PolyUpdateOne {
	if i != nil {
		puo.SetStatus(*i)
	}
	return puo
}

// AddStatus adds i to the "status" field.
func (puo *PolyUpdateOne) AddStatus(i int32) *PolyUpdateOne {
	puo.mutation.AddStatus(i)
	return puo
}

// SetType sets the "type" field.
func (puo *PolyUpdateOne) SetType(i int32) *PolyUpdateOne {
	puo.mutation.ResetType()
	puo.mutation.SetType(i)
	return puo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (puo *PolyUpdateOne) SetNillableType(i *int32) *PolyUpdateOne {
	if i != nil {
		puo.SetType(*i)
	}
	return puo
}

// AddType adds i to the "type" field.
func (puo *PolyUpdateOne) AddType(i int32) *PolyUpdateOne {
	puo.mutation.AddType(i)
	return puo
}

// Mutation returns the PolyMutation object of the builder.
func (puo *PolyUpdateOne) Mutation() *PolyMutation {
	return puo.mutation
}

// Where appends a list predicates to the PolyUpdate builder.
func (puo *PolyUpdateOne) Where(ps ...predicate.Poly) *PolyUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PolyUpdateOne) Select(field string, fields ...string) *PolyUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Poly entity.
func (puo *PolyUpdateOne) Save(ctx context.Context) (*Poly, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PolyUpdateOne) SaveX(ctx context.Context) *Poly {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PolyUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PolyUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PolyUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdateTime(); !ok {
		v := poly.UpdateDefaultUpdateTime()
		puo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PolyUpdateOne) check() error {
	if v, ok := puo.mutation.Name(); ok {
		if err := poly.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Poly.name": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Title(); ok {
		if err := poly.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Poly.title": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Memo(); ok {
		if err := poly.MemoValidator(v); err != nil {
			return &ValidationError{Name: "memo", err: fmt.Errorf(`ent: validator failed for field "Poly.memo": %w`, err)}
		}
	}
	if v, ok := puo.mutation.LogoPic(); ok {
		if err := poly.LogoPicValidator(v); err != nil {
			return &ValidationError{Name: "logo_pic", err: fmt.Errorf(`ent: validator failed for field "Poly.logo_pic": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Pic1(); ok {
		if err := poly.Pic1Validator(v); err != nil {
			return &ValidationError{Name: "pic1", err: fmt.Errorf(`ent: validator failed for field "Poly.pic1": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Pic2(); ok {
		if err := poly.Pic2Validator(v); err != nil {
			return &ValidationError{Name: "pic2", err: fmt.Errorf(`ent: validator failed for field "Poly.pic2": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Pic3(); ok {
		if err := poly.Pic3Validator(v); err != nil {
			return &ValidationError{Name: "pic3", err: fmt.Errorf(`ent: validator failed for field "Poly.pic3": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Menkan(); ok {
		if err := poly.MenkanValidator(v); err != nil {
			return &ValidationError{Name: "menkan", err: fmt.Errorf(`ent: validator failed for field "Poly.menkan": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Fafang(); ok {
		if err := poly.FafangValidator(v); err != nil {
			return &ValidationError{Name: "fafang", err: fmt.Errorf(`ent: validator failed for field "Poly.fafang": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Xiaoqi(); ok {
		if err := poly.XiaoqiValidator(v); err != nil {
			return &ValidationError{Name: "xiaoqi", err: fmt.Errorf(`ent: validator failed for field "Poly.xiaoqi": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Shiyong(); ok {
		if err := poly.ShiyongValidator(v); err != nil {
			return &ValidationError{Name: "shiyong", err: fmt.Errorf(`ent: validator failed for field "Poly.shiyong": %w`, err)}
		}
	}
	return nil
}

func (puo *PolyUpdateOne) sqlSave(ctx context.Context) (_node *Poly, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(poly.Table, poly.Columns, sqlgraph.NewFieldSpec(poly.FieldID, field.TypeUUID))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Poly.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, poly.FieldID)
		for _, f := range fields {
			if !poly.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != poly.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UpdateTime(); ok {
		_spec.SetField(poly.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(poly.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Title(); ok {
		_spec.SetField(poly.FieldTitle, field.TypeString, value)
	}
	if value, ok := puo.mutation.Memo(); ok {
		_spec.SetField(poly.FieldMemo, field.TypeString, value)
	}
	if value, ok := puo.mutation.LogoPic(); ok {
		_spec.SetField(poly.FieldLogoPic, field.TypeString, value)
	}
	if value, ok := puo.mutation.Pic1(); ok {
		_spec.SetField(poly.FieldPic1, field.TypeString, value)
	}
	if value, ok := puo.mutation.Pic2(); ok {
		_spec.SetField(poly.FieldPic2, field.TypeString, value)
	}
	if value, ok := puo.mutation.Pic3(); ok {
		_spec.SetField(poly.FieldPic3, field.TypeString, value)
	}
	if value, ok := puo.mutation.Menkan(); ok {
		_spec.SetField(poly.FieldMenkan, field.TypeString, value)
	}
	if value, ok := puo.mutation.Fafang(); ok {
		_spec.SetField(poly.FieldFafang, field.TypeString, value)
	}
	if value, ok := puo.mutation.Xiaoqi(); ok {
		_spec.SetField(poly.FieldXiaoqi, field.TypeString, value)
	}
	if value, ok := puo.mutation.Shiyong(); ok {
		_spec.SetField(poly.FieldShiyong, field.TypeString, value)
	}
	if value, ok := puo.mutation.Status(); ok {
		_spec.SetField(poly.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := puo.mutation.AddedStatus(); ok {
		_spec.AddField(poly.FieldStatus, field.TypeInt32, value)
	}
	if value, ok := puo.mutation.GetType(); ok {
		_spec.SetField(poly.FieldType, field.TypeInt32, value)
	}
	if value, ok := puo.mutation.AddedType(); ok {
		_spec.AddField(poly.FieldType, field.TypeInt32, value)
	}
	_node = &Poly{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{poly.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
