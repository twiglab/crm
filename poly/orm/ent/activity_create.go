// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/twiglab/crm/poly/orm/ent/activity"
)

// ActivityCreate is the builder for creating a Activity entity.
type ActivityCreate struct {
	config
	mutation *ActivityMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCode sets the "code" field.
func (ac *ActivityCreate) SetCode(s string) *ActivityCreate {
	ac.mutation.SetCode(s)
	return ac
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableCode(s *string) *ActivityCreate {
	if s != nil {
		ac.SetCode(*s)
	}
	return ac
}

// SetMallCode sets the "mall_code" field.
func (ac *ActivityCreate) SetMallCode(s string) *ActivityCreate {
	ac.mutation.SetMallCode(s)
	return ac
}

// SetOperator sets the "operator" field.
func (ac *ActivityCreate) SetOperator(s string) *ActivityCreate {
	ac.mutation.SetOperator(s)
	return ac
}

// SetActivityAddTime sets the "activity_add_time" field.
func (ac *ActivityCreate) SetActivityAddTime(t time.Time) *ActivityCreate {
	ac.mutation.SetActivityAddTime(t)
	return ac
}

// SetApprover sets the "approver" field.
func (ac *ActivityCreate) SetApprover(s string) *ActivityCreate {
	ac.mutation.SetApprover(s)
	return ac
}

// SetActivityApproveTime sets the "activity_approve_time" field.
func (ac *ActivityCreate) SetActivityApproveTime(t time.Time) *ActivityCreate {
	ac.mutation.SetActivityApproveTime(t)
	return ac
}

// SetPrincipal sets the "principal" field.
func (ac *ActivityCreate) SetPrincipal(s string) *ActivityCreate {
	ac.mutation.SetPrincipal(s)
	return ac
}

// SetActivityName sets the "activity_name" field.
func (ac *ActivityCreate) SetActivityName(s string) *ActivityCreate {
	ac.mutation.SetActivityName(s)
	return ac
}

// SetActivityDesc sets the "activity_desc" field.
func (ac *ActivityCreate) SetActivityDesc(s string) *ActivityCreate {
	ac.mutation.SetActivityDesc(s)
	return ac
}

// SetActivityBudget sets the "activity_budget" field.
func (ac *ActivityCreate) SetActivityBudget(i int64) *ActivityCreate {
	ac.mutation.SetActivityBudget(i)
	return ac
}

// SetActivityStartTime sets the "activity_start_time" field.
func (ac *ActivityCreate) SetActivityStartTime(t time.Time) *ActivityCreate {
	ac.mutation.SetActivityStartTime(t)
	return ac
}

// SetActivityEndTime sets the "activity_end_time" field.
func (ac *ActivityCreate) SetActivityEndTime(t time.Time) *ActivityCreate {
	ac.mutation.SetActivityEndTime(t)
	return ac
}

// SetActivityStatus sets the "activity_status" field.
func (ac *ActivityCreate) SetActivityStatus(i int) *ActivityCreate {
	ac.mutation.SetActivityStatus(i)
	return ac
}

// SetNillableActivityStatus sets the "activity_status" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableActivityStatus(i *int) *ActivityCreate {
	if i != nil {
		ac.SetActivityStatus(*i)
	}
	return ac
}

// SetActivityType sets the "activity_type" field.
func (ac *ActivityCreate) SetActivityType(i int) *ActivityCreate {
	ac.mutation.SetActivityType(i)
	return ac
}

// SetNillableActivityType sets the "activity_type" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableActivityType(i *int) *ActivityCreate {
	if i != nil {
		ac.SetActivityType(*i)
	}
	return ac
}

// SetID sets the "id" field.
func (ac *ActivityCreate) SetID(u uuid.UUID) *ActivityCreate {
	ac.mutation.SetID(u)
	return ac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ac *ActivityCreate) SetNillableID(u *uuid.UUID) *ActivityCreate {
	if u != nil {
		ac.SetID(*u)
	}
	return ac
}

// Mutation returns the ActivityMutation object of the builder.
func (ac *ActivityCreate) Mutation() *ActivityMutation {
	return ac.mutation
}

// Save creates the Activity in the database.
func (ac *ActivityCreate) Save(ctx context.Context) (*Activity, error) {
	ac.defaults()
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *ActivityCreate) SaveX(ctx context.Context) *Activity {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *ActivityCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *ActivityCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *ActivityCreate) defaults() {
	if _, ok := ac.mutation.Code(); !ok {
		v := activity.DefaultCode()
		ac.mutation.SetCode(v)
	}
	if _, ok := ac.mutation.ActivityStatus(); !ok {
		v := activity.DefaultActivityStatus
		ac.mutation.SetActivityStatus(v)
	}
	if _, ok := ac.mutation.ActivityType(); !ok {
		v := activity.DefaultActivityType
		ac.mutation.SetActivityType(v)
	}
	if _, ok := ac.mutation.ID(); !ok {
		v := activity.DefaultID()
		ac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *ActivityCreate) check() error {
	if _, ok := ac.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "Activity.code"`)}
	}
	if v, ok := ac.mutation.Code(); ok {
		if err := activity.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Activity.code": %w`, err)}
		}
	}
	if _, ok := ac.mutation.MallCode(); !ok {
		return &ValidationError{Name: "mall_code", err: errors.New(`ent: missing required field "Activity.mall_code"`)}
	}
	if v, ok := ac.mutation.MallCode(); ok {
		if err := activity.MallCodeValidator(v); err != nil {
			return &ValidationError{Name: "mall_code", err: fmt.Errorf(`ent: validator failed for field "Activity.mall_code": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Operator(); !ok {
		return &ValidationError{Name: "operator", err: errors.New(`ent: missing required field "Activity.operator"`)}
	}
	if v, ok := ac.mutation.Operator(); ok {
		if err := activity.OperatorValidator(v); err != nil {
			return &ValidationError{Name: "operator", err: fmt.Errorf(`ent: validator failed for field "Activity.operator": %w`, err)}
		}
	}
	if _, ok := ac.mutation.ActivityAddTime(); !ok {
		return &ValidationError{Name: "activity_add_time", err: errors.New(`ent: missing required field "Activity.activity_add_time"`)}
	}
	if _, ok := ac.mutation.Approver(); !ok {
		return &ValidationError{Name: "approver", err: errors.New(`ent: missing required field "Activity.approver"`)}
	}
	if v, ok := ac.mutation.Approver(); ok {
		if err := activity.ApproverValidator(v); err != nil {
			return &ValidationError{Name: "approver", err: fmt.Errorf(`ent: validator failed for field "Activity.approver": %w`, err)}
		}
	}
	if _, ok := ac.mutation.ActivityApproveTime(); !ok {
		return &ValidationError{Name: "activity_approve_time", err: errors.New(`ent: missing required field "Activity.activity_approve_time"`)}
	}
	if _, ok := ac.mutation.Principal(); !ok {
		return &ValidationError{Name: "principal", err: errors.New(`ent: missing required field "Activity.principal"`)}
	}
	if v, ok := ac.mutation.Principal(); ok {
		if err := activity.PrincipalValidator(v); err != nil {
			return &ValidationError{Name: "principal", err: fmt.Errorf(`ent: validator failed for field "Activity.principal": %w`, err)}
		}
	}
	if _, ok := ac.mutation.ActivityName(); !ok {
		return &ValidationError{Name: "activity_name", err: errors.New(`ent: missing required field "Activity.activity_name"`)}
	}
	if v, ok := ac.mutation.ActivityName(); ok {
		if err := activity.ActivityNameValidator(v); err != nil {
			return &ValidationError{Name: "activity_name", err: fmt.Errorf(`ent: validator failed for field "Activity.activity_name": %w`, err)}
		}
	}
	if _, ok := ac.mutation.ActivityDesc(); !ok {
		return &ValidationError{Name: "activity_desc", err: errors.New(`ent: missing required field "Activity.activity_desc"`)}
	}
	if v, ok := ac.mutation.ActivityDesc(); ok {
		if err := activity.ActivityDescValidator(v); err != nil {
			return &ValidationError{Name: "activity_desc", err: fmt.Errorf(`ent: validator failed for field "Activity.activity_desc": %w`, err)}
		}
	}
	if _, ok := ac.mutation.ActivityBudget(); !ok {
		return &ValidationError{Name: "activity_budget", err: errors.New(`ent: missing required field "Activity.activity_budget"`)}
	}
	if _, ok := ac.mutation.ActivityStartTime(); !ok {
		return &ValidationError{Name: "activity_start_time", err: errors.New(`ent: missing required field "Activity.activity_start_time"`)}
	}
	if _, ok := ac.mutation.ActivityEndTime(); !ok {
		return &ValidationError{Name: "activity_end_time", err: errors.New(`ent: missing required field "Activity.activity_end_time"`)}
	}
	if _, ok := ac.mutation.ActivityStatus(); !ok {
		return &ValidationError{Name: "activity_status", err: errors.New(`ent: missing required field "Activity.activity_status"`)}
	}
	if _, ok := ac.mutation.ActivityType(); !ok {
		return &ValidationError{Name: "activity_type", err: errors.New(`ent: missing required field "Activity.activity_type"`)}
	}
	return nil
}

func (ac *ActivityCreate) sqlSave(ctx context.Context) (*Activity, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *ActivityCreate) createSpec() (*Activity, *sqlgraph.CreateSpec) {
	var (
		_node = &Activity{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(activity.Table, sqlgraph.NewFieldSpec(activity.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = ac.conflict
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ac.mutation.Code(); ok {
		_spec.SetField(activity.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := ac.mutation.MallCode(); ok {
		_spec.SetField(activity.FieldMallCode, field.TypeString, value)
		_node.MallCode = value
	}
	if value, ok := ac.mutation.Operator(); ok {
		_spec.SetField(activity.FieldOperator, field.TypeString, value)
		_node.Operator = value
	}
	if value, ok := ac.mutation.ActivityAddTime(); ok {
		_spec.SetField(activity.FieldActivityAddTime, field.TypeTime, value)
		_node.ActivityAddTime = value
	}
	if value, ok := ac.mutation.Approver(); ok {
		_spec.SetField(activity.FieldApprover, field.TypeString, value)
		_node.Approver = value
	}
	if value, ok := ac.mutation.ActivityApproveTime(); ok {
		_spec.SetField(activity.FieldActivityApproveTime, field.TypeTime, value)
		_node.ActivityApproveTime = value
	}
	if value, ok := ac.mutation.Principal(); ok {
		_spec.SetField(activity.FieldPrincipal, field.TypeString, value)
		_node.Principal = value
	}
	if value, ok := ac.mutation.ActivityName(); ok {
		_spec.SetField(activity.FieldActivityName, field.TypeString, value)
		_node.ActivityName = value
	}
	if value, ok := ac.mutation.ActivityDesc(); ok {
		_spec.SetField(activity.FieldActivityDesc, field.TypeString, value)
		_node.ActivityDesc = value
	}
	if value, ok := ac.mutation.ActivityBudget(); ok {
		_spec.SetField(activity.FieldActivityBudget, field.TypeInt64, value)
		_node.ActivityBudget = value
	}
	if value, ok := ac.mutation.ActivityStartTime(); ok {
		_spec.SetField(activity.FieldActivityStartTime, field.TypeTime, value)
		_node.ActivityStartTime = value
	}
	if value, ok := ac.mutation.ActivityEndTime(); ok {
		_spec.SetField(activity.FieldActivityEndTime, field.TypeTime, value)
		_node.ActivityEndTime = value
	}
	if value, ok := ac.mutation.ActivityStatus(); ok {
		_spec.SetField(activity.FieldActivityStatus, field.TypeInt, value)
		_node.ActivityStatus = value
	}
	if value, ok := ac.mutation.ActivityType(); ok {
		_spec.SetField(activity.FieldActivityType, field.TypeInt, value)
		_node.ActivityType = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Activity.Create().
//		SetCode(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ActivityUpsert) {
//			SetCode(v+v).
//		}).
//		Exec(ctx)
func (ac *ActivityCreate) OnConflict(opts ...sql.ConflictOption) *ActivityUpsertOne {
	ac.conflict = opts
	return &ActivityUpsertOne{
		create: ac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Activity.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ac *ActivityCreate) OnConflictColumns(columns ...string) *ActivityUpsertOne {
	ac.conflict = append(ac.conflict, sql.ConflictColumns(columns...))
	return &ActivityUpsertOne{
		create: ac,
	}
}

type (
	// ActivityUpsertOne is the builder for "upsert"-ing
	//  one Activity node.
	ActivityUpsertOne struct {
		create *ActivityCreate
	}

	// ActivityUpsert is the "OnConflict" setter.
	ActivityUpsert struct {
		*sql.UpdateSet
	}
)

// SetOperator sets the "operator" field.
func (u *ActivityUpsert) SetOperator(v string) *ActivityUpsert {
	u.Set(activity.FieldOperator, v)
	return u
}

// UpdateOperator sets the "operator" field to the value that was provided on create.
func (u *ActivityUpsert) UpdateOperator() *ActivityUpsert {
	u.SetExcluded(activity.FieldOperator)
	return u
}

// SetApprover sets the "approver" field.
func (u *ActivityUpsert) SetApprover(v string) *ActivityUpsert {
	u.Set(activity.FieldApprover, v)
	return u
}

// UpdateApprover sets the "approver" field to the value that was provided on create.
func (u *ActivityUpsert) UpdateApprover() *ActivityUpsert {
	u.SetExcluded(activity.FieldApprover)
	return u
}

// SetActivityApproveTime sets the "activity_approve_time" field.
func (u *ActivityUpsert) SetActivityApproveTime(v time.Time) *ActivityUpsert {
	u.Set(activity.FieldActivityApproveTime, v)
	return u
}

// UpdateActivityApproveTime sets the "activity_approve_time" field to the value that was provided on create.
func (u *ActivityUpsert) UpdateActivityApproveTime() *ActivityUpsert {
	u.SetExcluded(activity.FieldActivityApproveTime)
	return u
}

// SetPrincipal sets the "principal" field.
func (u *ActivityUpsert) SetPrincipal(v string) *ActivityUpsert {
	u.Set(activity.FieldPrincipal, v)
	return u
}

// UpdatePrincipal sets the "principal" field to the value that was provided on create.
func (u *ActivityUpsert) UpdatePrincipal() *ActivityUpsert {
	u.SetExcluded(activity.FieldPrincipal)
	return u
}

// SetActivityName sets the "activity_name" field.
func (u *ActivityUpsert) SetActivityName(v string) *ActivityUpsert {
	u.Set(activity.FieldActivityName, v)
	return u
}

// UpdateActivityName sets the "activity_name" field to the value that was provided on create.
func (u *ActivityUpsert) UpdateActivityName() *ActivityUpsert {
	u.SetExcluded(activity.FieldActivityName)
	return u
}

// SetActivityDesc sets the "activity_desc" field.
func (u *ActivityUpsert) SetActivityDesc(v string) *ActivityUpsert {
	u.Set(activity.FieldActivityDesc, v)
	return u
}

// UpdateActivityDesc sets the "activity_desc" field to the value that was provided on create.
func (u *ActivityUpsert) UpdateActivityDesc() *ActivityUpsert {
	u.SetExcluded(activity.FieldActivityDesc)
	return u
}

// SetActivityBudget sets the "activity_budget" field.
func (u *ActivityUpsert) SetActivityBudget(v int64) *ActivityUpsert {
	u.Set(activity.FieldActivityBudget, v)
	return u
}

// UpdateActivityBudget sets the "activity_budget" field to the value that was provided on create.
func (u *ActivityUpsert) UpdateActivityBudget() *ActivityUpsert {
	u.SetExcluded(activity.FieldActivityBudget)
	return u
}

// AddActivityBudget adds v to the "activity_budget" field.
func (u *ActivityUpsert) AddActivityBudget(v int64) *ActivityUpsert {
	u.Add(activity.FieldActivityBudget, v)
	return u
}

// SetActivityStartTime sets the "activity_start_time" field.
func (u *ActivityUpsert) SetActivityStartTime(v time.Time) *ActivityUpsert {
	u.Set(activity.FieldActivityStartTime, v)
	return u
}

// UpdateActivityStartTime sets the "activity_start_time" field to the value that was provided on create.
func (u *ActivityUpsert) UpdateActivityStartTime() *ActivityUpsert {
	u.SetExcluded(activity.FieldActivityStartTime)
	return u
}

// SetActivityEndTime sets the "activity_end_time" field.
func (u *ActivityUpsert) SetActivityEndTime(v time.Time) *ActivityUpsert {
	u.Set(activity.FieldActivityEndTime, v)
	return u
}

// UpdateActivityEndTime sets the "activity_end_time" field to the value that was provided on create.
func (u *ActivityUpsert) UpdateActivityEndTime() *ActivityUpsert {
	u.SetExcluded(activity.FieldActivityEndTime)
	return u
}

// SetActivityStatus sets the "activity_status" field.
func (u *ActivityUpsert) SetActivityStatus(v int) *ActivityUpsert {
	u.Set(activity.FieldActivityStatus, v)
	return u
}

// UpdateActivityStatus sets the "activity_status" field to the value that was provided on create.
func (u *ActivityUpsert) UpdateActivityStatus() *ActivityUpsert {
	u.SetExcluded(activity.FieldActivityStatus)
	return u
}

// AddActivityStatus adds v to the "activity_status" field.
func (u *ActivityUpsert) AddActivityStatus(v int) *ActivityUpsert {
	u.Add(activity.FieldActivityStatus, v)
	return u
}

// SetActivityType sets the "activity_type" field.
func (u *ActivityUpsert) SetActivityType(v int) *ActivityUpsert {
	u.Set(activity.FieldActivityType, v)
	return u
}

// UpdateActivityType sets the "activity_type" field to the value that was provided on create.
func (u *ActivityUpsert) UpdateActivityType() *ActivityUpsert {
	u.SetExcluded(activity.FieldActivityType)
	return u
}

// AddActivityType adds v to the "activity_type" field.
func (u *ActivityUpsert) AddActivityType(v int) *ActivityUpsert {
	u.Add(activity.FieldActivityType, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Activity.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(activity.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ActivityUpsertOne) UpdateNewValues() *ActivityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(activity.FieldID)
		}
		if _, exists := u.create.mutation.Code(); exists {
			s.SetIgnore(activity.FieldCode)
		}
		if _, exists := u.create.mutation.MallCode(); exists {
			s.SetIgnore(activity.FieldMallCode)
		}
		if _, exists := u.create.mutation.ActivityAddTime(); exists {
			s.SetIgnore(activity.FieldActivityAddTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Activity.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ActivityUpsertOne) Ignore() *ActivityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ActivityUpsertOne) DoNothing() *ActivityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ActivityCreate.OnConflict
// documentation for more info.
func (u *ActivityUpsertOne) Update(set func(*ActivityUpsert)) *ActivityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ActivityUpsert{UpdateSet: update})
	}))
	return u
}

// SetOperator sets the "operator" field.
func (u *ActivityUpsertOne) SetOperator(v string) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.SetOperator(v)
	})
}

// UpdateOperator sets the "operator" field to the value that was provided on create.
func (u *ActivityUpsertOne) UpdateOperator() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateOperator()
	})
}

// SetApprover sets the "approver" field.
func (u *ActivityUpsertOne) SetApprover(v string) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.SetApprover(v)
	})
}

// UpdateApprover sets the "approver" field to the value that was provided on create.
func (u *ActivityUpsertOne) UpdateApprover() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateApprover()
	})
}

// SetActivityApproveTime sets the "activity_approve_time" field.
func (u *ActivityUpsertOne) SetActivityApproveTime(v time.Time) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.SetActivityApproveTime(v)
	})
}

// UpdateActivityApproveTime sets the "activity_approve_time" field to the value that was provided on create.
func (u *ActivityUpsertOne) UpdateActivityApproveTime() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateActivityApproveTime()
	})
}

// SetPrincipal sets the "principal" field.
func (u *ActivityUpsertOne) SetPrincipal(v string) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.SetPrincipal(v)
	})
}

// UpdatePrincipal sets the "principal" field to the value that was provided on create.
func (u *ActivityUpsertOne) UpdatePrincipal() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdatePrincipal()
	})
}

// SetActivityName sets the "activity_name" field.
func (u *ActivityUpsertOne) SetActivityName(v string) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.SetActivityName(v)
	})
}

// UpdateActivityName sets the "activity_name" field to the value that was provided on create.
func (u *ActivityUpsertOne) UpdateActivityName() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateActivityName()
	})
}

// SetActivityDesc sets the "activity_desc" field.
func (u *ActivityUpsertOne) SetActivityDesc(v string) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.SetActivityDesc(v)
	})
}

// UpdateActivityDesc sets the "activity_desc" field to the value that was provided on create.
func (u *ActivityUpsertOne) UpdateActivityDesc() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateActivityDesc()
	})
}

// SetActivityBudget sets the "activity_budget" field.
func (u *ActivityUpsertOne) SetActivityBudget(v int64) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.SetActivityBudget(v)
	})
}

// AddActivityBudget adds v to the "activity_budget" field.
func (u *ActivityUpsertOne) AddActivityBudget(v int64) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.AddActivityBudget(v)
	})
}

// UpdateActivityBudget sets the "activity_budget" field to the value that was provided on create.
func (u *ActivityUpsertOne) UpdateActivityBudget() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateActivityBudget()
	})
}

// SetActivityStartTime sets the "activity_start_time" field.
func (u *ActivityUpsertOne) SetActivityStartTime(v time.Time) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.SetActivityStartTime(v)
	})
}

// UpdateActivityStartTime sets the "activity_start_time" field to the value that was provided on create.
func (u *ActivityUpsertOne) UpdateActivityStartTime() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateActivityStartTime()
	})
}

// SetActivityEndTime sets the "activity_end_time" field.
func (u *ActivityUpsertOne) SetActivityEndTime(v time.Time) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.SetActivityEndTime(v)
	})
}

// UpdateActivityEndTime sets the "activity_end_time" field to the value that was provided on create.
func (u *ActivityUpsertOne) UpdateActivityEndTime() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateActivityEndTime()
	})
}

// SetActivityStatus sets the "activity_status" field.
func (u *ActivityUpsertOne) SetActivityStatus(v int) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.SetActivityStatus(v)
	})
}

// AddActivityStatus adds v to the "activity_status" field.
func (u *ActivityUpsertOne) AddActivityStatus(v int) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.AddActivityStatus(v)
	})
}

// UpdateActivityStatus sets the "activity_status" field to the value that was provided on create.
func (u *ActivityUpsertOne) UpdateActivityStatus() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateActivityStatus()
	})
}

// SetActivityType sets the "activity_type" field.
func (u *ActivityUpsertOne) SetActivityType(v int) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.SetActivityType(v)
	})
}

// AddActivityType adds v to the "activity_type" field.
func (u *ActivityUpsertOne) AddActivityType(v int) *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.AddActivityType(v)
	})
}

// UpdateActivityType sets the "activity_type" field to the value that was provided on create.
func (u *ActivityUpsertOne) UpdateActivityType() *ActivityUpsertOne {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateActivityType()
	})
}

// Exec executes the query.
func (u *ActivityUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ActivityCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ActivityUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ActivityUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ActivityUpsertOne.ID is not supported by MySQL driver. Use ActivityUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ActivityUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ActivityCreateBulk is the builder for creating many Activity entities in bulk.
type ActivityCreateBulk struct {
	config
	err      error
	builders []*ActivityCreate
	conflict []sql.ConflictOption
}

// Save creates the Activity entities in the database.
func (acb *ActivityCreateBulk) Save(ctx context.Context) ([]*Activity, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Activity, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ActivityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = acb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *ActivityCreateBulk) SaveX(ctx context.Context) []*Activity {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *ActivityCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *ActivityCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Activity.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ActivityUpsert) {
//			SetCode(v+v).
//		}).
//		Exec(ctx)
func (acb *ActivityCreateBulk) OnConflict(opts ...sql.ConflictOption) *ActivityUpsertBulk {
	acb.conflict = opts
	return &ActivityUpsertBulk{
		create: acb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Activity.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (acb *ActivityCreateBulk) OnConflictColumns(columns ...string) *ActivityUpsertBulk {
	acb.conflict = append(acb.conflict, sql.ConflictColumns(columns...))
	return &ActivityUpsertBulk{
		create: acb,
	}
}

// ActivityUpsertBulk is the builder for "upsert"-ing
// a bulk of Activity nodes.
type ActivityUpsertBulk struct {
	create *ActivityCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Activity.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(activity.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ActivityUpsertBulk) UpdateNewValues() *ActivityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(activity.FieldID)
			}
			if _, exists := b.mutation.Code(); exists {
				s.SetIgnore(activity.FieldCode)
			}
			if _, exists := b.mutation.MallCode(); exists {
				s.SetIgnore(activity.FieldMallCode)
			}
			if _, exists := b.mutation.ActivityAddTime(); exists {
				s.SetIgnore(activity.FieldActivityAddTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Activity.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ActivityUpsertBulk) Ignore() *ActivityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ActivityUpsertBulk) DoNothing() *ActivityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ActivityCreateBulk.OnConflict
// documentation for more info.
func (u *ActivityUpsertBulk) Update(set func(*ActivityUpsert)) *ActivityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ActivityUpsert{UpdateSet: update})
	}))
	return u
}

// SetOperator sets the "operator" field.
func (u *ActivityUpsertBulk) SetOperator(v string) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.SetOperator(v)
	})
}

// UpdateOperator sets the "operator" field to the value that was provided on create.
func (u *ActivityUpsertBulk) UpdateOperator() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateOperator()
	})
}

// SetApprover sets the "approver" field.
func (u *ActivityUpsertBulk) SetApprover(v string) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.SetApprover(v)
	})
}

// UpdateApprover sets the "approver" field to the value that was provided on create.
func (u *ActivityUpsertBulk) UpdateApprover() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateApprover()
	})
}

// SetActivityApproveTime sets the "activity_approve_time" field.
func (u *ActivityUpsertBulk) SetActivityApproveTime(v time.Time) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.SetActivityApproveTime(v)
	})
}

// UpdateActivityApproveTime sets the "activity_approve_time" field to the value that was provided on create.
func (u *ActivityUpsertBulk) UpdateActivityApproveTime() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateActivityApproveTime()
	})
}

// SetPrincipal sets the "principal" field.
func (u *ActivityUpsertBulk) SetPrincipal(v string) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.SetPrincipal(v)
	})
}

// UpdatePrincipal sets the "principal" field to the value that was provided on create.
func (u *ActivityUpsertBulk) UpdatePrincipal() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdatePrincipal()
	})
}

// SetActivityName sets the "activity_name" field.
func (u *ActivityUpsertBulk) SetActivityName(v string) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.SetActivityName(v)
	})
}

// UpdateActivityName sets the "activity_name" field to the value that was provided on create.
func (u *ActivityUpsertBulk) UpdateActivityName() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateActivityName()
	})
}

// SetActivityDesc sets the "activity_desc" field.
func (u *ActivityUpsertBulk) SetActivityDesc(v string) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.SetActivityDesc(v)
	})
}

// UpdateActivityDesc sets the "activity_desc" field to the value that was provided on create.
func (u *ActivityUpsertBulk) UpdateActivityDesc() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateActivityDesc()
	})
}

// SetActivityBudget sets the "activity_budget" field.
func (u *ActivityUpsertBulk) SetActivityBudget(v int64) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.SetActivityBudget(v)
	})
}

// AddActivityBudget adds v to the "activity_budget" field.
func (u *ActivityUpsertBulk) AddActivityBudget(v int64) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.AddActivityBudget(v)
	})
}

// UpdateActivityBudget sets the "activity_budget" field to the value that was provided on create.
func (u *ActivityUpsertBulk) UpdateActivityBudget() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateActivityBudget()
	})
}

// SetActivityStartTime sets the "activity_start_time" field.
func (u *ActivityUpsertBulk) SetActivityStartTime(v time.Time) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.SetActivityStartTime(v)
	})
}

// UpdateActivityStartTime sets the "activity_start_time" field to the value that was provided on create.
func (u *ActivityUpsertBulk) UpdateActivityStartTime() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateActivityStartTime()
	})
}

// SetActivityEndTime sets the "activity_end_time" field.
func (u *ActivityUpsertBulk) SetActivityEndTime(v time.Time) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.SetActivityEndTime(v)
	})
}

// UpdateActivityEndTime sets the "activity_end_time" field to the value that was provided on create.
func (u *ActivityUpsertBulk) UpdateActivityEndTime() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateActivityEndTime()
	})
}

// SetActivityStatus sets the "activity_status" field.
func (u *ActivityUpsertBulk) SetActivityStatus(v int) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.SetActivityStatus(v)
	})
}

// AddActivityStatus adds v to the "activity_status" field.
func (u *ActivityUpsertBulk) AddActivityStatus(v int) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.AddActivityStatus(v)
	})
}

// UpdateActivityStatus sets the "activity_status" field to the value that was provided on create.
func (u *ActivityUpsertBulk) UpdateActivityStatus() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateActivityStatus()
	})
}

// SetActivityType sets the "activity_type" field.
func (u *ActivityUpsertBulk) SetActivityType(v int) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.SetActivityType(v)
	})
}

// AddActivityType adds v to the "activity_type" field.
func (u *ActivityUpsertBulk) AddActivityType(v int) *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.AddActivityType(v)
	})
}

// UpdateActivityType sets the "activity_type" field to the value that was provided on create.
func (u *ActivityUpsertBulk) UpdateActivityType() *ActivityUpsertBulk {
	return u.Update(func(s *ActivityUpsert) {
		s.UpdateActivityType()
	})
}

// Exec executes the query.
func (u *ActivityUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ActivityCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ActivityCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ActivityUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
