// Code generated by ent, DO NOT EDIT.

package activitychange

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the activitychange type in the database.
	Label = "activity_change"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldActivityCode holds the string denoting the activity_code field in the database.
	FieldActivityCode = "activity_code"
	// FieldOperator holds the string denoting the operator field in the database.
	FieldOperator = "operator"
	// FieldSubmitTime holds the string denoting the submit_time field in the database.
	FieldSubmitTime = "submit_time"
	// FieldApprover holds the string denoting the approver field in the database.
	FieldApprover = "approver"
	// FieldApproveTime holds the string denoting the approve_time field in the database.
	FieldApproveTime = "approve_time"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldChangeSummary holds the string denoting the change_summary field in the database.
	FieldChangeSummary = "change_summary"
	// FieldChangeReason holds the string denoting the change_reason field in the database.
	FieldChangeReason = "change_reason"
	// FieldChangeRecord holds the string denoting the change_record field in the database.
	FieldChangeRecord = "change_record"
	// Table holds the table name of the activitychange in the database.
	Table = "activity_changes"
)

// Columns holds all SQL columns for activitychange fields.
var Columns = []string{
	FieldID,
	FieldCode,
	FieldActivityCode,
	FieldOperator,
	FieldSubmitTime,
	FieldApprover,
	FieldApproveTime,
	FieldStatus,
	FieldChangeSummary,
	FieldChangeReason,
	FieldChangeRecord,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCode holds the default value on creation for the "code" field.
	DefaultCode func() string
	// CodeValidator is a validator for the "code" field. It is called by the builders before save.
	CodeValidator func(string) error
	// ActivityCodeValidator is a validator for the "activity_code" field. It is called by the builders before save.
	ActivityCodeValidator func(string) error
	// OperatorValidator is a validator for the "operator" field. It is called by the builders before save.
	OperatorValidator func(string) error
	// DefaultSubmitTime holds the default value on creation for the "submit_time" field.
	DefaultSubmitTime func() time.Time
	// ApproverValidator is a validator for the "approver" field. It is called by the builders before save.
	ApproverValidator func(string) error
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus int
	// ChangeSummaryValidator is a validator for the "change_summary" field. It is called by the builders before save.
	ChangeSummaryValidator func(string) error
	// ChangeReasonValidator is a validator for the "change_reason" field. It is called by the builders before save.
	ChangeReasonValidator func(string) error
	// ChangeRecordValidator is a validator for the "change_record" field. It is called by the builders before save.
	ChangeRecordValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the ActivityChange queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}

// ByActivityCode orders the results by the activity_code field.
func ByActivityCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActivityCode, opts...).ToFunc()
}

// ByOperator orders the results by the operator field.
func ByOperator(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOperator, opts...).ToFunc()
}

// BySubmitTime orders the results by the submit_time field.
func BySubmitTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubmitTime, opts...).ToFunc()
}

// ByApprover orders the results by the approver field.
func ByApprover(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApprover, opts...).ToFunc()
}

// ByApproveTime orders the results by the approve_time field.
func ByApproveTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApproveTime, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByChangeSummary orders the results by the change_summary field.
func ByChangeSummary(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChangeSummary, opts...).ToFunc()
}

// ByChangeReason orders the results by the change_reason field.
func ByChangeReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChangeReason, opts...).ToFunc()
}

// ByChangeRecord orders the results by the change_record field.
func ByChangeRecord(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChangeRecord, opts...).ToFunc()
}
