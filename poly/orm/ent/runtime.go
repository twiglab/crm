// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/google/uuid"
	"github.com/twiglab/crm/poly/orm/ent/poly"
	"github.com/twiglab/crm/poly/orm/schema"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	polyFields := schema.Poly{}.Fields()
	_ = polyFields
	// polyDescCode is the schema descriptor for code field.
	polyDescCode := polyFields[1].Descriptor()
	// poly.DefaultCode holds the default value on creation for the code field.
	poly.DefaultCode = polyDescCode.Default.(func() string)
	// poly.CodeValidator is a validator for the "code" field. It is called by the builders before save.
	poly.CodeValidator = func() func(string) error {
		validators := polyDescCode.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(code string) error {
			for _, fn := range fns {
				if err := fn(code); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// polyDescMallCode is the schema descriptor for mall_code field.
	polyDescMallCode := polyFields[2].Descriptor()
	// poly.MallCodeValidator is a validator for the "mall_code" field. It is called by the builders before save.
	poly.MallCodeValidator = func() func(string) error {
		validators := polyDescMallCode.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(mall_code string) error {
			for _, fn := range fns {
				if err := fn(mall_code); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// polyDescOperator is the schema descriptor for operator field.
	polyDescOperator := polyFields[3].Descriptor()
	// poly.OperatorValidator is a validator for the "operator" field. It is called by the builders before save.
	poly.OperatorValidator = func() func(string) error {
		validators := polyDescOperator.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(operator string) error {
			for _, fn := range fns {
				if err := fn(operator); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// polyDescRuleCode is the schema descriptor for rule_code field.
	polyDescRuleCode := polyFields[5].Descriptor()
	// poly.RuleCodeValidator is a validator for the "rule_code" field. It is called by the builders before save.
	poly.RuleCodeValidator = func() func(string) error {
		validators := polyDescRuleCode.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(rule_code string) error {
			for _, fn := range fns {
				if err := fn(rule_code); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// polyDescName is the schema descriptor for name field.
	polyDescName := polyFields[6].Descriptor()
	// poly.NameValidator is a validator for the "name" field. It is called by the builders before save.
	poly.NameValidator = func() func(string) error {
		validators := polyDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// polyDescDesc is the schema descriptor for desc field.
	polyDescDesc := polyFields[7].Descriptor()
	// poly.DescValidator is a validator for the "desc" field. It is called by the builders before save.
	poly.DescValidator = polyDescDesc.Validators[0].(func(string) error)
	// polyDescStatus is the schema descriptor for status field.
	polyDescStatus := polyFields[11].Descriptor()
	// poly.DefaultStatus holds the default value on creation for the status field.
	poly.DefaultStatus = polyDescStatus.Default.(int)
	// polyDescType is the schema descriptor for type field.
	polyDescType := polyFields[12].Descriptor()
	// poly.DefaultType holds the default value on creation for the type field.
	poly.DefaultType = polyDescType.Default.(int)
	// polyDescID is the schema descriptor for id field.
	polyDescID := polyFields[0].Descriptor()
	// poly.DefaultID holds the default value on creation for the id field.
	poly.DefaultID = polyDescID.Default.(func() uuid.UUID)
}
