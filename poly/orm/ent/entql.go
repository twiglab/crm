// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/twiglab/crm/poly/orm/ent/poly"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 1)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   poly.Table,
			Columns: poly.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: poly.FieldID,
			},
		},
		Type: "Poly",
		Fields: map[string]*sqlgraph.FieldSpec{
			poly.FieldCode:              {Type: field.TypeString, Column: poly.FieldCode},
			poly.FieldMallCode:          {Type: field.TypeString, Column: poly.FieldMallCode},
			poly.FieldOperator:          {Type: field.TypeString, Column: poly.FieldOperator},
			poly.FieldActivityAddTime:   {Type: field.TypeTime, Column: poly.FieldActivityAddTime},
			poly.FieldRuleCode:          {Type: field.TypeString, Column: poly.FieldRuleCode},
			poly.FieldActivityName:      {Type: field.TypeString, Column: poly.FieldActivityName},
			poly.FieldActivityDesc:      {Type: field.TypeString, Column: poly.FieldActivityDesc},
			poly.FieldActivityBudget:    {Type: field.TypeInt64, Column: poly.FieldActivityBudget},
			poly.FieldActivityStartTime: {Type: field.TypeTime, Column: poly.FieldActivityStartTime},
			poly.FieldActivityEndTime:   {Type: field.TypeTime, Column: poly.FieldActivityEndTime},
			poly.FieldActivityStatus:    {Type: field.TypeInt, Column: poly.FieldActivityStatus},
			poly.FieldActivityType:      {Type: field.TypeInt, Column: poly.FieldActivityType},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (pq *PolyQuery) addPredicate(pred func(s *sql.Selector)) {
	pq.predicates = append(pq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PolyQuery builder.
func (pq *PolyQuery) Filter() *PolyFilter {
	return &PolyFilter{config: pq.config, predicateAdder: pq}
}

// addPredicate implements the predicateAdder interface.
func (m *PolyMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PolyMutation builder.
func (m *PolyMutation) Filter() *PolyFilter {
	return &PolyFilter{config: m.config, predicateAdder: m}
}

// PolyFilter provides a generic filtering capability at runtime for PolyQuery.
type PolyFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PolyFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *PolyFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(poly.FieldID))
}

// WhereCode applies the entql string predicate on the code field.
func (f *PolyFilter) WhereCode(p entql.StringP) {
	f.Where(p.Field(poly.FieldCode))
}

// WhereMallCode applies the entql string predicate on the mall_code field.
func (f *PolyFilter) WhereMallCode(p entql.StringP) {
	f.Where(p.Field(poly.FieldMallCode))
}

// WhereOperator applies the entql string predicate on the operator field.
func (f *PolyFilter) WhereOperator(p entql.StringP) {
	f.Where(p.Field(poly.FieldOperator))
}

// WhereActivityAddTime applies the entql time.Time predicate on the activity_add_time field.
func (f *PolyFilter) WhereActivityAddTime(p entql.TimeP) {
	f.Where(p.Field(poly.FieldActivityAddTime))
}

// WhereRuleCode applies the entql string predicate on the rule_code field.
func (f *PolyFilter) WhereRuleCode(p entql.StringP) {
	f.Where(p.Field(poly.FieldRuleCode))
}

// WhereActivityName applies the entql string predicate on the activity_name field.
func (f *PolyFilter) WhereActivityName(p entql.StringP) {
	f.Where(p.Field(poly.FieldActivityName))
}

// WhereActivityDesc applies the entql string predicate on the activity_desc field.
func (f *PolyFilter) WhereActivityDesc(p entql.StringP) {
	f.Where(p.Field(poly.FieldActivityDesc))
}

// WhereActivityBudget applies the entql int64 predicate on the activity_budget field.
func (f *PolyFilter) WhereActivityBudget(p entql.Int64P) {
	f.Where(p.Field(poly.FieldActivityBudget))
}

// WhereActivityStartTime applies the entql time.Time predicate on the activity_start_time field.
func (f *PolyFilter) WhereActivityStartTime(p entql.TimeP) {
	f.Where(p.Field(poly.FieldActivityStartTime))
}

// WhereActivityEndTime applies the entql time.Time predicate on the activity_end_time field.
func (f *PolyFilter) WhereActivityEndTime(p entql.TimeP) {
	f.Where(p.Field(poly.FieldActivityEndTime))
}

// WhereActivityStatus applies the entql int predicate on the activity_status field.
func (f *PolyFilter) WhereActivityStatus(p entql.IntP) {
	f.Where(p.Field(poly.FieldActivityStatus))
}

// WhereActivityType applies the entql int predicate on the activity_type field.
func (f *PolyFilter) WhereActivityType(p entql.IntP) {
	f.Where(p.Field(poly.FieldActivityType))
}
