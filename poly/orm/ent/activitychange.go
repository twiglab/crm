// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/twiglab/crm/poly/orm/ent/activitychange"
)

// ActivityChange is the model entity for the ActivityChange schema.
type ActivityChange struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// ActivityCode holds the value of the "activity_code" field.
	ActivityCode string `json:"activity_code,omitempty"`
	// Operator holds the value of the "operator" field.
	Operator string `json:"operator,omitempty"`
	// SubmitTime holds the value of the "submit_time" field.
	SubmitTime time.Time `json:"submit_time,omitempty"`
	// Approver holds the value of the "approver" field.
	Approver string `json:"approver,omitempty"`
	// ApproveTime holds the value of the "approve_time" field.
	ApproveTime time.Time `json:"approve_time,omitempty"`
	// Status holds the value of the "status" field.
	Status int `json:"status,omitempty"`
	// ChangeSummary holds the value of the "change_summary" field.
	ChangeSummary string `json:"change_summary,omitempty"`
	// ChangeReason holds the value of the "change_reason" field.
	ChangeReason string `json:"change_reason,omitempty"`
	// ChangeRecord holds the value of the "change_record" field.
	ChangeRecord string `json:"change_record,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ActivityChange) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case activitychange.FieldStatus:
			values[i] = new(sql.NullInt64)
		case activitychange.FieldCode, activitychange.FieldActivityCode, activitychange.FieldOperator, activitychange.FieldApprover, activitychange.FieldChangeSummary, activitychange.FieldChangeReason, activitychange.FieldChangeRecord:
			values[i] = new(sql.NullString)
		case activitychange.FieldSubmitTime, activitychange.FieldApproveTime:
			values[i] = new(sql.NullTime)
		case activitychange.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ActivityChange fields.
func (ac *ActivityChange) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case activitychange.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ac.ID = *value
			}
		case activitychange.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				ac.Code = value.String
			}
		case activitychange.FieldActivityCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field activity_code", values[i])
			} else if value.Valid {
				ac.ActivityCode = value.String
			}
		case activitychange.FieldOperator:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field operator", values[i])
			} else if value.Valid {
				ac.Operator = value.String
			}
		case activitychange.FieldSubmitTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field submit_time", values[i])
			} else if value.Valid {
				ac.SubmitTime = value.Time
			}
		case activitychange.FieldApprover:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field approver", values[i])
			} else if value.Valid {
				ac.Approver = value.String
			}
		case activitychange.FieldApproveTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field approve_time", values[i])
			} else if value.Valid {
				ac.ApproveTime = value.Time
			}
		case activitychange.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ac.Status = int(value.Int64)
			}
		case activitychange.FieldChangeSummary:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field change_summary", values[i])
			} else if value.Valid {
				ac.ChangeSummary = value.String
			}
		case activitychange.FieldChangeReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field change_reason", values[i])
			} else if value.Valid {
				ac.ChangeReason = value.String
			}
		case activitychange.FieldChangeRecord:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field change_record", values[i])
			} else if value.Valid {
				ac.ChangeRecord = value.String
			}
		default:
			ac.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ActivityChange.
// This includes values selected through modifiers, order, etc.
func (ac *ActivityChange) Value(name string) (ent.Value, error) {
	return ac.selectValues.Get(name)
}

// Update returns a builder for updating this ActivityChange.
// Note that you need to call ActivityChange.Unwrap() before calling this method if this ActivityChange
// was returned from a transaction, and the transaction was committed or rolled back.
func (ac *ActivityChange) Update() *ActivityChangeUpdateOne {
	return NewActivityChangeClient(ac.config).UpdateOne(ac)
}

// Unwrap unwraps the ActivityChange entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ac *ActivityChange) Unwrap() *ActivityChange {
	_tx, ok := ac.config.driver.(*txDriver)
	if !ok {
		panic("ent: ActivityChange is not a transactional entity")
	}
	ac.config.driver = _tx.drv
	return ac
}

// String implements the fmt.Stringer.
func (ac *ActivityChange) String() string {
	var builder strings.Builder
	builder.WriteString("ActivityChange(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ac.ID))
	builder.WriteString("code=")
	builder.WriteString(ac.Code)
	builder.WriteString(", ")
	builder.WriteString("activity_code=")
	builder.WriteString(ac.ActivityCode)
	builder.WriteString(", ")
	builder.WriteString("operator=")
	builder.WriteString(ac.Operator)
	builder.WriteString(", ")
	builder.WriteString("submit_time=")
	builder.WriteString(ac.SubmitTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("approver=")
	builder.WriteString(ac.Approver)
	builder.WriteString(", ")
	builder.WriteString("approve_time=")
	builder.WriteString(ac.ApproveTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", ac.Status))
	builder.WriteString(", ")
	builder.WriteString("change_summary=")
	builder.WriteString(ac.ChangeSummary)
	builder.WriteString(", ")
	builder.WriteString("change_reason=")
	builder.WriteString(ac.ChangeReason)
	builder.WriteString(", ")
	builder.WriteString("change_record=")
	builder.WriteString(ac.ChangeRecord)
	builder.WriteByte(')')
	return builder.String()
}

// ActivityChanges is a parsable slice of ActivityChange.
type ActivityChanges []*ActivityChange
