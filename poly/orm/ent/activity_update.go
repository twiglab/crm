// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/twiglab/crm/poly/orm/ent/activity"
	"github.com/twiglab/crm/poly/orm/ent/predicate"
)

// ActivityUpdate is the builder for updating Activity entities.
type ActivityUpdate struct {
	config
	hooks    []Hook
	mutation *ActivityMutation
}

// Where appends a list predicates to the ActivityUpdate builder.
func (au *ActivityUpdate) Where(ps ...predicate.Activity) *ActivityUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetOperator sets the "operator" field.
func (au *ActivityUpdate) SetOperator(s string) *ActivityUpdate {
	au.mutation.SetOperator(s)
	return au
}

// SetNillableOperator sets the "operator" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableOperator(s *string) *ActivityUpdate {
	if s != nil {
		au.SetOperator(*s)
	}
	return au
}

// SetApprover sets the "approver" field.
func (au *ActivityUpdate) SetApprover(s string) *ActivityUpdate {
	au.mutation.SetApprover(s)
	return au
}

// SetNillableApprover sets the "approver" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableApprover(s *string) *ActivityUpdate {
	if s != nil {
		au.SetApprover(*s)
	}
	return au
}

// SetActivityApproveTime sets the "activity_approve_time" field.
func (au *ActivityUpdate) SetActivityApproveTime(t time.Time) *ActivityUpdate {
	au.mutation.SetActivityApproveTime(t)
	return au
}

// SetNillableActivityApproveTime sets the "activity_approve_time" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableActivityApproveTime(t *time.Time) *ActivityUpdate {
	if t != nil {
		au.SetActivityApproveTime(*t)
	}
	return au
}

// SetPrincipal sets the "principal" field.
func (au *ActivityUpdate) SetPrincipal(s string) *ActivityUpdate {
	au.mutation.SetPrincipal(s)
	return au
}

// SetNillablePrincipal sets the "principal" field if the given value is not nil.
func (au *ActivityUpdate) SetNillablePrincipal(s *string) *ActivityUpdate {
	if s != nil {
		au.SetPrincipal(*s)
	}
	return au
}

// SetActivityName sets the "activity_name" field.
func (au *ActivityUpdate) SetActivityName(s string) *ActivityUpdate {
	au.mutation.SetActivityName(s)
	return au
}

// SetNillableActivityName sets the "activity_name" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableActivityName(s *string) *ActivityUpdate {
	if s != nil {
		au.SetActivityName(*s)
	}
	return au
}

// SetActivityDesc sets the "activity_desc" field.
func (au *ActivityUpdate) SetActivityDesc(s string) *ActivityUpdate {
	au.mutation.SetActivityDesc(s)
	return au
}

// SetNillableActivityDesc sets the "activity_desc" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableActivityDesc(s *string) *ActivityUpdate {
	if s != nil {
		au.SetActivityDesc(*s)
	}
	return au
}

// SetActivityBudget sets the "activity_budget" field.
func (au *ActivityUpdate) SetActivityBudget(i int64) *ActivityUpdate {
	au.mutation.ResetActivityBudget()
	au.mutation.SetActivityBudget(i)
	return au
}

// SetNillableActivityBudget sets the "activity_budget" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableActivityBudget(i *int64) *ActivityUpdate {
	if i != nil {
		au.SetActivityBudget(*i)
	}
	return au
}

// AddActivityBudget adds i to the "activity_budget" field.
func (au *ActivityUpdate) AddActivityBudget(i int64) *ActivityUpdate {
	au.mutation.AddActivityBudget(i)
	return au
}

// SetActivityStartTime sets the "activity_start_time" field.
func (au *ActivityUpdate) SetActivityStartTime(t time.Time) *ActivityUpdate {
	au.mutation.SetActivityStartTime(t)
	return au
}

// SetNillableActivityStartTime sets the "activity_start_time" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableActivityStartTime(t *time.Time) *ActivityUpdate {
	if t != nil {
		au.SetActivityStartTime(*t)
	}
	return au
}

// SetActivityEndTime sets the "activity_end_time" field.
func (au *ActivityUpdate) SetActivityEndTime(t time.Time) *ActivityUpdate {
	au.mutation.SetActivityEndTime(t)
	return au
}

// SetNillableActivityEndTime sets the "activity_end_time" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableActivityEndTime(t *time.Time) *ActivityUpdate {
	if t != nil {
		au.SetActivityEndTime(*t)
	}
	return au
}

// SetActivityStatus sets the "activity_status" field.
func (au *ActivityUpdate) SetActivityStatus(i int) *ActivityUpdate {
	au.mutation.ResetActivityStatus()
	au.mutation.SetActivityStatus(i)
	return au
}

// SetNillableActivityStatus sets the "activity_status" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableActivityStatus(i *int) *ActivityUpdate {
	if i != nil {
		au.SetActivityStatus(*i)
	}
	return au
}

// AddActivityStatus adds i to the "activity_status" field.
func (au *ActivityUpdate) AddActivityStatus(i int) *ActivityUpdate {
	au.mutation.AddActivityStatus(i)
	return au
}

// SetActivityType sets the "activity_type" field.
func (au *ActivityUpdate) SetActivityType(i int) *ActivityUpdate {
	au.mutation.ResetActivityType()
	au.mutation.SetActivityType(i)
	return au
}

// SetNillableActivityType sets the "activity_type" field if the given value is not nil.
func (au *ActivityUpdate) SetNillableActivityType(i *int) *ActivityUpdate {
	if i != nil {
		au.SetActivityType(*i)
	}
	return au
}

// AddActivityType adds i to the "activity_type" field.
func (au *ActivityUpdate) AddActivityType(i int) *ActivityUpdate {
	au.mutation.AddActivityType(i)
	return au
}

// Mutation returns the ActivityMutation object of the builder.
func (au *ActivityUpdate) Mutation() *ActivityMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *ActivityUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *ActivityUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *ActivityUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *ActivityUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *ActivityUpdate) check() error {
	if v, ok := au.mutation.Operator(); ok {
		if err := activity.OperatorValidator(v); err != nil {
			return &ValidationError{Name: "operator", err: fmt.Errorf(`ent: validator failed for field "Activity.operator": %w`, err)}
		}
	}
	if v, ok := au.mutation.Approver(); ok {
		if err := activity.ApproverValidator(v); err != nil {
			return &ValidationError{Name: "approver", err: fmt.Errorf(`ent: validator failed for field "Activity.approver": %w`, err)}
		}
	}
	if v, ok := au.mutation.Principal(); ok {
		if err := activity.PrincipalValidator(v); err != nil {
			return &ValidationError{Name: "principal", err: fmt.Errorf(`ent: validator failed for field "Activity.principal": %w`, err)}
		}
	}
	if v, ok := au.mutation.ActivityName(); ok {
		if err := activity.ActivityNameValidator(v); err != nil {
			return &ValidationError{Name: "activity_name", err: fmt.Errorf(`ent: validator failed for field "Activity.activity_name": %w`, err)}
		}
	}
	if v, ok := au.mutation.ActivityDesc(); ok {
		if err := activity.ActivityDescValidator(v); err != nil {
			return &ValidationError{Name: "activity_desc", err: fmt.Errorf(`ent: validator failed for field "Activity.activity_desc": %w`, err)}
		}
	}
	return nil
}

func (au *ActivityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(activity.Table, activity.Columns, sqlgraph.NewFieldSpec(activity.FieldID, field.TypeUUID))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Operator(); ok {
		_spec.SetField(activity.FieldOperator, field.TypeString, value)
	}
	if value, ok := au.mutation.Approver(); ok {
		_spec.SetField(activity.FieldApprover, field.TypeString, value)
	}
	if value, ok := au.mutation.ActivityApproveTime(); ok {
		_spec.SetField(activity.FieldActivityApproveTime, field.TypeTime, value)
	}
	if value, ok := au.mutation.Principal(); ok {
		_spec.SetField(activity.FieldPrincipal, field.TypeString, value)
	}
	if value, ok := au.mutation.ActivityName(); ok {
		_spec.SetField(activity.FieldActivityName, field.TypeString, value)
	}
	if value, ok := au.mutation.ActivityDesc(); ok {
		_spec.SetField(activity.FieldActivityDesc, field.TypeString, value)
	}
	if value, ok := au.mutation.ActivityBudget(); ok {
		_spec.SetField(activity.FieldActivityBudget, field.TypeInt64, value)
	}
	if value, ok := au.mutation.AddedActivityBudget(); ok {
		_spec.AddField(activity.FieldActivityBudget, field.TypeInt64, value)
	}
	if value, ok := au.mutation.ActivityStartTime(); ok {
		_spec.SetField(activity.FieldActivityStartTime, field.TypeTime, value)
	}
	if value, ok := au.mutation.ActivityEndTime(); ok {
		_spec.SetField(activity.FieldActivityEndTime, field.TypeTime, value)
	}
	if value, ok := au.mutation.ActivityStatus(); ok {
		_spec.SetField(activity.FieldActivityStatus, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedActivityStatus(); ok {
		_spec.AddField(activity.FieldActivityStatus, field.TypeInt, value)
	}
	if value, ok := au.mutation.ActivityType(); ok {
		_spec.SetField(activity.FieldActivityType, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedActivityType(); ok {
		_spec.AddField(activity.FieldActivityType, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{activity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// ActivityUpdateOne is the builder for updating a single Activity entity.
type ActivityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ActivityMutation
}

// SetOperator sets the "operator" field.
func (auo *ActivityUpdateOne) SetOperator(s string) *ActivityUpdateOne {
	auo.mutation.SetOperator(s)
	return auo
}

// SetNillableOperator sets the "operator" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableOperator(s *string) *ActivityUpdateOne {
	if s != nil {
		auo.SetOperator(*s)
	}
	return auo
}

// SetApprover sets the "approver" field.
func (auo *ActivityUpdateOne) SetApprover(s string) *ActivityUpdateOne {
	auo.mutation.SetApprover(s)
	return auo
}

// SetNillableApprover sets the "approver" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableApprover(s *string) *ActivityUpdateOne {
	if s != nil {
		auo.SetApprover(*s)
	}
	return auo
}

// SetActivityApproveTime sets the "activity_approve_time" field.
func (auo *ActivityUpdateOne) SetActivityApproveTime(t time.Time) *ActivityUpdateOne {
	auo.mutation.SetActivityApproveTime(t)
	return auo
}

// SetNillableActivityApproveTime sets the "activity_approve_time" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableActivityApproveTime(t *time.Time) *ActivityUpdateOne {
	if t != nil {
		auo.SetActivityApproveTime(*t)
	}
	return auo
}

// SetPrincipal sets the "principal" field.
func (auo *ActivityUpdateOne) SetPrincipal(s string) *ActivityUpdateOne {
	auo.mutation.SetPrincipal(s)
	return auo
}

// SetNillablePrincipal sets the "principal" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillablePrincipal(s *string) *ActivityUpdateOne {
	if s != nil {
		auo.SetPrincipal(*s)
	}
	return auo
}

// SetActivityName sets the "activity_name" field.
func (auo *ActivityUpdateOne) SetActivityName(s string) *ActivityUpdateOne {
	auo.mutation.SetActivityName(s)
	return auo
}

// SetNillableActivityName sets the "activity_name" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableActivityName(s *string) *ActivityUpdateOne {
	if s != nil {
		auo.SetActivityName(*s)
	}
	return auo
}

// SetActivityDesc sets the "activity_desc" field.
func (auo *ActivityUpdateOne) SetActivityDesc(s string) *ActivityUpdateOne {
	auo.mutation.SetActivityDesc(s)
	return auo
}

// SetNillableActivityDesc sets the "activity_desc" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableActivityDesc(s *string) *ActivityUpdateOne {
	if s != nil {
		auo.SetActivityDesc(*s)
	}
	return auo
}

// SetActivityBudget sets the "activity_budget" field.
func (auo *ActivityUpdateOne) SetActivityBudget(i int64) *ActivityUpdateOne {
	auo.mutation.ResetActivityBudget()
	auo.mutation.SetActivityBudget(i)
	return auo
}

// SetNillableActivityBudget sets the "activity_budget" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableActivityBudget(i *int64) *ActivityUpdateOne {
	if i != nil {
		auo.SetActivityBudget(*i)
	}
	return auo
}

// AddActivityBudget adds i to the "activity_budget" field.
func (auo *ActivityUpdateOne) AddActivityBudget(i int64) *ActivityUpdateOne {
	auo.mutation.AddActivityBudget(i)
	return auo
}

// SetActivityStartTime sets the "activity_start_time" field.
func (auo *ActivityUpdateOne) SetActivityStartTime(t time.Time) *ActivityUpdateOne {
	auo.mutation.SetActivityStartTime(t)
	return auo
}

// SetNillableActivityStartTime sets the "activity_start_time" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableActivityStartTime(t *time.Time) *ActivityUpdateOne {
	if t != nil {
		auo.SetActivityStartTime(*t)
	}
	return auo
}

// SetActivityEndTime sets the "activity_end_time" field.
func (auo *ActivityUpdateOne) SetActivityEndTime(t time.Time) *ActivityUpdateOne {
	auo.mutation.SetActivityEndTime(t)
	return auo
}

// SetNillableActivityEndTime sets the "activity_end_time" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableActivityEndTime(t *time.Time) *ActivityUpdateOne {
	if t != nil {
		auo.SetActivityEndTime(*t)
	}
	return auo
}

// SetActivityStatus sets the "activity_status" field.
func (auo *ActivityUpdateOne) SetActivityStatus(i int) *ActivityUpdateOne {
	auo.mutation.ResetActivityStatus()
	auo.mutation.SetActivityStatus(i)
	return auo
}

// SetNillableActivityStatus sets the "activity_status" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableActivityStatus(i *int) *ActivityUpdateOne {
	if i != nil {
		auo.SetActivityStatus(*i)
	}
	return auo
}

// AddActivityStatus adds i to the "activity_status" field.
func (auo *ActivityUpdateOne) AddActivityStatus(i int) *ActivityUpdateOne {
	auo.mutation.AddActivityStatus(i)
	return auo
}

// SetActivityType sets the "activity_type" field.
func (auo *ActivityUpdateOne) SetActivityType(i int) *ActivityUpdateOne {
	auo.mutation.ResetActivityType()
	auo.mutation.SetActivityType(i)
	return auo
}

// SetNillableActivityType sets the "activity_type" field if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableActivityType(i *int) *ActivityUpdateOne {
	if i != nil {
		auo.SetActivityType(*i)
	}
	return auo
}

// AddActivityType adds i to the "activity_type" field.
func (auo *ActivityUpdateOne) AddActivityType(i int) *ActivityUpdateOne {
	auo.mutation.AddActivityType(i)
	return auo
}

// Mutation returns the ActivityMutation object of the builder.
func (auo *ActivityUpdateOne) Mutation() *ActivityMutation {
	return auo.mutation
}

// Where appends a list predicates to the ActivityUpdate builder.
func (auo *ActivityUpdateOne) Where(ps ...predicate.Activity) *ActivityUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *ActivityUpdateOne) Select(field string, fields ...string) *ActivityUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Activity entity.
func (auo *ActivityUpdateOne) Save(ctx context.Context) (*Activity, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *ActivityUpdateOne) SaveX(ctx context.Context) *Activity {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *ActivityUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *ActivityUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *ActivityUpdateOne) check() error {
	if v, ok := auo.mutation.Operator(); ok {
		if err := activity.OperatorValidator(v); err != nil {
			return &ValidationError{Name: "operator", err: fmt.Errorf(`ent: validator failed for field "Activity.operator": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Approver(); ok {
		if err := activity.ApproverValidator(v); err != nil {
			return &ValidationError{Name: "approver", err: fmt.Errorf(`ent: validator failed for field "Activity.approver": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Principal(); ok {
		if err := activity.PrincipalValidator(v); err != nil {
			return &ValidationError{Name: "principal", err: fmt.Errorf(`ent: validator failed for field "Activity.principal": %w`, err)}
		}
	}
	if v, ok := auo.mutation.ActivityName(); ok {
		if err := activity.ActivityNameValidator(v); err != nil {
			return &ValidationError{Name: "activity_name", err: fmt.Errorf(`ent: validator failed for field "Activity.activity_name": %w`, err)}
		}
	}
	if v, ok := auo.mutation.ActivityDesc(); ok {
		if err := activity.ActivityDescValidator(v); err != nil {
			return &ValidationError{Name: "activity_desc", err: fmt.Errorf(`ent: validator failed for field "Activity.activity_desc": %w`, err)}
		}
	}
	return nil
}

func (auo *ActivityUpdateOne) sqlSave(ctx context.Context) (_node *Activity, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(activity.Table, activity.Columns, sqlgraph.NewFieldSpec(activity.FieldID, field.TypeUUID))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Activity.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, activity.FieldID)
		for _, f := range fields {
			if !activity.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != activity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Operator(); ok {
		_spec.SetField(activity.FieldOperator, field.TypeString, value)
	}
	if value, ok := auo.mutation.Approver(); ok {
		_spec.SetField(activity.FieldApprover, field.TypeString, value)
	}
	if value, ok := auo.mutation.ActivityApproveTime(); ok {
		_spec.SetField(activity.FieldActivityApproveTime, field.TypeTime, value)
	}
	if value, ok := auo.mutation.Principal(); ok {
		_spec.SetField(activity.FieldPrincipal, field.TypeString, value)
	}
	if value, ok := auo.mutation.ActivityName(); ok {
		_spec.SetField(activity.FieldActivityName, field.TypeString, value)
	}
	if value, ok := auo.mutation.ActivityDesc(); ok {
		_spec.SetField(activity.FieldActivityDesc, field.TypeString, value)
	}
	if value, ok := auo.mutation.ActivityBudget(); ok {
		_spec.SetField(activity.FieldActivityBudget, field.TypeInt64, value)
	}
	if value, ok := auo.mutation.AddedActivityBudget(); ok {
		_spec.AddField(activity.FieldActivityBudget, field.TypeInt64, value)
	}
	if value, ok := auo.mutation.ActivityStartTime(); ok {
		_spec.SetField(activity.FieldActivityStartTime, field.TypeTime, value)
	}
	if value, ok := auo.mutation.ActivityEndTime(); ok {
		_spec.SetField(activity.FieldActivityEndTime, field.TypeTime, value)
	}
	if value, ok := auo.mutation.ActivityStatus(); ok {
		_spec.SetField(activity.FieldActivityStatus, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedActivityStatus(); ok {
		_spec.AddField(activity.FieldActivityStatus, field.TypeInt, value)
	}
	if value, ok := auo.mutation.ActivityType(); ok {
		_spec.SetField(activity.FieldActivityType, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedActivityType(); ok {
		_spec.AddField(activity.FieldActivityType, field.TypeInt, value)
	}
	_node = &Activity{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{activity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
