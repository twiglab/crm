// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/twiglab/crm/poly/orm/ent/poly"
)

// Poly is the model entity for the Poly schema.
type Poly struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// MallCode holds the value of the "mall_code" field.
	MallCode string `json:"mall_code,omitempty"`
	// Operator holds the value of the "operator" field.
	Operator string `json:"operator,omitempty"`
	// ActivityAddTime holds the value of the "activity_add_time" field.
	ActivityAddTime time.Time `json:"activity_add_time,omitempty"`
	// RuleCode holds the value of the "rule_code" field.
	RuleCode string `json:"rule_code,omitempty"`
	// ActivityName holds the value of the "activity_name" field.
	ActivityName string `json:"activity_name,omitempty"`
	// ActivityDesc holds the value of the "activity_desc" field.
	ActivityDesc string `json:"activity_desc,omitempty"`
	// ActivityBudget holds the value of the "activity_budget" field.
	ActivityBudget int64 `json:"activity_budget,omitempty"`
	// ActivityStartTime holds the value of the "activity_start_time" field.
	ActivityStartTime time.Time `json:"activity_start_time,omitempty"`
	// ActivityEndTime holds the value of the "activity_end_time" field.
	ActivityEndTime time.Time `json:"activity_end_time,omitempty"`
	// ActivityStatus holds the value of the "activity_status" field.
	ActivityStatus int `json:"activity_status,omitempty"`
	// ActivityType holds the value of the "activity_type" field.
	ActivityType int `json:"activity_type,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Poly) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case poly.FieldActivityBudget, poly.FieldActivityStatus, poly.FieldActivityType:
			values[i] = new(sql.NullInt64)
		case poly.FieldCode, poly.FieldMallCode, poly.FieldOperator, poly.FieldRuleCode, poly.FieldActivityName, poly.FieldActivityDesc:
			values[i] = new(sql.NullString)
		case poly.FieldActivityAddTime, poly.FieldActivityStartTime, poly.FieldActivityEndTime:
			values[i] = new(sql.NullTime)
		case poly.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Poly fields.
func (po *Poly) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case poly.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				po.ID = *value
			}
		case poly.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				po.Code = value.String
			}
		case poly.FieldMallCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mall_code", values[i])
			} else if value.Valid {
				po.MallCode = value.String
			}
		case poly.FieldOperator:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field operator", values[i])
			} else if value.Valid {
				po.Operator = value.String
			}
		case poly.FieldActivityAddTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field activity_add_time", values[i])
			} else if value.Valid {
				po.ActivityAddTime = value.Time
			}
		case poly.FieldRuleCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field rule_code", values[i])
			} else if value.Valid {
				po.RuleCode = value.String
			}
		case poly.FieldActivityName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field activity_name", values[i])
			} else if value.Valid {
				po.ActivityName = value.String
			}
		case poly.FieldActivityDesc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field activity_desc", values[i])
			} else if value.Valid {
				po.ActivityDesc = value.String
			}
		case poly.FieldActivityBudget:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field activity_budget", values[i])
			} else if value.Valid {
				po.ActivityBudget = value.Int64
			}
		case poly.FieldActivityStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field activity_start_time", values[i])
			} else if value.Valid {
				po.ActivityStartTime = value.Time
			}
		case poly.FieldActivityEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field activity_end_time", values[i])
			} else if value.Valid {
				po.ActivityEndTime = value.Time
			}
		case poly.FieldActivityStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field activity_status", values[i])
			} else if value.Valid {
				po.ActivityStatus = int(value.Int64)
			}
		case poly.FieldActivityType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field activity_type", values[i])
			} else if value.Valid {
				po.ActivityType = int(value.Int64)
			}
		default:
			po.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Poly.
// This includes values selected through modifiers, order, etc.
func (po *Poly) Value(name string) (ent.Value, error) {
	return po.selectValues.Get(name)
}

// Update returns a builder for updating this Poly.
// Note that you need to call Poly.Unwrap() before calling this method if this Poly
// was returned from a transaction, and the transaction was committed or rolled back.
func (po *Poly) Update() *PolyUpdateOne {
	return NewPolyClient(po.config).UpdateOne(po)
}

// Unwrap unwraps the Poly entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (po *Poly) Unwrap() *Poly {
	_tx, ok := po.config.driver.(*txDriver)
	if !ok {
		panic("ent: Poly is not a transactional entity")
	}
	po.config.driver = _tx.drv
	return po
}

// String implements the fmt.Stringer.
func (po *Poly) String() string {
	var builder strings.Builder
	builder.WriteString("Poly(")
	builder.WriteString(fmt.Sprintf("id=%v, ", po.ID))
	builder.WriteString("code=")
	builder.WriteString(po.Code)
	builder.WriteString(", ")
	builder.WriteString("mall_code=")
	builder.WriteString(po.MallCode)
	builder.WriteString(", ")
	builder.WriteString("operator=")
	builder.WriteString(po.Operator)
	builder.WriteString(", ")
	builder.WriteString("activity_add_time=")
	builder.WriteString(po.ActivityAddTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("rule_code=")
	builder.WriteString(po.RuleCode)
	builder.WriteString(", ")
	builder.WriteString("activity_name=")
	builder.WriteString(po.ActivityName)
	builder.WriteString(", ")
	builder.WriteString("activity_desc=")
	builder.WriteString(po.ActivityDesc)
	builder.WriteString(", ")
	builder.WriteString("activity_budget=")
	builder.WriteString(fmt.Sprintf("%v", po.ActivityBudget))
	builder.WriteString(", ")
	builder.WriteString("activity_start_time=")
	builder.WriteString(po.ActivityStartTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("activity_end_time=")
	builder.WriteString(po.ActivityEndTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("activity_status=")
	builder.WriteString(fmt.Sprintf("%v", po.ActivityStatus))
	builder.WriteString(", ")
	builder.WriteString("activity_type=")
	builder.WriteString(fmt.Sprintf("%v", po.ActivityType))
	builder.WriteByte(')')
	return builder.String()
}

// Polies is a parsable slice of Poly.
type Polies []*Poly
