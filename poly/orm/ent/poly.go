// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/twiglab/crm/poly/orm/ent/poly"
)

// Poly is the model entity for the Poly schema.
type Poly struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// MallCode holds the value of the "mall_code" field.
	MallCode string `json:"mall_code,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Memo holds the value of the "memo" field.
	Memo string `json:"memo,omitempty"`
	// StartTime holds the value of the "start_time" field.
	StartTime time.Time `json:"start_time,omitempty"`
	// EndTime holds the value of the "end_time" field.
	EndTime time.Time `json:"end_time,omitempty"`
	// LogoPic holds the value of the "logo_pic" field.
	LogoPic string `json:"logo_pic,omitempty"`
	// Pic1 holds the value of the "pic1" field.
	Pic1 string `json:"pic1,omitempty"`
	// Pic2 holds the value of the "pic2" field.
	Pic2 string `json:"pic2,omitempty"`
	// Pic3 holds the value of the "pic3" field.
	Pic3 string `json:"pic3,omitempty"`
	// Menkan holds the value of the "menkan" field.
	Menkan string `json:"menkan,omitempty"`
	// Fafang holds the value of the "fafang" field.
	Fafang string `json:"fafang,omitempty"`
	// Xiaoqi holds the value of the "xiaoqi" field.
	Xiaoqi string `json:"xiaoqi,omitempty"`
	// Shiyong holds the value of the "shiyong" field.
	Shiyong string `json:"shiyong,omitempty"`
	// Status holds the value of the "status" field.
	Status int32 `json:"status,omitempty"`
	// Type holds the value of the "type" field.
	Type         int32 `json:"type,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Poly) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case poly.FieldStatus, poly.FieldType:
			values[i] = new(sql.NullInt64)
		case poly.FieldCode, poly.FieldMallCode, poly.FieldName, poly.FieldTitle, poly.FieldMemo, poly.FieldLogoPic, poly.FieldPic1, poly.FieldPic2, poly.FieldPic3, poly.FieldMenkan, poly.FieldFafang, poly.FieldXiaoqi, poly.FieldShiyong:
			values[i] = new(sql.NullString)
		case poly.FieldCreateTime, poly.FieldUpdateTime, poly.FieldStartTime, poly.FieldEndTime:
			values[i] = new(sql.NullTime)
		case poly.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Poly fields.
func (po *Poly) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case poly.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				po.ID = *value
			}
		case poly.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				po.CreateTime = value.Time
			}
		case poly.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				po.UpdateTime = value.Time
			}
		case poly.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				po.Code = value.String
			}
		case poly.FieldMallCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mall_code", values[i])
			} else if value.Valid {
				po.MallCode = value.String
			}
		case poly.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				po.Name = value.String
			}
		case poly.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				po.Title = value.String
			}
		case poly.FieldMemo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field memo", values[i])
			} else if value.Valid {
				po.Memo = value.String
			}
		case poly.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_time", values[i])
			} else if value.Valid {
				po.StartTime = value.Time
			}
		case poly.FieldEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_time", values[i])
			} else if value.Valid {
				po.EndTime = value.Time
			}
		case poly.FieldLogoPic:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field logo_pic", values[i])
			} else if value.Valid {
				po.LogoPic = value.String
			}
		case poly.FieldPic1:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pic1", values[i])
			} else if value.Valid {
				po.Pic1 = value.String
			}
		case poly.FieldPic2:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pic2", values[i])
			} else if value.Valid {
				po.Pic2 = value.String
			}
		case poly.FieldPic3:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pic3", values[i])
			} else if value.Valid {
				po.Pic3 = value.String
			}
		case poly.FieldMenkan:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field menkan", values[i])
			} else if value.Valid {
				po.Menkan = value.String
			}
		case poly.FieldFafang:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fafang", values[i])
			} else if value.Valid {
				po.Fafang = value.String
			}
		case poly.FieldXiaoqi:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field xiaoqi", values[i])
			} else if value.Valid {
				po.Xiaoqi = value.String
			}
		case poly.FieldShiyong:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shiyong", values[i])
			} else if value.Valid {
				po.Shiyong = value.String
			}
		case poly.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				po.Status = int32(value.Int64)
			}
		case poly.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				po.Type = int32(value.Int64)
			}
		default:
			po.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Poly.
// This includes values selected through modifiers, order, etc.
func (po *Poly) Value(name string) (ent.Value, error) {
	return po.selectValues.Get(name)
}

// Update returns a builder for updating this Poly.
// Note that you need to call Poly.Unwrap() before calling this method if this Poly
// was returned from a transaction, and the transaction was committed or rolled back.
func (po *Poly) Update() *PolyUpdateOne {
	return NewPolyClient(po.config).UpdateOne(po)
}

// Unwrap unwraps the Poly entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (po *Poly) Unwrap() *Poly {
	_tx, ok := po.config.driver.(*txDriver)
	if !ok {
		panic("ent: Poly is not a transactional entity")
	}
	po.config.driver = _tx.drv
	return po
}

// String implements the fmt.Stringer.
func (po *Poly) String() string {
	var builder strings.Builder
	builder.WriteString("Poly(")
	builder.WriteString(fmt.Sprintf("id=%v, ", po.ID))
	builder.WriteString("create_time=")
	builder.WriteString(po.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(po.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(po.Code)
	builder.WriteString(", ")
	builder.WriteString("mall_code=")
	builder.WriteString(po.MallCode)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(po.Name)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(po.Title)
	builder.WriteString(", ")
	builder.WriteString("memo=")
	builder.WriteString(po.Memo)
	builder.WriteString(", ")
	builder.WriteString("start_time=")
	builder.WriteString(po.StartTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_time=")
	builder.WriteString(po.EndTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("logo_pic=")
	builder.WriteString(po.LogoPic)
	builder.WriteString(", ")
	builder.WriteString("pic1=")
	builder.WriteString(po.Pic1)
	builder.WriteString(", ")
	builder.WriteString("pic2=")
	builder.WriteString(po.Pic2)
	builder.WriteString(", ")
	builder.WriteString("pic3=")
	builder.WriteString(po.Pic3)
	builder.WriteString(", ")
	builder.WriteString("menkan=")
	builder.WriteString(po.Menkan)
	builder.WriteString(", ")
	builder.WriteString("fafang=")
	builder.WriteString(po.Fafang)
	builder.WriteString(", ")
	builder.WriteString("xiaoqi=")
	builder.WriteString(po.Xiaoqi)
	builder.WriteString(", ")
	builder.WriteString("shiyong=")
	builder.WriteString(po.Shiyong)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", po.Status))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", po.Type))
	builder.WriteByte(')')
	return builder.String()
}

// Polies is a parsable slice of Poly.
type Polies []*Poly
