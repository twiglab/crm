// Code generated by ent, DO NOT EDIT.

package poly

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the poly type in the database.
	Label = "poly"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldMallCode holds the string denoting the mall_code field in the database.
	FieldMallCode = "mall_code"
	// FieldOperator holds the string denoting the operator field in the database.
	FieldOperator = "operator"
	// FieldActivityAddTime holds the string denoting the activity_add_time field in the database.
	FieldActivityAddTime = "activity_add_time"
	// FieldRuleCode holds the string denoting the rule_code field in the database.
	FieldRuleCode = "rule_code"
	// FieldActivityName holds the string denoting the activity_name field in the database.
	FieldActivityName = "activity_name"
	// FieldActivityDesc holds the string denoting the activity_desc field in the database.
	FieldActivityDesc = "activity_desc"
	// FieldActivityBudget holds the string denoting the activity_budget field in the database.
	FieldActivityBudget = "activity_budget"
	// FieldActivityStartTime holds the string denoting the activity_start_time field in the database.
	FieldActivityStartTime = "activity_start_time"
	// FieldActivityEndTime holds the string denoting the activity_end_time field in the database.
	FieldActivityEndTime = "activity_end_time"
	// FieldActivityStatus holds the string denoting the activity_status field in the database.
	FieldActivityStatus = "activity_status"
	// FieldActivityType holds the string denoting the activity_type field in the database.
	FieldActivityType = "activity_type"
	// Table holds the table name of the poly in the database.
	Table = "polies"
)

// Columns holds all SQL columns for poly fields.
var Columns = []string{
	FieldID,
	FieldCode,
	FieldMallCode,
	FieldOperator,
	FieldActivityAddTime,
	FieldRuleCode,
	FieldActivityName,
	FieldActivityDesc,
	FieldActivityBudget,
	FieldActivityStartTime,
	FieldActivityEndTime,
	FieldActivityStatus,
	FieldActivityType,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCode holds the default value on creation for the "code" field.
	DefaultCode func() string
	// CodeValidator is a validator for the "code" field. It is called by the builders before save.
	CodeValidator func(string) error
	// MallCodeValidator is a validator for the "mall_code" field. It is called by the builders before save.
	MallCodeValidator func(string) error
	// OperatorValidator is a validator for the "operator" field. It is called by the builders before save.
	OperatorValidator func(string) error
	// RuleCodeValidator is a validator for the "rule_code" field. It is called by the builders before save.
	RuleCodeValidator func(string) error
	// ActivityNameValidator is a validator for the "activity_name" field. It is called by the builders before save.
	ActivityNameValidator func(string) error
	// ActivityDescValidator is a validator for the "activity_desc" field. It is called by the builders before save.
	ActivityDescValidator func(string) error
	// DefaultActivityStatus holds the default value on creation for the "activity_status" field.
	DefaultActivityStatus int
	// DefaultActivityType holds the default value on creation for the "activity_type" field.
	DefaultActivityType int
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Poly queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}

// ByMallCode orders the results by the mall_code field.
func ByMallCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMallCode, opts...).ToFunc()
}

// ByOperator orders the results by the operator field.
func ByOperator(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOperator, opts...).ToFunc()
}

// ByActivityAddTime orders the results by the activity_add_time field.
func ByActivityAddTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActivityAddTime, opts...).ToFunc()
}

// ByRuleCode orders the results by the rule_code field.
func ByRuleCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRuleCode, opts...).ToFunc()
}

// ByActivityName orders the results by the activity_name field.
func ByActivityName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActivityName, opts...).ToFunc()
}

// ByActivityDesc orders the results by the activity_desc field.
func ByActivityDesc(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActivityDesc, opts...).ToFunc()
}

// ByActivityBudget orders the results by the activity_budget field.
func ByActivityBudget(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActivityBudget, opts...).ToFunc()
}

// ByActivityStartTime orders the results by the activity_start_time field.
func ByActivityStartTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActivityStartTime, opts...).ToFunc()
}

// ByActivityEndTime orders the results by the activity_end_time field.
func ByActivityEndTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActivityEndTime, opts...).ToFunc()
}

// ByActivityStatus orders the results by the activity_status field.
func ByActivityStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActivityStatus, opts...).ToFunc()
}

// ByActivityType orders the results by the activity_type field.
func ByActivityType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActivityType, opts...).ToFunc()
}
