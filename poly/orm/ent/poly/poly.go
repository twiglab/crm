// Code generated by ent, DO NOT EDIT.

package poly

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the poly type in the database.
	Label = "poly"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldMallCode holds the string denoting the mall_code field in the database.
	FieldMallCode = "mall_code"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldMemo holds the string denoting the memo field in the database.
	FieldMemo = "memo"
	// FieldStartTime holds the string denoting the start_time field in the database.
	FieldStartTime = "start_time"
	// FieldEndTime holds the string denoting the end_time field in the database.
	FieldEndTime = "end_time"
	// FieldMenkan holds the string denoting the menkan field in the database.
	FieldMenkan = "menkan"
	// FieldFafang holds the string denoting the fafang field in the database.
	FieldFafang = "fafang"
	// FieldXiaoqi holds the string denoting the xiaoqi field in the database.
	FieldXiaoqi = "xiaoqi"
	// FieldShiyong holds the string denoting the shiyong field in the database.
	FieldShiyong = "shiyong"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// Table holds the table name of the poly in the database.
	Table = "t_poly"
)

// Columns holds all SQL columns for poly fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldCode,
	FieldMallCode,
	FieldName,
	FieldTitle,
	FieldMemo,
	FieldStartTime,
	FieldEndTime,
	FieldMenkan,
	FieldFafang,
	FieldXiaoqi,
	FieldShiyong,
	FieldStatus,
	FieldType,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultCode holds the default value on creation for the "code" field.
	DefaultCode func() string
	// CodeValidator is a validator for the "code" field. It is called by the builders before save.
	CodeValidator func(string) error
	// MallCodeValidator is a validator for the "mall_code" field. It is called by the builders before save.
	MallCodeValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// MemoValidator is a validator for the "memo" field. It is called by the builders before save.
	MemoValidator func(string) error
	// DefaultStartTime holds the default value on creation for the "start_time" field.
	DefaultStartTime func() time.Time
	// DefaultEndTime holds the default value on creation for the "end_time" field.
	DefaultEndTime func() time.Time
	// MenkanValidator is a validator for the "menkan" field. It is called by the builders before save.
	MenkanValidator func(string) error
	// FafangValidator is a validator for the "fafang" field. It is called by the builders before save.
	FafangValidator func(string) error
	// XiaoqiValidator is a validator for the "xiaoqi" field. It is called by the builders before save.
	XiaoqiValidator func(string) error
	// ShiyongValidator is a validator for the "shiyong" field. It is called by the builders before save.
	ShiyongValidator func(string) error
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus int32
	// DefaultType holds the default value on creation for the "type" field.
	DefaultType int32
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Poly queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}

// ByMallCode orders the results by the mall_code field.
func ByMallCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMallCode, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByMemo orders the results by the memo field.
func ByMemo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMemo, opts...).ToFunc()
}

// ByStartTime orders the results by the start_time field.
func ByStartTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartTime, opts...).ToFunc()
}

// ByEndTime orders the results by the end_time field.
func ByEndTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndTime, opts...).ToFunc()
}

// ByMenkan orders the results by the menkan field.
func ByMenkan(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMenkan, opts...).ToFunc()
}

// ByFafang orders the results by the fafang field.
func ByFafang(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFafang, opts...).ToFunc()
}

// ByXiaoqi orders the results by the xiaoqi field.
func ByXiaoqi(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldXiaoqi, opts...).ToFunc()
}

// ByShiyong orders the results by the shiyong field.
func ByShiyong(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShiyong, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}
