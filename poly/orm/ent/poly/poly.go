// Code generated by ent, DO NOT EDIT.

package poly

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the poly type in the database.
	Label = "poly"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldMallCode holds the string denoting the mall_code field in the database.
	FieldMallCode = "mall_code"
	// FieldOperator holds the string denoting the operator field in the database.
	FieldOperator = "operator"
	// FieldAddTime holds the string denoting the add_time field in the database.
	FieldAddTime = "add_time"
	// FieldRuleCode holds the string denoting the rule_code field in the database.
	FieldRuleCode = "rule_code"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDesc holds the string denoting the desc field in the database.
	FieldDesc = "desc"
	// FieldBudget holds the string denoting the budget field in the database.
	FieldBudget = "budget"
	// FieldStartTime holds the string denoting the start_time field in the database.
	FieldStartTime = "start_time"
	// FieldEndTime holds the string denoting the end_time field in the database.
	FieldEndTime = "end_time"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// Table holds the table name of the poly in the database.
	Table = "polies"
)

// Columns holds all SQL columns for poly fields.
var Columns = []string{
	FieldID,
	FieldCode,
	FieldMallCode,
	FieldOperator,
	FieldAddTime,
	FieldRuleCode,
	FieldName,
	FieldDesc,
	FieldBudget,
	FieldStartTime,
	FieldEndTime,
	FieldStatus,
	FieldType,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCode holds the default value on creation for the "code" field.
	DefaultCode func() string
	// CodeValidator is a validator for the "code" field. It is called by the builders before save.
	CodeValidator func(string) error
	// MallCodeValidator is a validator for the "mall_code" field. It is called by the builders before save.
	MallCodeValidator func(string) error
	// OperatorValidator is a validator for the "operator" field. It is called by the builders before save.
	OperatorValidator func(string) error
	// RuleCodeValidator is a validator for the "rule_code" field. It is called by the builders before save.
	RuleCodeValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DescValidator is a validator for the "desc" field. It is called by the builders before save.
	DescValidator func(string) error
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus int
	// DefaultType holds the default value on creation for the "type" field.
	DefaultType int
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Poly queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}

// ByMallCode orders the results by the mall_code field.
func ByMallCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMallCode, opts...).ToFunc()
}

// ByOperator orders the results by the operator field.
func ByOperator(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOperator, opts...).ToFunc()
}

// ByAddTime orders the results by the add_time field.
func ByAddTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddTime, opts...).ToFunc()
}

// ByRuleCode orders the results by the rule_code field.
func ByRuleCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRuleCode, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDesc orders the results by the desc field.
func ByDesc(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDesc, opts...).ToFunc()
}

// ByBudget orders the results by the budget field.
func ByBudget(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBudget, opts...).ToFunc()
}

// ByStartTime orders the results by the start_time field.
func ByStartTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartTime, opts...).ToFunc()
}

// ByEndTime orders the results by the end_time field.
func ByEndTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndTime, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}
