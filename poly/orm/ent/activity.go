// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/twiglab/crm/poly/orm/ent/activity"
)

// Activity is the model entity for the Activity schema.
type Activity struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// MallCode holds the value of the "mall_code" field.
	MallCode string `json:"mall_code,omitempty"`
	// Operator holds the value of the "operator" field.
	Operator string `json:"operator,omitempty"`
	// ActivityAddTime holds the value of the "activity_add_time" field.
	ActivityAddTime time.Time `json:"activity_add_time,omitempty"`
	// Approver holds the value of the "approver" field.
	Approver string `json:"approver,omitempty"`
	// ActivityApproveTime holds the value of the "activity_approve_time" field.
	ActivityApproveTime time.Time `json:"activity_approve_time,omitempty"`
	// Principal holds the value of the "principal" field.
	Principal string `json:"principal,omitempty"`
	// ActivityName holds the value of the "activity_name" field.
	ActivityName string `json:"activity_name,omitempty"`
	// ActivityDesc holds the value of the "activity_desc" field.
	ActivityDesc string `json:"activity_desc,omitempty"`
	// ActivityBudget holds the value of the "activity_budget" field.
	ActivityBudget int64 `json:"activity_budget,omitempty"`
	// ActivityStartTime holds the value of the "activity_start_time" field.
	ActivityStartTime time.Time `json:"activity_start_time,omitempty"`
	// ActivityEndTime holds the value of the "activity_end_time" field.
	ActivityEndTime time.Time `json:"activity_end_time,omitempty"`
	// ActivityStatus holds the value of the "activity_status" field.
	ActivityStatus int `json:"activity_status,omitempty"`
	// ActivityType holds the value of the "activity_type" field.
	ActivityType int `json:"activity_type,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Activity) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case activity.FieldActivityBudget, activity.FieldActivityStatus, activity.FieldActivityType:
			values[i] = new(sql.NullInt64)
		case activity.FieldCode, activity.FieldMallCode, activity.FieldOperator, activity.FieldApprover, activity.FieldPrincipal, activity.FieldActivityName, activity.FieldActivityDesc:
			values[i] = new(sql.NullString)
		case activity.FieldActivityAddTime, activity.FieldActivityApproveTime, activity.FieldActivityStartTime, activity.FieldActivityEndTime:
			values[i] = new(sql.NullTime)
		case activity.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Activity fields.
func (a *Activity) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case activity.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				a.ID = *value
			}
		case activity.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				a.Code = value.String
			}
		case activity.FieldMallCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mall_code", values[i])
			} else if value.Valid {
				a.MallCode = value.String
			}
		case activity.FieldOperator:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field operator", values[i])
			} else if value.Valid {
				a.Operator = value.String
			}
		case activity.FieldActivityAddTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field activity_add_time", values[i])
			} else if value.Valid {
				a.ActivityAddTime = value.Time
			}
		case activity.FieldApprover:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field approver", values[i])
			} else if value.Valid {
				a.Approver = value.String
			}
		case activity.FieldActivityApproveTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field activity_approve_time", values[i])
			} else if value.Valid {
				a.ActivityApproveTime = value.Time
			}
		case activity.FieldPrincipal:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field principal", values[i])
			} else if value.Valid {
				a.Principal = value.String
			}
		case activity.FieldActivityName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field activity_name", values[i])
			} else if value.Valid {
				a.ActivityName = value.String
			}
		case activity.FieldActivityDesc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field activity_desc", values[i])
			} else if value.Valid {
				a.ActivityDesc = value.String
			}
		case activity.FieldActivityBudget:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field activity_budget", values[i])
			} else if value.Valid {
				a.ActivityBudget = value.Int64
			}
		case activity.FieldActivityStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field activity_start_time", values[i])
			} else if value.Valid {
				a.ActivityStartTime = value.Time
			}
		case activity.FieldActivityEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field activity_end_time", values[i])
			} else if value.Valid {
				a.ActivityEndTime = value.Time
			}
		case activity.FieldActivityStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field activity_status", values[i])
			} else if value.Valid {
				a.ActivityStatus = int(value.Int64)
			}
		case activity.FieldActivityType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field activity_type", values[i])
			} else if value.Valid {
				a.ActivityType = int(value.Int64)
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Activity.
// This includes values selected through modifiers, order, etc.
func (a *Activity) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// Update returns a builder for updating this Activity.
// Note that you need to call Activity.Unwrap() before calling this method if this Activity
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Activity) Update() *ActivityUpdateOne {
	return NewActivityClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Activity entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Activity) Unwrap() *Activity {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Activity is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Activity) String() string {
	var builder strings.Builder
	builder.WriteString("Activity(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("code=")
	builder.WriteString(a.Code)
	builder.WriteString(", ")
	builder.WriteString("mall_code=")
	builder.WriteString(a.MallCode)
	builder.WriteString(", ")
	builder.WriteString("operator=")
	builder.WriteString(a.Operator)
	builder.WriteString(", ")
	builder.WriteString("activity_add_time=")
	builder.WriteString(a.ActivityAddTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("approver=")
	builder.WriteString(a.Approver)
	builder.WriteString(", ")
	builder.WriteString("activity_approve_time=")
	builder.WriteString(a.ActivityApproveTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("principal=")
	builder.WriteString(a.Principal)
	builder.WriteString(", ")
	builder.WriteString("activity_name=")
	builder.WriteString(a.ActivityName)
	builder.WriteString(", ")
	builder.WriteString("activity_desc=")
	builder.WriteString(a.ActivityDesc)
	builder.WriteString(", ")
	builder.WriteString("activity_budget=")
	builder.WriteString(fmt.Sprintf("%v", a.ActivityBudget))
	builder.WriteString(", ")
	builder.WriteString("activity_start_time=")
	builder.WriteString(a.ActivityStartTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("activity_end_time=")
	builder.WriteString(a.ActivityEndTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("activity_status=")
	builder.WriteString(fmt.Sprintf("%v", a.ActivityStatus))
	builder.WriteString(", ")
	builder.WriteString("activity_type=")
	builder.WriteString(fmt.Sprintf("%v", a.ActivityType))
	builder.WriteByte(')')
	return builder.String()
}

// Activities is a parsable slice of Activity.
type Activities []*Activity
