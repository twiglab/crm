// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/twiglab/crm/poly/orm/ent/poly"
)

// PolyCreate is the builder for creating a Poly entity.
type PolyCreate struct {
	config
	mutation *PolyMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCode sets the "code" field.
func (pc *PolyCreate) SetCode(s string) *PolyCreate {
	pc.mutation.SetCode(s)
	return pc
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (pc *PolyCreate) SetNillableCode(s *string) *PolyCreate {
	if s != nil {
		pc.SetCode(*s)
	}
	return pc
}

// SetMallCode sets the "mall_code" field.
func (pc *PolyCreate) SetMallCode(s string) *PolyCreate {
	pc.mutation.SetMallCode(s)
	return pc
}

// SetOperator sets the "operator" field.
func (pc *PolyCreate) SetOperator(s string) *PolyCreate {
	pc.mutation.SetOperator(s)
	return pc
}

// SetActivityAddTime sets the "activity_add_time" field.
func (pc *PolyCreate) SetActivityAddTime(t time.Time) *PolyCreate {
	pc.mutation.SetActivityAddTime(t)
	return pc
}

// SetRuleCode sets the "rule_code" field.
func (pc *PolyCreate) SetRuleCode(s string) *PolyCreate {
	pc.mutation.SetRuleCode(s)
	return pc
}

// SetActivityName sets the "activity_name" field.
func (pc *PolyCreate) SetActivityName(s string) *PolyCreate {
	pc.mutation.SetActivityName(s)
	return pc
}

// SetActivityDesc sets the "activity_desc" field.
func (pc *PolyCreate) SetActivityDesc(s string) *PolyCreate {
	pc.mutation.SetActivityDesc(s)
	return pc
}

// SetActivityBudget sets the "activity_budget" field.
func (pc *PolyCreate) SetActivityBudget(i int64) *PolyCreate {
	pc.mutation.SetActivityBudget(i)
	return pc
}

// SetActivityStartTime sets the "activity_start_time" field.
func (pc *PolyCreate) SetActivityStartTime(t time.Time) *PolyCreate {
	pc.mutation.SetActivityStartTime(t)
	return pc
}

// SetActivityEndTime sets the "activity_end_time" field.
func (pc *PolyCreate) SetActivityEndTime(t time.Time) *PolyCreate {
	pc.mutation.SetActivityEndTime(t)
	return pc
}

// SetActivityStatus sets the "activity_status" field.
func (pc *PolyCreate) SetActivityStatus(i int) *PolyCreate {
	pc.mutation.SetActivityStatus(i)
	return pc
}

// SetNillableActivityStatus sets the "activity_status" field if the given value is not nil.
func (pc *PolyCreate) SetNillableActivityStatus(i *int) *PolyCreate {
	if i != nil {
		pc.SetActivityStatus(*i)
	}
	return pc
}

// SetActivityType sets the "activity_type" field.
func (pc *PolyCreate) SetActivityType(i int) *PolyCreate {
	pc.mutation.SetActivityType(i)
	return pc
}

// SetNillableActivityType sets the "activity_type" field if the given value is not nil.
func (pc *PolyCreate) SetNillableActivityType(i *int) *PolyCreate {
	if i != nil {
		pc.SetActivityType(*i)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *PolyCreate) SetID(u uuid.UUID) *PolyCreate {
	pc.mutation.SetID(u)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *PolyCreate) SetNillableID(u *uuid.UUID) *PolyCreate {
	if u != nil {
		pc.SetID(*u)
	}
	return pc
}

// Mutation returns the PolyMutation object of the builder.
func (pc *PolyCreate) Mutation() *PolyMutation {
	return pc.mutation
}

// Save creates the Poly in the database.
func (pc *PolyCreate) Save(ctx context.Context) (*Poly, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PolyCreate) SaveX(ctx context.Context) *Poly {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PolyCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PolyCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PolyCreate) defaults() {
	if _, ok := pc.mutation.Code(); !ok {
		v := poly.DefaultCode()
		pc.mutation.SetCode(v)
	}
	if _, ok := pc.mutation.ActivityStatus(); !ok {
		v := poly.DefaultActivityStatus
		pc.mutation.SetActivityStatus(v)
	}
	if _, ok := pc.mutation.ActivityType(); !ok {
		v := poly.DefaultActivityType
		pc.mutation.SetActivityType(v)
	}
	if _, ok := pc.mutation.ID(); !ok {
		v := poly.DefaultID()
		pc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PolyCreate) check() error {
	if _, ok := pc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "Poly.code"`)}
	}
	if v, ok := pc.mutation.Code(); ok {
		if err := poly.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Poly.code": %w`, err)}
		}
	}
	if _, ok := pc.mutation.MallCode(); !ok {
		return &ValidationError{Name: "mall_code", err: errors.New(`ent: missing required field "Poly.mall_code"`)}
	}
	if v, ok := pc.mutation.MallCode(); ok {
		if err := poly.MallCodeValidator(v); err != nil {
			return &ValidationError{Name: "mall_code", err: fmt.Errorf(`ent: validator failed for field "Poly.mall_code": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Operator(); !ok {
		return &ValidationError{Name: "operator", err: errors.New(`ent: missing required field "Poly.operator"`)}
	}
	if v, ok := pc.mutation.Operator(); ok {
		if err := poly.OperatorValidator(v); err != nil {
			return &ValidationError{Name: "operator", err: fmt.Errorf(`ent: validator failed for field "Poly.operator": %w`, err)}
		}
	}
	if _, ok := pc.mutation.ActivityAddTime(); !ok {
		return &ValidationError{Name: "activity_add_time", err: errors.New(`ent: missing required field "Poly.activity_add_time"`)}
	}
	if _, ok := pc.mutation.RuleCode(); !ok {
		return &ValidationError{Name: "rule_code", err: errors.New(`ent: missing required field "Poly.rule_code"`)}
	}
	if v, ok := pc.mutation.RuleCode(); ok {
		if err := poly.RuleCodeValidator(v); err != nil {
			return &ValidationError{Name: "rule_code", err: fmt.Errorf(`ent: validator failed for field "Poly.rule_code": %w`, err)}
		}
	}
	if _, ok := pc.mutation.ActivityName(); !ok {
		return &ValidationError{Name: "activity_name", err: errors.New(`ent: missing required field "Poly.activity_name"`)}
	}
	if v, ok := pc.mutation.ActivityName(); ok {
		if err := poly.ActivityNameValidator(v); err != nil {
			return &ValidationError{Name: "activity_name", err: fmt.Errorf(`ent: validator failed for field "Poly.activity_name": %w`, err)}
		}
	}
	if _, ok := pc.mutation.ActivityDesc(); !ok {
		return &ValidationError{Name: "activity_desc", err: errors.New(`ent: missing required field "Poly.activity_desc"`)}
	}
	if v, ok := pc.mutation.ActivityDesc(); ok {
		if err := poly.ActivityDescValidator(v); err != nil {
			return &ValidationError{Name: "activity_desc", err: fmt.Errorf(`ent: validator failed for field "Poly.activity_desc": %w`, err)}
		}
	}
	if _, ok := pc.mutation.ActivityBudget(); !ok {
		return &ValidationError{Name: "activity_budget", err: errors.New(`ent: missing required field "Poly.activity_budget"`)}
	}
	if _, ok := pc.mutation.ActivityStartTime(); !ok {
		return &ValidationError{Name: "activity_start_time", err: errors.New(`ent: missing required field "Poly.activity_start_time"`)}
	}
	if _, ok := pc.mutation.ActivityEndTime(); !ok {
		return &ValidationError{Name: "activity_end_time", err: errors.New(`ent: missing required field "Poly.activity_end_time"`)}
	}
	if _, ok := pc.mutation.ActivityStatus(); !ok {
		return &ValidationError{Name: "activity_status", err: errors.New(`ent: missing required field "Poly.activity_status"`)}
	}
	if _, ok := pc.mutation.ActivityType(); !ok {
		return &ValidationError{Name: "activity_type", err: errors.New(`ent: missing required field "Poly.activity_type"`)}
	}
	return nil
}

func (pc *PolyCreate) sqlSave(ctx context.Context) (*Poly, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PolyCreate) createSpec() (*Poly, *sqlgraph.CreateSpec) {
	var (
		_node = &Poly{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(poly.Table, sqlgraph.NewFieldSpec(poly.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = pc.conflict
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pc.mutation.Code(); ok {
		_spec.SetField(poly.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := pc.mutation.MallCode(); ok {
		_spec.SetField(poly.FieldMallCode, field.TypeString, value)
		_node.MallCode = value
	}
	if value, ok := pc.mutation.Operator(); ok {
		_spec.SetField(poly.FieldOperator, field.TypeString, value)
		_node.Operator = value
	}
	if value, ok := pc.mutation.ActivityAddTime(); ok {
		_spec.SetField(poly.FieldActivityAddTime, field.TypeTime, value)
		_node.ActivityAddTime = value
	}
	if value, ok := pc.mutation.RuleCode(); ok {
		_spec.SetField(poly.FieldRuleCode, field.TypeString, value)
		_node.RuleCode = value
	}
	if value, ok := pc.mutation.ActivityName(); ok {
		_spec.SetField(poly.FieldActivityName, field.TypeString, value)
		_node.ActivityName = value
	}
	if value, ok := pc.mutation.ActivityDesc(); ok {
		_spec.SetField(poly.FieldActivityDesc, field.TypeString, value)
		_node.ActivityDesc = value
	}
	if value, ok := pc.mutation.ActivityBudget(); ok {
		_spec.SetField(poly.FieldActivityBudget, field.TypeInt64, value)
		_node.ActivityBudget = value
	}
	if value, ok := pc.mutation.ActivityStartTime(); ok {
		_spec.SetField(poly.FieldActivityStartTime, field.TypeTime, value)
		_node.ActivityStartTime = value
	}
	if value, ok := pc.mutation.ActivityEndTime(); ok {
		_spec.SetField(poly.FieldActivityEndTime, field.TypeTime, value)
		_node.ActivityEndTime = value
	}
	if value, ok := pc.mutation.ActivityStatus(); ok {
		_spec.SetField(poly.FieldActivityStatus, field.TypeInt, value)
		_node.ActivityStatus = value
	}
	if value, ok := pc.mutation.ActivityType(); ok {
		_spec.SetField(poly.FieldActivityType, field.TypeInt, value)
		_node.ActivityType = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Poly.Create().
//		SetCode(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PolyUpsert) {
//			SetCode(v+v).
//		}).
//		Exec(ctx)
func (pc *PolyCreate) OnConflict(opts ...sql.ConflictOption) *PolyUpsertOne {
	pc.conflict = opts
	return &PolyUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Poly.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pc *PolyCreate) OnConflictColumns(columns ...string) *PolyUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &PolyUpsertOne{
		create: pc,
	}
}

type (
	// PolyUpsertOne is the builder for "upsert"-ing
	//  one Poly node.
	PolyUpsertOne struct {
		create *PolyCreate
	}

	// PolyUpsert is the "OnConflict" setter.
	PolyUpsert struct {
		*sql.UpdateSet
	}
)

// SetOperator sets the "operator" field.
func (u *PolyUpsert) SetOperator(v string) *PolyUpsert {
	u.Set(poly.FieldOperator, v)
	return u
}

// UpdateOperator sets the "operator" field to the value that was provided on create.
func (u *PolyUpsert) UpdateOperator() *PolyUpsert {
	u.SetExcluded(poly.FieldOperator)
	return u
}

// SetRuleCode sets the "rule_code" field.
func (u *PolyUpsert) SetRuleCode(v string) *PolyUpsert {
	u.Set(poly.FieldRuleCode, v)
	return u
}

// UpdateRuleCode sets the "rule_code" field to the value that was provided on create.
func (u *PolyUpsert) UpdateRuleCode() *PolyUpsert {
	u.SetExcluded(poly.FieldRuleCode)
	return u
}

// SetActivityName sets the "activity_name" field.
func (u *PolyUpsert) SetActivityName(v string) *PolyUpsert {
	u.Set(poly.FieldActivityName, v)
	return u
}

// UpdateActivityName sets the "activity_name" field to the value that was provided on create.
func (u *PolyUpsert) UpdateActivityName() *PolyUpsert {
	u.SetExcluded(poly.FieldActivityName)
	return u
}

// SetActivityDesc sets the "activity_desc" field.
func (u *PolyUpsert) SetActivityDesc(v string) *PolyUpsert {
	u.Set(poly.FieldActivityDesc, v)
	return u
}

// UpdateActivityDesc sets the "activity_desc" field to the value that was provided on create.
func (u *PolyUpsert) UpdateActivityDesc() *PolyUpsert {
	u.SetExcluded(poly.FieldActivityDesc)
	return u
}

// SetActivityBudget sets the "activity_budget" field.
func (u *PolyUpsert) SetActivityBudget(v int64) *PolyUpsert {
	u.Set(poly.FieldActivityBudget, v)
	return u
}

// UpdateActivityBudget sets the "activity_budget" field to the value that was provided on create.
func (u *PolyUpsert) UpdateActivityBudget() *PolyUpsert {
	u.SetExcluded(poly.FieldActivityBudget)
	return u
}

// AddActivityBudget adds v to the "activity_budget" field.
func (u *PolyUpsert) AddActivityBudget(v int64) *PolyUpsert {
	u.Add(poly.FieldActivityBudget, v)
	return u
}

// SetActivityStartTime sets the "activity_start_time" field.
func (u *PolyUpsert) SetActivityStartTime(v time.Time) *PolyUpsert {
	u.Set(poly.FieldActivityStartTime, v)
	return u
}

// UpdateActivityStartTime sets the "activity_start_time" field to the value that was provided on create.
func (u *PolyUpsert) UpdateActivityStartTime() *PolyUpsert {
	u.SetExcluded(poly.FieldActivityStartTime)
	return u
}

// SetActivityEndTime sets the "activity_end_time" field.
func (u *PolyUpsert) SetActivityEndTime(v time.Time) *PolyUpsert {
	u.Set(poly.FieldActivityEndTime, v)
	return u
}

// UpdateActivityEndTime sets the "activity_end_time" field to the value that was provided on create.
func (u *PolyUpsert) UpdateActivityEndTime() *PolyUpsert {
	u.SetExcluded(poly.FieldActivityEndTime)
	return u
}

// SetActivityStatus sets the "activity_status" field.
func (u *PolyUpsert) SetActivityStatus(v int) *PolyUpsert {
	u.Set(poly.FieldActivityStatus, v)
	return u
}

// UpdateActivityStatus sets the "activity_status" field to the value that was provided on create.
func (u *PolyUpsert) UpdateActivityStatus() *PolyUpsert {
	u.SetExcluded(poly.FieldActivityStatus)
	return u
}

// AddActivityStatus adds v to the "activity_status" field.
func (u *PolyUpsert) AddActivityStatus(v int) *PolyUpsert {
	u.Add(poly.FieldActivityStatus, v)
	return u
}

// SetActivityType sets the "activity_type" field.
func (u *PolyUpsert) SetActivityType(v int) *PolyUpsert {
	u.Set(poly.FieldActivityType, v)
	return u
}

// UpdateActivityType sets the "activity_type" field to the value that was provided on create.
func (u *PolyUpsert) UpdateActivityType() *PolyUpsert {
	u.SetExcluded(poly.FieldActivityType)
	return u
}

// AddActivityType adds v to the "activity_type" field.
func (u *PolyUpsert) AddActivityType(v int) *PolyUpsert {
	u.Add(poly.FieldActivityType, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Poly.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(poly.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PolyUpsertOne) UpdateNewValues() *PolyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(poly.FieldID)
		}
		if _, exists := u.create.mutation.Code(); exists {
			s.SetIgnore(poly.FieldCode)
		}
		if _, exists := u.create.mutation.MallCode(); exists {
			s.SetIgnore(poly.FieldMallCode)
		}
		if _, exists := u.create.mutation.ActivityAddTime(); exists {
			s.SetIgnore(poly.FieldActivityAddTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Poly.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PolyUpsertOne) Ignore() *PolyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PolyUpsertOne) DoNothing() *PolyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PolyCreate.OnConflict
// documentation for more info.
func (u *PolyUpsertOne) Update(set func(*PolyUpsert)) *PolyUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PolyUpsert{UpdateSet: update})
	}))
	return u
}

// SetOperator sets the "operator" field.
func (u *PolyUpsertOne) SetOperator(v string) *PolyUpsertOne {
	return u.Update(func(s *PolyUpsert) {
		s.SetOperator(v)
	})
}

// UpdateOperator sets the "operator" field to the value that was provided on create.
func (u *PolyUpsertOne) UpdateOperator() *PolyUpsertOne {
	return u.Update(func(s *PolyUpsert) {
		s.UpdateOperator()
	})
}

// SetRuleCode sets the "rule_code" field.
func (u *PolyUpsertOne) SetRuleCode(v string) *PolyUpsertOne {
	return u.Update(func(s *PolyUpsert) {
		s.SetRuleCode(v)
	})
}

// UpdateRuleCode sets the "rule_code" field to the value that was provided on create.
func (u *PolyUpsertOne) UpdateRuleCode() *PolyUpsertOne {
	return u.Update(func(s *PolyUpsert) {
		s.UpdateRuleCode()
	})
}

// SetActivityName sets the "activity_name" field.
func (u *PolyUpsertOne) SetActivityName(v string) *PolyUpsertOne {
	return u.Update(func(s *PolyUpsert) {
		s.SetActivityName(v)
	})
}

// UpdateActivityName sets the "activity_name" field to the value that was provided on create.
func (u *PolyUpsertOne) UpdateActivityName() *PolyUpsertOne {
	return u.Update(func(s *PolyUpsert) {
		s.UpdateActivityName()
	})
}

// SetActivityDesc sets the "activity_desc" field.
func (u *PolyUpsertOne) SetActivityDesc(v string) *PolyUpsertOne {
	return u.Update(func(s *PolyUpsert) {
		s.SetActivityDesc(v)
	})
}

// UpdateActivityDesc sets the "activity_desc" field to the value that was provided on create.
func (u *PolyUpsertOne) UpdateActivityDesc() *PolyUpsertOne {
	return u.Update(func(s *PolyUpsert) {
		s.UpdateActivityDesc()
	})
}

// SetActivityBudget sets the "activity_budget" field.
func (u *PolyUpsertOne) SetActivityBudget(v int64) *PolyUpsertOne {
	return u.Update(func(s *PolyUpsert) {
		s.SetActivityBudget(v)
	})
}

// AddActivityBudget adds v to the "activity_budget" field.
func (u *PolyUpsertOne) AddActivityBudget(v int64) *PolyUpsertOne {
	return u.Update(func(s *PolyUpsert) {
		s.AddActivityBudget(v)
	})
}

// UpdateActivityBudget sets the "activity_budget" field to the value that was provided on create.
func (u *PolyUpsertOne) UpdateActivityBudget() *PolyUpsertOne {
	return u.Update(func(s *PolyUpsert) {
		s.UpdateActivityBudget()
	})
}

// SetActivityStartTime sets the "activity_start_time" field.
func (u *PolyUpsertOne) SetActivityStartTime(v time.Time) *PolyUpsertOne {
	return u.Update(func(s *PolyUpsert) {
		s.SetActivityStartTime(v)
	})
}

// UpdateActivityStartTime sets the "activity_start_time" field to the value that was provided on create.
func (u *PolyUpsertOne) UpdateActivityStartTime() *PolyUpsertOne {
	return u.Update(func(s *PolyUpsert) {
		s.UpdateActivityStartTime()
	})
}

// SetActivityEndTime sets the "activity_end_time" field.
func (u *PolyUpsertOne) SetActivityEndTime(v time.Time) *PolyUpsertOne {
	return u.Update(func(s *PolyUpsert) {
		s.SetActivityEndTime(v)
	})
}

// UpdateActivityEndTime sets the "activity_end_time" field to the value that was provided on create.
func (u *PolyUpsertOne) UpdateActivityEndTime() *PolyUpsertOne {
	return u.Update(func(s *PolyUpsert) {
		s.UpdateActivityEndTime()
	})
}

// SetActivityStatus sets the "activity_status" field.
func (u *PolyUpsertOne) SetActivityStatus(v int) *PolyUpsertOne {
	return u.Update(func(s *PolyUpsert) {
		s.SetActivityStatus(v)
	})
}

// AddActivityStatus adds v to the "activity_status" field.
func (u *PolyUpsertOne) AddActivityStatus(v int) *PolyUpsertOne {
	return u.Update(func(s *PolyUpsert) {
		s.AddActivityStatus(v)
	})
}

// UpdateActivityStatus sets the "activity_status" field to the value that was provided on create.
func (u *PolyUpsertOne) UpdateActivityStatus() *PolyUpsertOne {
	return u.Update(func(s *PolyUpsert) {
		s.UpdateActivityStatus()
	})
}

// SetActivityType sets the "activity_type" field.
func (u *PolyUpsertOne) SetActivityType(v int) *PolyUpsertOne {
	return u.Update(func(s *PolyUpsert) {
		s.SetActivityType(v)
	})
}

// AddActivityType adds v to the "activity_type" field.
func (u *PolyUpsertOne) AddActivityType(v int) *PolyUpsertOne {
	return u.Update(func(s *PolyUpsert) {
		s.AddActivityType(v)
	})
}

// UpdateActivityType sets the "activity_type" field to the value that was provided on create.
func (u *PolyUpsertOne) UpdateActivityType() *PolyUpsertOne {
	return u.Update(func(s *PolyUpsert) {
		s.UpdateActivityType()
	})
}

// Exec executes the query.
func (u *PolyUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PolyCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PolyUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PolyUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: PolyUpsertOne.ID is not supported by MySQL driver. Use PolyUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PolyUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PolyCreateBulk is the builder for creating many Poly entities in bulk.
type PolyCreateBulk struct {
	config
	err      error
	builders []*PolyCreate
	conflict []sql.ConflictOption
}

// Save creates the Poly entities in the database.
func (pcb *PolyCreateBulk) Save(ctx context.Context) ([]*Poly, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Poly, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PolyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PolyCreateBulk) SaveX(ctx context.Context) []*Poly {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PolyCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PolyCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Poly.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PolyUpsert) {
//			SetCode(v+v).
//		}).
//		Exec(ctx)
func (pcb *PolyCreateBulk) OnConflict(opts ...sql.ConflictOption) *PolyUpsertBulk {
	pcb.conflict = opts
	return &PolyUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Poly.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcb *PolyCreateBulk) OnConflictColumns(columns ...string) *PolyUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &PolyUpsertBulk{
		create: pcb,
	}
}

// PolyUpsertBulk is the builder for "upsert"-ing
// a bulk of Poly nodes.
type PolyUpsertBulk struct {
	create *PolyCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Poly.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(poly.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PolyUpsertBulk) UpdateNewValues() *PolyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(poly.FieldID)
			}
			if _, exists := b.mutation.Code(); exists {
				s.SetIgnore(poly.FieldCode)
			}
			if _, exists := b.mutation.MallCode(); exists {
				s.SetIgnore(poly.FieldMallCode)
			}
			if _, exists := b.mutation.ActivityAddTime(); exists {
				s.SetIgnore(poly.FieldActivityAddTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Poly.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PolyUpsertBulk) Ignore() *PolyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PolyUpsertBulk) DoNothing() *PolyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PolyCreateBulk.OnConflict
// documentation for more info.
func (u *PolyUpsertBulk) Update(set func(*PolyUpsert)) *PolyUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PolyUpsert{UpdateSet: update})
	}))
	return u
}

// SetOperator sets the "operator" field.
func (u *PolyUpsertBulk) SetOperator(v string) *PolyUpsertBulk {
	return u.Update(func(s *PolyUpsert) {
		s.SetOperator(v)
	})
}

// UpdateOperator sets the "operator" field to the value that was provided on create.
func (u *PolyUpsertBulk) UpdateOperator() *PolyUpsertBulk {
	return u.Update(func(s *PolyUpsert) {
		s.UpdateOperator()
	})
}

// SetRuleCode sets the "rule_code" field.
func (u *PolyUpsertBulk) SetRuleCode(v string) *PolyUpsertBulk {
	return u.Update(func(s *PolyUpsert) {
		s.SetRuleCode(v)
	})
}

// UpdateRuleCode sets the "rule_code" field to the value that was provided on create.
func (u *PolyUpsertBulk) UpdateRuleCode() *PolyUpsertBulk {
	return u.Update(func(s *PolyUpsert) {
		s.UpdateRuleCode()
	})
}

// SetActivityName sets the "activity_name" field.
func (u *PolyUpsertBulk) SetActivityName(v string) *PolyUpsertBulk {
	return u.Update(func(s *PolyUpsert) {
		s.SetActivityName(v)
	})
}

// UpdateActivityName sets the "activity_name" field to the value that was provided on create.
func (u *PolyUpsertBulk) UpdateActivityName() *PolyUpsertBulk {
	return u.Update(func(s *PolyUpsert) {
		s.UpdateActivityName()
	})
}

// SetActivityDesc sets the "activity_desc" field.
func (u *PolyUpsertBulk) SetActivityDesc(v string) *PolyUpsertBulk {
	return u.Update(func(s *PolyUpsert) {
		s.SetActivityDesc(v)
	})
}

// UpdateActivityDesc sets the "activity_desc" field to the value that was provided on create.
func (u *PolyUpsertBulk) UpdateActivityDesc() *PolyUpsertBulk {
	return u.Update(func(s *PolyUpsert) {
		s.UpdateActivityDesc()
	})
}

// SetActivityBudget sets the "activity_budget" field.
func (u *PolyUpsertBulk) SetActivityBudget(v int64) *PolyUpsertBulk {
	return u.Update(func(s *PolyUpsert) {
		s.SetActivityBudget(v)
	})
}

// AddActivityBudget adds v to the "activity_budget" field.
func (u *PolyUpsertBulk) AddActivityBudget(v int64) *PolyUpsertBulk {
	return u.Update(func(s *PolyUpsert) {
		s.AddActivityBudget(v)
	})
}

// UpdateActivityBudget sets the "activity_budget" field to the value that was provided on create.
func (u *PolyUpsertBulk) UpdateActivityBudget() *PolyUpsertBulk {
	return u.Update(func(s *PolyUpsert) {
		s.UpdateActivityBudget()
	})
}

// SetActivityStartTime sets the "activity_start_time" field.
func (u *PolyUpsertBulk) SetActivityStartTime(v time.Time) *PolyUpsertBulk {
	return u.Update(func(s *PolyUpsert) {
		s.SetActivityStartTime(v)
	})
}

// UpdateActivityStartTime sets the "activity_start_time" field to the value that was provided on create.
func (u *PolyUpsertBulk) UpdateActivityStartTime() *PolyUpsertBulk {
	return u.Update(func(s *PolyUpsert) {
		s.UpdateActivityStartTime()
	})
}

// SetActivityEndTime sets the "activity_end_time" field.
func (u *PolyUpsertBulk) SetActivityEndTime(v time.Time) *PolyUpsertBulk {
	return u.Update(func(s *PolyUpsert) {
		s.SetActivityEndTime(v)
	})
}

// UpdateActivityEndTime sets the "activity_end_time" field to the value that was provided on create.
func (u *PolyUpsertBulk) UpdateActivityEndTime() *PolyUpsertBulk {
	return u.Update(func(s *PolyUpsert) {
		s.UpdateActivityEndTime()
	})
}

// SetActivityStatus sets the "activity_status" field.
func (u *PolyUpsertBulk) SetActivityStatus(v int) *PolyUpsertBulk {
	return u.Update(func(s *PolyUpsert) {
		s.SetActivityStatus(v)
	})
}

// AddActivityStatus adds v to the "activity_status" field.
func (u *PolyUpsertBulk) AddActivityStatus(v int) *PolyUpsertBulk {
	return u.Update(func(s *PolyUpsert) {
		s.AddActivityStatus(v)
	})
}

// UpdateActivityStatus sets the "activity_status" field to the value that was provided on create.
func (u *PolyUpsertBulk) UpdateActivityStatus() *PolyUpsertBulk {
	return u.Update(func(s *PolyUpsert) {
		s.UpdateActivityStatus()
	})
}

// SetActivityType sets the "activity_type" field.
func (u *PolyUpsertBulk) SetActivityType(v int) *PolyUpsertBulk {
	return u.Update(func(s *PolyUpsert) {
		s.SetActivityType(v)
	})
}

// AddActivityType adds v to the "activity_type" field.
func (u *PolyUpsertBulk) AddActivityType(v int) *PolyUpsertBulk {
	return u.Update(func(s *PolyUpsert) {
		s.AddActivityType(v)
	})
}

// UpdateActivityType sets the "activity_type" field to the value that was provided on create.
func (u *PolyUpsertBulk) UpdateActivityType() *PolyUpsertBulk {
	return u.Update(func(s *PolyUpsert) {
		s.UpdateActivityType()
	})
}

// Exec executes the query.
func (u *PolyUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PolyCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PolyCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PolyUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
