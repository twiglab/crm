// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/twiglab/crm/poly/orm/ent/activity"
	"github.com/twiglab/crm/poly/orm/ent/activitychange"
	"github.com/twiglab/crm/poly/orm/ent/predicate"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeActivity       = "Activity"
	TypeActivityChange = "ActivityChange"
)

// ActivityMutation represents an operation that mutates the Activity nodes in the graph.
type ActivityMutation struct {
	config
	op                    Op
	typ                   string
	id                    *uuid.UUID
	code                  *string
	mall_code             *string
	operator              *string
	activity_add_time     *time.Time
	approver              *string
	activity_approve_time *time.Time
	principal             *string
	activity_name         *string
	activity_desc         *string
	activity_budget       *int64
	addactivity_budget    *int64
	activity_start_time   *time.Time
	activity_end_time     *time.Time
	activity_status       *int
	addactivity_status    *int
	activity_type         *int
	addactivity_type      *int
	clearedFields         map[string]struct{}
	done                  bool
	oldValue              func(context.Context) (*Activity, error)
	predicates            []predicate.Activity
}

var _ ent.Mutation = (*ActivityMutation)(nil)

// activityOption allows management of the mutation configuration using functional options.
type activityOption func(*ActivityMutation)

// newActivityMutation creates new mutation for the Activity entity.
func newActivityMutation(c config, op Op, opts ...activityOption) *ActivityMutation {
	m := &ActivityMutation{
		config:        c,
		op:            op,
		typ:           TypeActivity,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withActivityID sets the ID field of the mutation.
func withActivityID(id uuid.UUID) activityOption {
	return func(m *ActivityMutation) {
		var (
			err   error
			once  sync.Once
			value *Activity
		)
		m.oldValue = func(ctx context.Context) (*Activity, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Activity.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withActivity sets the old Activity of the mutation.
func withActivity(node *Activity) activityOption {
	return func(m *ActivityMutation) {
		m.oldValue = func(context.Context) (*Activity, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ActivityMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ActivityMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Activity entities.
func (m *ActivityMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ActivityMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ActivityMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Activity.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCode sets the "code" field.
func (m *ActivityMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *ActivityMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the Activity entity.
// If the Activity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActivityMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *ActivityMutation) ResetCode() {
	m.code = nil
}

// SetMallCode sets the "mall_code" field.
func (m *ActivityMutation) SetMallCode(s string) {
	m.mall_code = &s
}

// MallCode returns the value of the "mall_code" field in the mutation.
func (m *ActivityMutation) MallCode() (r string, exists bool) {
	v := m.mall_code
	if v == nil {
		return
	}
	return *v, true
}

// OldMallCode returns the old "mall_code" field's value of the Activity entity.
// If the Activity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActivityMutation) OldMallCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMallCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMallCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMallCode: %w", err)
	}
	return oldValue.MallCode, nil
}

// ResetMallCode resets all changes to the "mall_code" field.
func (m *ActivityMutation) ResetMallCode() {
	m.mall_code = nil
}

// SetOperator sets the "operator" field.
func (m *ActivityMutation) SetOperator(s string) {
	m.operator = &s
}

// Operator returns the value of the "operator" field in the mutation.
func (m *ActivityMutation) Operator() (r string, exists bool) {
	v := m.operator
	if v == nil {
		return
	}
	return *v, true
}

// OldOperator returns the old "operator" field's value of the Activity entity.
// If the Activity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActivityMutation) OldOperator(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOperator is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOperator requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOperator: %w", err)
	}
	return oldValue.Operator, nil
}

// ResetOperator resets all changes to the "operator" field.
func (m *ActivityMutation) ResetOperator() {
	m.operator = nil
}

// SetActivityAddTime sets the "activity_add_time" field.
func (m *ActivityMutation) SetActivityAddTime(t time.Time) {
	m.activity_add_time = &t
}

// ActivityAddTime returns the value of the "activity_add_time" field in the mutation.
func (m *ActivityMutation) ActivityAddTime() (r time.Time, exists bool) {
	v := m.activity_add_time
	if v == nil {
		return
	}
	return *v, true
}

// OldActivityAddTime returns the old "activity_add_time" field's value of the Activity entity.
// If the Activity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActivityMutation) OldActivityAddTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActivityAddTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActivityAddTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActivityAddTime: %w", err)
	}
	return oldValue.ActivityAddTime, nil
}

// ResetActivityAddTime resets all changes to the "activity_add_time" field.
func (m *ActivityMutation) ResetActivityAddTime() {
	m.activity_add_time = nil
}

// SetApprover sets the "approver" field.
func (m *ActivityMutation) SetApprover(s string) {
	m.approver = &s
}

// Approver returns the value of the "approver" field in the mutation.
func (m *ActivityMutation) Approver() (r string, exists bool) {
	v := m.approver
	if v == nil {
		return
	}
	return *v, true
}

// OldApprover returns the old "approver" field's value of the Activity entity.
// If the Activity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActivityMutation) OldApprover(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldApprover is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldApprover requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldApprover: %w", err)
	}
	return oldValue.Approver, nil
}

// ResetApprover resets all changes to the "approver" field.
func (m *ActivityMutation) ResetApprover() {
	m.approver = nil
}

// SetActivityApproveTime sets the "activity_approve_time" field.
func (m *ActivityMutation) SetActivityApproveTime(t time.Time) {
	m.activity_approve_time = &t
}

// ActivityApproveTime returns the value of the "activity_approve_time" field in the mutation.
func (m *ActivityMutation) ActivityApproveTime() (r time.Time, exists bool) {
	v := m.activity_approve_time
	if v == nil {
		return
	}
	return *v, true
}

// OldActivityApproveTime returns the old "activity_approve_time" field's value of the Activity entity.
// If the Activity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActivityMutation) OldActivityApproveTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActivityApproveTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActivityApproveTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActivityApproveTime: %w", err)
	}
	return oldValue.ActivityApproveTime, nil
}

// ResetActivityApproveTime resets all changes to the "activity_approve_time" field.
func (m *ActivityMutation) ResetActivityApproveTime() {
	m.activity_approve_time = nil
}

// SetPrincipal sets the "principal" field.
func (m *ActivityMutation) SetPrincipal(s string) {
	m.principal = &s
}

// Principal returns the value of the "principal" field in the mutation.
func (m *ActivityMutation) Principal() (r string, exists bool) {
	v := m.principal
	if v == nil {
		return
	}
	return *v, true
}

// OldPrincipal returns the old "principal" field's value of the Activity entity.
// If the Activity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActivityMutation) OldPrincipal(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrincipal is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrincipal requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrincipal: %w", err)
	}
	return oldValue.Principal, nil
}

// ResetPrincipal resets all changes to the "principal" field.
func (m *ActivityMutation) ResetPrincipal() {
	m.principal = nil
}

// SetActivityName sets the "activity_name" field.
func (m *ActivityMutation) SetActivityName(s string) {
	m.activity_name = &s
}

// ActivityName returns the value of the "activity_name" field in the mutation.
func (m *ActivityMutation) ActivityName() (r string, exists bool) {
	v := m.activity_name
	if v == nil {
		return
	}
	return *v, true
}

// OldActivityName returns the old "activity_name" field's value of the Activity entity.
// If the Activity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActivityMutation) OldActivityName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActivityName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActivityName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActivityName: %w", err)
	}
	return oldValue.ActivityName, nil
}

// ResetActivityName resets all changes to the "activity_name" field.
func (m *ActivityMutation) ResetActivityName() {
	m.activity_name = nil
}

// SetActivityDesc sets the "activity_desc" field.
func (m *ActivityMutation) SetActivityDesc(s string) {
	m.activity_desc = &s
}

// ActivityDesc returns the value of the "activity_desc" field in the mutation.
func (m *ActivityMutation) ActivityDesc() (r string, exists bool) {
	v := m.activity_desc
	if v == nil {
		return
	}
	return *v, true
}

// OldActivityDesc returns the old "activity_desc" field's value of the Activity entity.
// If the Activity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActivityMutation) OldActivityDesc(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActivityDesc is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActivityDesc requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActivityDesc: %w", err)
	}
	return oldValue.ActivityDesc, nil
}

// ResetActivityDesc resets all changes to the "activity_desc" field.
func (m *ActivityMutation) ResetActivityDesc() {
	m.activity_desc = nil
}

// SetActivityBudget sets the "activity_budget" field.
func (m *ActivityMutation) SetActivityBudget(i int64) {
	m.activity_budget = &i
	m.addactivity_budget = nil
}

// ActivityBudget returns the value of the "activity_budget" field in the mutation.
func (m *ActivityMutation) ActivityBudget() (r int64, exists bool) {
	v := m.activity_budget
	if v == nil {
		return
	}
	return *v, true
}

// OldActivityBudget returns the old "activity_budget" field's value of the Activity entity.
// If the Activity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActivityMutation) OldActivityBudget(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActivityBudget is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActivityBudget requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActivityBudget: %w", err)
	}
	return oldValue.ActivityBudget, nil
}

// AddActivityBudget adds i to the "activity_budget" field.
func (m *ActivityMutation) AddActivityBudget(i int64) {
	if m.addactivity_budget != nil {
		*m.addactivity_budget += i
	} else {
		m.addactivity_budget = &i
	}
}

// AddedActivityBudget returns the value that was added to the "activity_budget" field in this mutation.
func (m *ActivityMutation) AddedActivityBudget() (r int64, exists bool) {
	v := m.addactivity_budget
	if v == nil {
		return
	}
	return *v, true
}

// ResetActivityBudget resets all changes to the "activity_budget" field.
func (m *ActivityMutation) ResetActivityBudget() {
	m.activity_budget = nil
	m.addactivity_budget = nil
}

// SetActivityStartTime sets the "activity_start_time" field.
func (m *ActivityMutation) SetActivityStartTime(t time.Time) {
	m.activity_start_time = &t
}

// ActivityStartTime returns the value of the "activity_start_time" field in the mutation.
func (m *ActivityMutation) ActivityStartTime() (r time.Time, exists bool) {
	v := m.activity_start_time
	if v == nil {
		return
	}
	return *v, true
}

// OldActivityStartTime returns the old "activity_start_time" field's value of the Activity entity.
// If the Activity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActivityMutation) OldActivityStartTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActivityStartTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActivityStartTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActivityStartTime: %w", err)
	}
	return oldValue.ActivityStartTime, nil
}

// ResetActivityStartTime resets all changes to the "activity_start_time" field.
func (m *ActivityMutation) ResetActivityStartTime() {
	m.activity_start_time = nil
}

// SetActivityEndTime sets the "activity_end_time" field.
func (m *ActivityMutation) SetActivityEndTime(t time.Time) {
	m.activity_end_time = &t
}

// ActivityEndTime returns the value of the "activity_end_time" field in the mutation.
func (m *ActivityMutation) ActivityEndTime() (r time.Time, exists bool) {
	v := m.activity_end_time
	if v == nil {
		return
	}
	return *v, true
}

// OldActivityEndTime returns the old "activity_end_time" field's value of the Activity entity.
// If the Activity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActivityMutation) OldActivityEndTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActivityEndTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActivityEndTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActivityEndTime: %w", err)
	}
	return oldValue.ActivityEndTime, nil
}

// ResetActivityEndTime resets all changes to the "activity_end_time" field.
func (m *ActivityMutation) ResetActivityEndTime() {
	m.activity_end_time = nil
}

// SetActivityStatus sets the "activity_status" field.
func (m *ActivityMutation) SetActivityStatus(i int) {
	m.activity_status = &i
	m.addactivity_status = nil
}

// ActivityStatus returns the value of the "activity_status" field in the mutation.
func (m *ActivityMutation) ActivityStatus() (r int, exists bool) {
	v := m.activity_status
	if v == nil {
		return
	}
	return *v, true
}

// OldActivityStatus returns the old "activity_status" field's value of the Activity entity.
// If the Activity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActivityMutation) OldActivityStatus(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActivityStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActivityStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActivityStatus: %w", err)
	}
	return oldValue.ActivityStatus, nil
}

// AddActivityStatus adds i to the "activity_status" field.
func (m *ActivityMutation) AddActivityStatus(i int) {
	if m.addactivity_status != nil {
		*m.addactivity_status += i
	} else {
		m.addactivity_status = &i
	}
}

// AddedActivityStatus returns the value that was added to the "activity_status" field in this mutation.
func (m *ActivityMutation) AddedActivityStatus() (r int, exists bool) {
	v := m.addactivity_status
	if v == nil {
		return
	}
	return *v, true
}

// ResetActivityStatus resets all changes to the "activity_status" field.
func (m *ActivityMutation) ResetActivityStatus() {
	m.activity_status = nil
	m.addactivity_status = nil
}

// SetActivityType sets the "activity_type" field.
func (m *ActivityMutation) SetActivityType(i int) {
	m.activity_type = &i
	m.addactivity_type = nil
}

// ActivityType returns the value of the "activity_type" field in the mutation.
func (m *ActivityMutation) ActivityType() (r int, exists bool) {
	v := m.activity_type
	if v == nil {
		return
	}
	return *v, true
}

// OldActivityType returns the old "activity_type" field's value of the Activity entity.
// If the Activity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActivityMutation) OldActivityType(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActivityType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActivityType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActivityType: %w", err)
	}
	return oldValue.ActivityType, nil
}

// AddActivityType adds i to the "activity_type" field.
func (m *ActivityMutation) AddActivityType(i int) {
	if m.addactivity_type != nil {
		*m.addactivity_type += i
	} else {
		m.addactivity_type = &i
	}
}

// AddedActivityType returns the value that was added to the "activity_type" field in this mutation.
func (m *ActivityMutation) AddedActivityType() (r int, exists bool) {
	v := m.addactivity_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetActivityType resets all changes to the "activity_type" field.
func (m *ActivityMutation) ResetActivityType() {
	m.activity_type = nil
	m.addactivity_type = nil
}

// Where appends a list predicates to the ActivityMutation builder.
func (m *ActivityMutation) Where(ps ...predicate.Activity) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ActivityMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ActivityMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Activity, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ActivityMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ActivityMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Activity).
func (m *ActivityMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ActivityMutation) Fields() []string {
	fields := make([]string, 0, 14)
	if m.code != nil {
		fields = append(fields, activity.FieldCode)
	}
	if m.mall_code != nil {
		fields = append(fields, activity.FieldMallCode)
	}
	if m.operator != nil {
		fields = append(fields, activity.FieldOperator)
	}
	if m.activity_add_time != nil {
		fields = append(fields, activity.FieldActivityAddTime)
	}
	if m.approver != nil {
		fields = append(fields, activity.FieldApprover)
	}
	if m.activity_approve_time != nil {
		fields = append(fields, activity.FieldActivityApproveTime)
	}
	if m.principal != nil {
		fields = append(fields, activity.FieldPrincipal)
	}
	if m.activity_name != nil {
		fields = append(fields, activity.FieldActivityName)
	}
	if m.activity_desc != nil {
		fields = append(fields, activity.FieldActivityDesc)
	}
	if m.activity_budget != nil {
		fields = append(fields, activity.FieldActivityBudget)
	}
	if m.activity_start_time != nil {
		fields = append(fields, activity.FieldActivityStartTime)
	}
	if m.activity_end_time != nil {
		fields = append(fields, activity.FieldActivityEndTime)
	}
	if m.activity_status != nil {
		fields = append(fields, activity.FieldActivityStatus)
	}
	if m.activity_type != nil {
		fields = append(fields, activity.FieldActivityType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ActivityMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case activity.FieldCode:
		return m.Code()
	case activity.FieldMallCode:
		return m.MallCode()
	case activity.FieldOperator:
		return m.Operator()
	case activity.FieldActivityAddTime:
		return m.ActivityAddTime()
	case activity.FieldApprover:
		return m.Approver()
	case activity.FieldActivityApproveTime:
		return m.ActivityApproveTime()
	case activity.FieldPrincipal:
		return m.Principal()
	case activity.FieldActivityName:
		return m.ActivityName()
	case activity.FieldActivityDesc:
		return m.ActivityDesc()
	case activity.FieldActivityBudget:
		return m.ActivityBudget()
	case activity.FieldActivityStartTime:
		return m.ActivityStartTime()
	case activity.FieldActivityEndTime:
		return m.ActivityEndTime()
	case activity.FieldActivityStatus:
		return m.ActivityStatus()
	case activity.FieldActivityType:
		return m.ActivityType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ActivityMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case activity.FieldCode:
		return m.OldCode(ctx)
	case activity.FieldMallCode:
		return m.OldMallCode(ctx)
	case activity.FieldOperator:
		return m.OldOperator(ctx)
	case activity.FieldActivityAddTime:
		return m.OldActivityAddTime(ctx)
	case activity.FieldApprover:
		return m.OldApprover(ctx)
	case activity.FieldActivityApproveTime:
		return m.OldActivityApproveTime(ctx)
	case activity.FieldPrincipal:
		return m.OldPrincipal(ctx)
	case activity.FieldActivityName:
		return m.OldActivityName(ctx)
	case activity.FieldActivityDesc:
		return m.OldActivityDesc(ctx)
	case activity.FieldActivityBudget:
		return m.OldActivityBudget(ctx)
	case activity.FieldActivityStartTime:
		return m.OldActivityStartTime(ctx)
	case activity.FieldActivityEndTime:
		return m.OldActivityEndTime(ctx)
	case activity.FieldActivityStatus:
		return m.OldActivityStatus(ctx)
	case activity.FieldActivityType:
		return m.OldActivityType(ctx)
	}
	return nil, fmt.Errorf("unknown Activity field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ActivityMutation) SetField(name string, value ent.Value) error {
	switch name {
	case activity.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case activity.FieldMallCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMallCode(v)
		return nil
	case activity.FieldOperator:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOperator(v)
		return nil
	case activity.FieldActivityAddTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActivityAddTime(v)
		return nil
	case activity.FieldApprover:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetApprover(v)
		return nil
	case activity.FieldActivityApproveTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActivityApproveTime(v)
		return nil
	case activity.FieldPrincipal:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrincipal(v)
		return nil
	case activity.FieldActivityName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActivityName(v)
		return nil
	case activity.FieldActivityDesc:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActivityDesc(v)
		return nil
	case activity.FieldActivityBudget:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActivityBudget(v)
		return nil
	case activity.FieldActivityStartTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActivityStartTime(v)
		return nil
	case activity.FieldActivityEndTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActivityEndTime(v)
		return nil
	case activity.FieldActivityStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActivityStatus(v)
		return nil
	case activity.FieldActivityType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActivityType(v)
		return nil
	}
	return fmt.Errorf("unknown Activity field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ActivityMutation) AddedFields() []string {
	var fields []string
	if m.addactivity_budget != nil {
		fields = append(fields, activity.FieldActivityBudget)
	}
	if m.addactivity_status != nil {
		fields = append(fields, activity.FieldActivityStatus)
	}
	if m.addactivity_type != nil {
		fields = append(fields, activity.FieldActivityType)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ActivityMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case activity.FieldActivityBudget:
		return m.AddedActivityBudget()
	case activity.FieldActivityStatus:
		return m.AddedActivityStatus()
	case activity.FieldActivityType:
		return m.AddedActivityType()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ActivityMutation) AddField(name string, value ent.Value) error {
	switch name {
	case activity.FieldActivityBudget:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddActivityBudget(v)
		return nil
	case activity.FieldActivityStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddActivityStatus(v)
		return nil
	case activity.FieldActivityType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddActivityType(v)
		return nil
	}
	return fmt.Errorf("unknown Activity numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ActivityMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ActivityMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ActivityMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Activity nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ActivityMutation) ResetField(name string) error {
	switch name {
	case activity.FieldCode:
		m.ResetCode()
		return nil
	case activity.FieldMallCode:
		m.ResetMallCode()
		return nil
	case activity.FieldOperator:
		m.ResetOperator()
		return nil
	case activity.FieldActivityAddTime:
		m.ResetActivityAddTime()
		return nil
	case activity.FieldApprover:
		m.ResetApprover()
		return nil
	case activity.FieldActivityApproveTime:
		m.ResetActivityApproveTime()
		return nil
	case activity.FieldPrincipal:
		m.ResetPrincipal()
		return nil
	case activity.FieldActivityName:
		m.ResetActivityName()
		return nil
	case activity.FieldActivityDesc:
		m.ResetActivityDesc()
		return nil
	case activity.FieldActivityBudget:
		m.ResetActivityBudget()
		return nil
	case activity.FieldActivityStartTime:
		m.ResetActivityStartTime()
		return nil
	case activity.FieldActivityEndTime:
		m.ResetActivityEndTime()
		return nil
	case activity.FieldActivityStatus:
		m.ResetActivityStatus()
		return nil
	case activity.FieldActivityType:
		m.ResetActivityType()
		return nil
	}
	return fmt.Errorf("unknown Activity field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ActivityMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ActivityMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ActivityMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ActivityMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ActivityMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ActivityMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ActivityMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Activity unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ActivityMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Activity edge %s", name)
}

// ActivityChangeMutation represents an operation that mutates the ActivityChange nodes in the graph.
type ActivityChangeMutation struct {
	config
	op             Op
	typ            string
	id             *uuid.UUID
	code           *string
	activity_code  *string
	operator       *string
	submit_time    *time.Time
	approver       *string
	approve_time   *time.Time
	status         *int
	addstatus      *int
	change_summary *string
	change_reason  *string
	change_record  *string
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*ActivityChange, error)
	predicates     []predicate.ActivityChange
}

var _ ent.Mutation = (*ActivityChangeMutation)(nil)

// activitychangeOption allows management of the mutation configuration using functional options.
type activitychangeOption func(*ActivityChangeMutation)

// newActivityChangeMutation creates new mutation for the ActivityChange entity.
func newActivityChangeMutation(c config, op Op, opts ...activitychangeOption) *ActivityChangeMutation {
	m := &ActivityChangeMutation{
		config:        c,
		op:            op,
		typ:           TypeActivityChange,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withActivityChangeID sets the ID field of the mutation.
func withActivityChangeID(id uuid.UUID) activitychangeOption {
	return func(m *ActivityChangeMutation) {
		var (
			err   error
			once  sync.Once
			value *ActivityChange
		)
		m.oldValue = func(ctx context.Context) (*ActivityChange, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ActivityChange.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withActivityChange sets the old ActivityChange of the mutation.
func withActivityChange(node *ActivityChange) activitychangeOption {
	return func(m *ActivityChangeMutation) {
		m.oldValue = func(context.Context) (*ActivityChange, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ActivityChangeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ActivityChangeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ActivityChange entities.
func (m *ActivityChangeMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ActivityChangeMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ActivityChangeMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ActivityChange.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCode sets the "code" field.
func (m *ActivityChangeMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *ActivityChangeMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the ActivityChange entity.
// If the ActivityChange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActivityChangeMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *ActivityChangeMutation) ResetCode() {
	m.code = nil
}

// SetActivityCode sets the "activity_code" field.
func (m *ActivityChangeMutation) SetActivityCode(s string) {
	m.activity_code = &s
}

// ActivityCode returns the value of the "activity_code" field in the mutation.
func (m *ActivityChangeMutation) ActivityCode() (r string, exists bool) {
	v := m.activity_code
	if v == nil {
		return
	}
	return *v, true
}

// OldActivityCode returns the old "activity_code" field's value of the ActivityChange entity.
// If the ActivityChange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActivityChangeMutation) OldActivityCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActivityCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActivityCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActivityCode: %w", err)
	}
	return oldValue.ActivityCode, nil
}

// ResetActivityCode resets all changes to the "activity_code" field.
func (m *ActivityChangeMutation) ResetActivityCode() {
	m.activity_code = nil
}

// SetOperator sets the "operator" field.
func (m *ActivityChangeMutation) SetOperator(s string) {
	m.operator = &s
}

// Operator returns the value of the "operator" field in the mutation.
func (m *ActivityChangeMutation) Operator() (r string, exists bool) {
	v := m.operator
	if v == nil {
		return
	}
	return *v, true
}

// OldOperator returns the old "operator" field's value of the ActivityChange entity.
// If the ActivityChange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActivityChangeMutation) OldOperator(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOperator is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOperator requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOperator: %w", err)
	}
	return oldValue.Operator, nil
}

// ResetOperator resets all changes to the "operator" field.
func (m *ActivityChangeMutation) ResetOperator() {
	m.operator = nil
}

// SetSubmitTime sets the "submit_time" field.
func (m *ActivityChangeMutation) SetSubmitTime(t time.Time) {
	m.submit_time = &t
}

// SubmitTime returns the value of the "submit_time" field in the mutation.
func (m *ActivityChangeMutation) SubmitTime() (r time.Time, exists bool) {
	v := m.submit_time
	if v == nil {
		return
	}
	return *v, true
}

// OldSubmitTime returns the old "submit_time" field's value of the ActivityChange entity.
// If the ActivityChange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActivityChangeMutation) OldSubmitTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubmitTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubmitTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubmitTime: %w", err)
	}
	return oldValue.SubmitTime, nil
}

// ResetSubmitTime resets all changes to the "submit_time" field.
func (m *ActivityChangeMutation) ResetSubmitTime() {
	m.submit_time = nil
}

// SetApprover sets the "approver" field.
func (m *ActivityChangeMutation) SetApprover(s string) {
	m.approver = &s
}

// Approver returns the value of the "approver" field in the mutation.
func (m *ActivityChangeMutation) Approver() (r string, exists bool) {
	v := m.approver
	if v == nil {
		return
	}
	return *v, true
}

// OldApprover returns the old "approver" field's value of the ActivityChange entity.
// If the ActivityChange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActivityChangeMutation) OldApprover(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldApprover is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldApprover requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldApprover: %w", err)
	}
	return oldValue.Approver, nil
}

// ResetApprover resets all changes to the "approver" field.
func (m *ActivityChangeMutation) ResetApprover() {
	m.approver = nil
}

// SetApproveTime sets the "approve_time" field.
func (m *ActivityChangeMutation) SetApproveTime(t time.Time) {
	m.approve_time = &t
}

// ApproveTime returns the value of the "approve_time" field in the mutation.
func (m *ActivityChangeMutation) ApproveTime() (r time.Time, exists bool) {
	v := m.approve_time
	if v == nil {
		return
	}
	return *v, true
}

// OldApproveTime returns the old "approve_time" field's value of the ActivityChange entity.
// If the ActivityChange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActivityChangeMutation) OldApproveTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldApproveTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldApproveTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldApproveTime: %w", err)
	}
	return oldValue.ApproveTime, nil
}

// ResetApproveTime resets all changes to the "approve_time" field.
func (m *ActivityChangeMutation) ResetApproveTime() {
	m.approve_time = nil
}

// SetStatus sets the "status" field.
func (m *ActivityChangeMutation) SetStatus(i int) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *ActivityChangeMutation) Status() (r int, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the ActivityChange entity.
// If the ActivityChange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActivityChangeMutation) OldStatus(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to the "status" field.
func (m *ActivityChangeMutation) AddStatus(i int) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *ActivityChangeMutation) AddedStatus() (r int, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *ActivityChangeMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetChangeSummary sets the "change_summary" field.
func (m *ActivityChangeMutation) SetChangeSummary(s string) {
	m.change_summary = &s
}

// ChangeSummary returns the value of the "change_summary" field in the mutation.
func (m *ActivityChangeMutation) ChangeSummary() (r string, exists bool) {
	v := m.change_summary
	if v == nil {
		return
	}
	return *v, true
}

// OldChangeSummary returns the old "change_summary" field's value of the ActivityChange entity.
// If the ActivityChange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActivityChangeMutation) OldChangeSummary(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChangeSummary is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChangeSummary requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChangeSummary: %w", err)
	}
	return oldValue.ChangeSummary, nil
}

// ResetChangeSummary resets all changes to the "change_summary" field.
func (m *ActivityChangeMutation) ResetChangeSummary() {
	m.change_summary = nil
}

// SetChangeReason sets the "change_reason" field.
func (m *ActivityChangeMutation) SetChangeReason(s string) {
	m.change_reason = &s
}

// ChangeReason returns the value of the "change_reason" field in the mutation.
func (m *ActivityChangeMutation) ChangeReason() (r string, exists bool) {
	v := m.change_reason
	if v == nil {
		return
	}
	return *v, true
}

// OldChangeReason returns the old "change_reason" field's value of the ActivityChange entity.
// If the ActivityChange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActivityChangeMutation) OldChangeReason(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChangeReason is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChangeReason requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChangeReason: %w", err)
	}
	return oldValue.ChangeReason, nil
}

// ResetChangeReason resets all changes to the "change_reason" field.
func (m *ActivityChangeMutation) ResetChangeReason() {
	m.change_reason = nil
}

// SetChangeRecord sets the "change_record" field.
func (m *ActivityChangeMutation) SetChangeRecord(s string) {
	m.change_record = &s
}

// ChangeRecord returns the value of the "change_record" field in the mutation.
func (m *ActivityChangeMutation) ChangeRecord() (r string, exists bool) {
	v := m.change_record
	if v == nil {
		return
	}
	return *v, true
}

// OldChangeRecord returns the old "change_record" field's value of the ActivityChange entity.
// If the ActivityChange object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ActivityChangeMutation) OldChangeRecord(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChangeRecord is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChangeRecord requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChangeRecord: %w", err)
	}
	return oldValue.ChangeRecord, nil
}

// ResetChangeRecord resets all changes to the "change_record" field.
func (m *ActivityChangeMutation) ResetChangeRecord() {
	m.change_record = nil
}

// Where appends a list predicates to the ActivityChangeMutation builder.
func (m *ActivityChangeMutation) Where(ps ...predicate.ActivityChange) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ActivityChangeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ActivityChangeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ActivityChange, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ActivityChangeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ActivityChangeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ActivityChange).
func (m *ActivityChangeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ActivityChangeMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.code != nil {
		fields = append(fields, activitychange.FieldCode)
	}
	if m.activity_code != nil {
		fields = append(fields, activitychange.FieldActivityCode)
	}
	if m.operator != nil {
		fields = append(fields, activitychange.FieldOperator)
	}
	if m.submit_time != nil {
		fields = append(fields, activitychange.FieldSubmitTime)
	}
	if m.approver != nil {
		fields = append(fields, activitychange.FieldApprover)
	}
	if m.approve_time != nil {
		fields = append(fields, activitychange.FieldApproveTime)
	}
	if m.status != nil {
		fields = append(fields, activitychange.FieldStatus)
	}
	if m.change_summary != nil {
		fields = append(fields, activitychange.FieldChangeSummary)
	}
	if m.change_reason != nil {
		fields = append(fields, activitychange.FieldChangeReason)
	}
	if m.change_record != nil {
		fields = append(fields, activitychange.FieldChangeRecord)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ActivityChangeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case activitychange.FieldCode:
		return m.Code()
	case activitychange.FieldActivityCode:
		return m.ActivityCode()
	case activitychange.FieldOperator:
		return m.Operator()
	case activitychange.FieldSubmitTime:
		return m.SubmitTime()
	case activitychange.FieldApprover:
		return m.Approver()
	case activitychange.FieldApproveTime:
		return m.ApproveTime()
	case activitychange.FieldStatus:
		return m.Status()
	case activitychange.FieldChangeSummary:
		return m.ChangeSummary()
	case activitychange.FieldChangeReason:
		return m.ChangeReason()
	case activitychange.FieldChangeRecord:
		return m.ChangeRecord()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ActivityChangeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case activitychange.FieldCode:
		return m.OldCode(ctx)
	case activitychange.FieldActivityCode:
		return m.OldActivityCode(ctx)
	case activitychange.FieldOperator:
		return m.OldOperator(ctx)
	case activitychange.FieldSubmitTime:
		return m.OldSubmitTime(ctx)
	case activitychange.FieldApprover:
		return m.OldApprover(ctx)
	case activitychange.FieldApproveTime:
		return m.OldApproveTime(ctx)
	case activitychange.FieldStatus:
		return m.OldStatus(ctx)
	case activitychange.FieldChangeSummary:
		return m.OldChangeSummary(ctx)
	case activitychange.FieldChangeReason:
		return m.OldChangeReason(ctx)
	case activitychange.FieldChangeRecord:
		return m.OldChangeRecord(ctx)
	}
	return nil, fmt.Errorf("unknown ActivityChange field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ActivityChangeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case activitychange.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case activitychange.FieldActivityCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActivityCode(v)
		return nil
	case activitychange.FieldOperator:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOperator(v)
		return nil
	case activitychange.FieldSubmitTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubmitTime(v)
		return nil
	case activitychange.FieldApprover:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetApprover(v)
		return nil
	case activitychange.FieldApproveTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetApproveTime(v)
		return nil
	case activitychange.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case activitychange.FieldChangeSummary:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChangeSummary(v)
		return nil
	case activitychange.FieldChangeReason:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChangeReason(v)
		return nil
	case activitychange.FieldChangeRecord:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChangeRecord(v)
		return nil
	}
	return fmt.Errorf("unknown ActivityChange field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ActivityChangeMutation) AddedFields() []string {
	var fields []string
	if m.addstatus != nil {
		fields = append(fields, activitychange.FieldStatus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ActivityChangeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case activitychange.FieldStatus:
		return m.AddedStatus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ActivityChangeMutation) AddField(name string, value ent.Value) error {
	switch name {
	case activitychange.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	}
	return fmt.Errorf("unknown ActivityChange numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ActivityChangeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ActivityChangeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ActivityChangeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ActivityChange nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ActivityChangeMutation) ResetField(name string) error {
	switch name {
	case activitychange.FieldCode:
		m.ResetCode()
		return nil
	case activitychange.FieldActivityCode:
		m.ResetActivityCode()
		return nil
	case activitychange.FieldOperator:
		m.ResetOperator()
		return nil
	case activitychange.FieldSubmitTime:
		m.ResetSubmitTime()
		return nil
	case activitychange.FieldApprover:
		m.ResetApprover()
		return nil
	case activitychange.FieldApproveTime:
		m.ResetApproveTime()
		return nil
	case activitychange.FieldStatus:
		m.ResetStatus()
		return nil
	case activitychange.FieldChangeSummary:
		m.ResetChangeSummary()
		return nil
	case activitychange.FieldChangeReason:
		m.ResetChangeReason()
		return nil
	case activitychange.FieldChangeRecord:
		m.ResetChangeRecord()
		return nil
	}
	return fmt.Errorf("unknown ActivityChange field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ActivityChangeMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ActivityChangeMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ActivityChangeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ActivityChangeMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ActivityChangeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ActivityChangeMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ActivityChangeMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ActivityChange unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ActivityChangeMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ActivityChange edge %s", name)
}
