// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/twiglab/crm/poly/orm/ent/poly"
	"github.com/twiglab/crm/poly/orm/ent/predicate"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypePoly = "Poly"
)

// PolyMutation represents an operation that mutates the Poly nodes in the graph.
type PolyMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	create_time   *time.Time
	update_time   *time.Time
	code          *string
	mall_code     *string
	name          *string
	title         *string
	memo          *string
	start_time    *time.Time
	end_time      *time.Time
	logo_pic      *string
	pic1          *string
	pic2          *string
	pic3          *string
	menkan        *string
	fafang        *string
	xiaoqi        *string
	shiyong       *string
	status        *int32
	addstatus     *int32
	_type         *int32
	add_type      *int32
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Poly, error)
	predicates    []predicate.Poly
}

var _ ent.Mutation = (*PolyMutation)(nil)

// polyOption allows management of the mutation configuration using functional options.
type polyOption func(*PolyMutation)

// newPolyMutation creates new mutation for the Poly entity.
func newPolyMutation(c config, op Op, opts ...polyOption) *PolyMutation {
	m := &PolyMutation{
		config:        c,
		op:            op,
		typ:           TypePoly,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPolyID sets the ID field of the mutation.
func withPolyID(id uuid.UUID) polyOption {
	return func(m *PolyMutation) {
		var (
			err   error
			once  sync.Once
			value *Poly
		)
		m.oldValue = func(ctx context.Context) (*Poly, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Poly.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPoly sets the old Poly of the mutation.
func withPoly(node *Poly) polyOption {
	return func(m *PolyMutation) {
		m.oldValue = func(context.Context) (*Poly, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PolyMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PolyMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Poly entities.
func (m *PolyMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PolyMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PolyMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Poly.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *PolyMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *PolyMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Poly entity.
// If the Poly object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PolyMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *PolyMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *PolyMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *PolyMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Poly entity.
// If the Poly object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PolyMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *PolyMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetCode sets the "code" field.
func (m *PolyMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *PolyMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the Poly entity.
// If the Poly object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PolyMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *PolyMutation) ResetCode() {
	m.code = nil
}

// SetMallCode sets the "mall_code" field.
func (m *PolyMutation) SetMallCode(s string) {
	m.mall_code = &s
}

// MallCode returns the value of the "mall_code" field in the mutation.
func (m *PolyMutation) MallCode() (r string, exists bool) {
	v := m.mall_code
	if v == nil {
		return
	}
	return *v, true
}

// OldMallCode returns the old "mall_code" field's value of the Poly entity.
// If the Poly object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PolyMutation) OldMallCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMallCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMallCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMallCode: %w", err)
	}
	return oldValue.MallCode, nil
}

// ResetMallCode resets all changes to the "mall_code" field.
func (m *PolyMutation) ResetMallCode() {
	m.mall_code = nil
}

// SetName sets the "name" field.
func (m *PolyMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *PolyMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Poly entity.
// If the Poly object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PolyMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *PolyMutation) ResetName() {
	m.name = nil
}

// SetTitle sets the "title" field.
func (m *PolyMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *PolyMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Poly entity.
// If the Poly object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PolyMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *PolyMutation) ResetTitle() {
	m.title = nil
}

// SetMemo sets the "memo" field.
func (m *PolyMutation) SetMemo(s string) {
	m.memo = &s
}

// Memo returns the value of the "memo" field in the mutation.
func (m *PolyMutation) Memo() (r string, exists bool) {
	v := m.memo
	if v == nil {
		return
	}
	return *v, true
}

// OldMemo returns the old "memo" field's value of the Poly entity.
// If the Poly object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PolyMutation) OldMemo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMemo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMemo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMemo: %w", err)
	}
	return oldValue.Memo, nil
}

// ResetMemo resets all changes to the "memo" field.
func (m *PolyMutation) ResetMemo() {
	m.memo = nil
}

// SetStartTime sets the "start_time" field.
func (m *PolyMutation) SetStartTime(t time.Time) {
	m.start_time = &t
}

// StartTime returns the value of the "start_time" field in the mutation.
func (m *PolyMutation) StartTime() (r time.Time, exists bool) {
	v := m.start_time
	if v == nil {
		return
	}
	return *v, true
}

// OldStartTime returns the old "start_time" field's value of the Poly entity.
// If the Poly object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PolyMutation) OldStartTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartTime: %w", err)
	}
	return oldValue.StartTime, nil
}

// ResetStartTime resets all changes to the "start_time" field.
func (m *PolyMutation) ResetStartTime() {
	m.start_time = nil
}

// SetEndTime sets the "end_time" field.
func (m *PolyMutation) SetEndTime(t time.Time) {
	m.end_time = &t
}

// EndTime returns the value of the "end_time" field in the mutation.
func (m *PolyMutation) EndTime() (r time.Time, exists bool) {
	v := m.end_time
	if v == nil {
		return
	}
	return *v, true
}

// OldEndTime returns the old "end_time" field's value of the Poly entity.
// If the Poly object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PolyMutation) OldEndTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndTime: %w", err)
	}
	return oldValue.EndTime, nil
}

// ResetEndTime resets all changes to the "end_time" field.
func (m *PolyMutation) ResetEndTime() {
	m.end_time = nil
}

// SetLogoPic sets the "logo_pic" field.
func (m *PolyMutation) SetLogoPic(s string) {
	m.logo_pic = &s
}

// LogoPic returns the value of the "logo_pic" field in the mutation.
func (m *PolyMutation) LogoPic() (r string, exists bool) {
	v := m.logo_pic
	if v == nil {
		return
	}
	return *v, true
}

// OldLogoPic returns the old "logo_pic" field's value of the Poly entity.
// If the Poly object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PolyMutation) OldLogoPic(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLogoPic is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLogoPic requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLogoPic: %w", err)
	}
	return oldValue.LogoPic, nil
}

// ResetLogoPic resets all changes to the "logo_pic" field.
func (m *PolyMutation) ResetLogoPic() {
	m.logo_pic = nil
}

// SetPic1 sets the "pic1" field.
func (m *PolyMutation) SetPic1(s string) {
	m.pic1 = &s
}

// Pic1 returns the value of the "pic1" field in the mutation.
func (m *PolyMutation) Pic1() (r string, exists bool) {
	v := m.pic1
	if v == nil {
		return
	}
	return *v, true
}

// OldPic1 returns the old "pic1" field's value of the Poly entity.
// If the Poly object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PolyMutation) OldPic1(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPic1 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPic1 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPic1: %w", err)
	}
	return oldValue.Pic1, nil
}

// ResetPic1 resets all changes to the "pic1" field.
func (m *PolyMutation) ResetPic1() {
	m.pic1 = nil
}

// SetPic2 sets the "pic2" field.
func (m *PolyMutation) SetPic2(s string) {
	m.pic2 = &s
}

// Pic2 returns the value of the "pic2" field in the mutation.
func (m *PolyMutation) Pic2() (r string, exists bool) {
	v := m.pic2
	if v == nil {
		return
	}
	return *v, true
}

// OldPic2 returns the old "pic2" field's value of the Poly entity.
// If the Poly object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PolyMutation) OldPic2(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPic2 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPic2 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPic2: %w", err)
	}
	return oldValue.Pic2, nil
}

// ResetPic2 resets all changes to the "pic2" field.
func (m *PolyMutation) ResetPic2() {
	m.pic2 = nil
}

// SetPic3 sets the "pic3" field.
func (m *PolyMutation) SetPic3(s string) {
	m.pic3 = &s
}

// Pic3 returns the value of the "pic3" field in the mutation.
func (m *PolyMutation) Pic3() (r string, exists bool) {
	v := m.pic3
	if v == nil {
		return
	}
	return *v, true
}

// OldPic3 returns the old "pic3" field's value of the Poly entity.
// If the Poly object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PolyMutation) OldPic3(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPic3 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPic3 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPic3: %w", err)
	}
	return oldValue.Pic3, nil
}

// ResetPic3 resets all changes to the "pic3" field.
func (m *PolyMutation) ResetPic3() {
	m.pic3 = nil
}

// SetMenkan sets the "menkan" field.
func (m *PolyMutation) SetMenkan(s string) {
	m.menkan = &s
}

// Menkan returns the value of the "menkan" field in the mutation.
func (m *PolyMutation) Menkan() (r string, exists bool) {
	v := m.menkan
	if v == nil {
		return
	}
	return *v, true
}

// OldMenkan returns the old "menkan" field's value of the Poly entity.
// If the Poly object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PolyMutation) OldMenkan(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMenkan is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMenkan requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMenkan: %w", err)
	}
	return oldValue.Menkan, nil
}

// ResetMenkan resets all changes to the "menkan" field.
func (m *PolyMutation) ResetMenkan() {
	m.menkan = nil
}

// SetFafang sets the "fafang" field.
func (m *PolyMutation) SetFafang(s string) {
	m.fafang = &s
}

// Fafang returns the value of the "fafang" field in the mutation.
func (m *PolyMutation) Fafang() (r string, exists bool) {
	v := m.fafang
	if v == nil {
		return
	}
	return *v, true
}

// OldFafang returns the old "fafang" field's value of the Poly entity.
// If the Poly object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PolyMutation) OldFafang(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFafang is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFafang requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFafang: %w", err)
	}
	return oldValue.Fafang, nil
}

// ResetFafang resets all changes to the "fafang" field.
func (m *PolyMutation) ResetFafang() {
	m.fafang = nil
}

// SetXiaoqi sets the "xiaoqi" field.
func (m *PolyMutation) SetXiaoqi(s string) {
	m.xiaoqi = &s
}

// Xiaoqi returns the value of the "xiaoqi" field in the mutation.
func (m *PolyMutation) Xiaoqi() (r string, exists bool) {
	v := m.xiaoqi
	if v == nil {
		return
	}
	return *v, true
}

// OldXiaoqi returns the old "xiaoqi" field's value of the Poly entity.
// If the Poly object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PolyMutation) OldXiaoqi(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldXiaoqi is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldXiaoqi requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldXiaoqi: %w", err)
	}
	return oldValue.Xiaoqi, nil
}

// ResetXiaoqi resets all changes to the "xiaoqi" field.
func (m *PolyMutation) ResetXiaoqi() {
	m.xiaoqi = nil
}

// SetShiyong sets the "shiyong" field.
func (m *PolyMutation) SetShiyong(s string) {
	m.shiyong = &s
}

// Shiyong returns the value of the "shiyong" field in the mutation.
func (m *PolyMutation) Shiyong() (r string, exists bool) {
	v := m.shiyong
	if v == nil {
		return
	}
	return *v, true
}

// OldShiyong returns the old "shiyong" field's value of the Poly entity.
// If the Poly object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PolyMutation) OldShiyong(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShiyong is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShiyong requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShiyong: %w", err)
	}
	return oldValue.Shiyong, nil
}

// ResetShiyong resets all changes to the "shiyong" field.
func (m *PolyMutation) ResetShiyong() {
	m.shiyong = nil
}

// SetStatus sets the "status" field.
func (m *PolyMutation) SetStatus(i int32) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *PolyMutation) Status() (r int32, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Poly entity.
// If the Poly object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PolyMutation) OldStatus(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to the "status" field.
func (m *PolyMutation) AddStatus(i int32) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *PolyMutation) AddedStatus() (r int32, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *PolyMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetType sets the "type" field.
func (m *PolyMutation) SetType(i int32) {
	m._type = &i
	m.add_type = nil
}

// GetType returns the value of the "type" field in the mutation.
func (m *PolyMutation) GetType() (r int32, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Poly entity.
// If the Poly object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PolyMutation) OldType(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// AddType adds i to the "type" field.
func (m *PolyMutation) AddType(i int32) {
	if m.add_type != nil {
		*m.add_type += i
	} else {
		m.add_type = &i
	}
}

// AddedType returns the value that was added to the "type" field in this mutation.
func (m *PolyMutation) AddedType() (r int32, exists bool) {
	v := m.add_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetType resets all changes to the "type" field.
func (m *PolyMutation) ResetType() {
	m._type = nil
	m.add_type = nil
}

// Where appends a list predicates to the PolyMutation builder.
func (m *PolyMutation) Where(ps ...predicate.Poly) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PolyMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PolyMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Poly, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PolyMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PolyMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Poly).
func (m *PolyMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PolyMutation) Fields() []string {
	fields := make([]string, 0, 19)
	if m.create_time != nil {
		fields = append(fields, poly.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, poly.FieldUpdateTime)
	}
	if m.code != nil {
		fields = append(fields, poly.FieldCode)
	}
	if m.mall_code != nil {
		fields = append(fields, poly.FieldMallCode)
	}
	if m.name != nil {
		fields = append(fields, poly.FieldName)
	}
	if m.title != nil {
		fields = append(fields, poly.FieldTitle)
	}
	if m.memo != nil {
		fields = append(fields, poly.FieldMemo)
	}
	if m.start_time != nil {
		fields = append(fields, poly.FieldStartTime)
	}
	if m.end_time != nil {
		fields = append(fields, poly.FieldEndTime)
	}
	if m.logo_pic != nil {
		fields = append(fields, poly.FieldLogoPic)
	}
	if m.pic1 != nil {
		fields = append(fields, poly.FieldPic1)
	}
	if m.pic2 != nil {
		fields = append(fields, poly.FieldPic2)
	}
	if m.pic3 != nil {
		fields = append(fields, poly.FieldPic3)
	}
	if m.menkan != nil {
		fields = append(fields, poly.FieldMenkan)
	}
	if m.fafang != nil {
		fields = append(fields, poly.FieldFafang)
	}
	if m.xiaoqi != nil {
		fields = append(fields, poly.FieldXiaoqi)
	}
	if m.shiyong != nil {
		fields = append(fields, poly.FieldShiyong)
	}
	if m.status != nil {
		fields = append(fields, poly.FieldStatus)
	}
	if m._type != nil {
		fields = append(fields, poly.FieldType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PolyMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case poly.FieldCreateTime:
		return m.CreateTime()
	case poly.FieldUpdateTime:
		return m.UpdateTime()
	case poly.FieldCode:
		return m.Code()
	case poly.FieldMallCode:
		return m.MallCode()
	case poly.FieldName:
		return m.Name()
	case poly.FieldTitle:
		return m.Title()
	case poly.FieldMemo:
		return m.Memo()
	case poly.FieldStartTime:
		return m.StartTime()
	case poly.FieldEndTime:
		return m.EndTime()
	case poly.FieldLogoPic:
		return m.LogoPic()
	case poly.FieldPic1:
		return m.Pic1()
	case poly.FieldPic2:
		return m.Pic2()
	case poly.FieldPic3:
		return m.Pic3()
	case poly.FieldMenkan:
		return m.Menkan()
	case poly.FieldFafang:
		return m.Fafang()
	case poly.FieldXiaoqi:
		return m.Xiaoqi()
	case poly.FieldShiyong:
		return m.Shiyong()
	case poly.FieldStatus:
		return m.Status()
	case poly.FieldType:
		return m.GetType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PolyMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case poly.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case poly.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case poly.FieldCode:
		return m.OldCode(ctx)
	case poly.FieldMallCode:
		return m.OldMallCode(ctx)
	case poly.FieldName:
		return m.OldName(ctx)
	case poly.FieldTitle:
		return m.OldTitle(ctx)
	case poly.FieldMemo:
		return m.OldMemo(ctx)
	case poly.FieldStartTime:
		return m.OldStartTime(ctx)
	case poly.FieldEndTime:
		return m.OldEndTime(ctx)
	case poly.FieldLogoPic:
		return m.OldLogoPic(ctx)
	case poly.FieldPic1:
		return m.OldPic1(ctx)
	case poly.FieldPic2:
		return m.OldPic2(ctx)
	case poly.FieldPic3:
		return m.OldPic3(ctx)
	case poly.FieldMenkan:
		return m.OldMenkan(ctx)
	case poly.FieldFafang:
		return m.OldFafang(ctx)
	case poly.FieldXiaoqi:
		return m.OldXiaoqi(ctx)
	case poly.FieldShiyong:
		return m.OldShiyong(ctx)
	case poly.FieldStatus:
		return m.OldStatus(ctx)
	case poly.FieldType:
		return m.OldType(ctx)
	}
	return nil, fmt.Errorf("unknown Poly field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PolyMutation) SetField(name string, value ent.Value) error {
	switch name {
	case poly.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case poly.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case poly.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case poly.FieldMallCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMallCode(v)
		return nil
	case poly.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case poly.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case poly.FieldMemo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMemo(v)
		return nil
	case poly.FieldStartTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartTime(v)
		return nil
	case poly.FieldEndTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndTime(v)
		return nil
	case poly.FieldLogoPic:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLogoPic(v)
		return nil
	case poly.FieldPic1:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPic1(v)
		return nil
	case poly.FieldPic2:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPic2(v)
		return nil
	case poly.FieldPic3:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPic3(v)
		return nil
	case poly.FieldMenkan:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMenkan(v)
		return nil
	case poly.FieldFafang:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFafang(v)
		return nil
	case poly.FieldXiaoqi:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetXiaoqi(v)
		return nil
	case poly.FieldShiyong:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShiyong(v)
		return nil
	case poly.FieldStatus:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case poly.FieldType:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	}
	return fmt.Errorf("unknown Poly field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PolyMutation) AddedFields() []string {
	var fields []string
	if m.addstatus != nil {
		fields = append(fields, poly.FieldStatus)
	}
	if m.add_type != nil {
		fields = append(fields, poly.FieldType)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PolyMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case poly.FieldStatus:
		return m.AddedStatus()
	case poly.FieldType:
		return m.AddedType()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PolyMutation) AddField(name string, value ent.Value) error {
	switch name {
	case poly.FieldStatus:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	case poly.FieldType:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddType(v)
		return nil
	}
	return fmt.Errorf("unknown Poly numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PolyMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PolyMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PolyMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Poly nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PolyMutation) ResetField(name string) error {
	switch name {
	case poly.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case poly.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case poly.FieldCode:
		m.ResetCode()
		return nil
	case poly.FieldMallCode:
		m.ResetMallCode()
		return nil
	case poly.FieldName:
		m.ResetName()
		return nil
	case poly.FieldTitle:
		m.ResetTitle()
		return nil
	case poly.FieldMemo:
		m.ResetMemo()
		return nil
	case poly.FieldStartTime:
		m.ResetStartTime()
		return nil
	case poly.FieldEndTime:
		m.ResetEndTime()
		return nil
	case poly.FieldLogoPic:
		m.ResetLogoPic()
		return nil
	case poly.FieldPic1:
		m.ResetPic1()
		return nil
	case poly.FieldPic2:
		m.ResetPic2()
		return nil
	case poly.FieldPic3:
		m.ResetPic3()
		return nil
	case poly.FieldMenkan:
		m.ResetMenkan()
		return nil
	case poly.FieldFafang:
		m.ResetFafang()
		return nil
	case poly.FieldXiaoqi:
		m.ResetXiaoqi()
		return nil
	case poly.FieldShiyong:
		m.ResetShiyong()
		return nil
	case poly.FieldStatus:
		m.ResetStatus()
		return nil
	case poly.FieldType:
		m.ResetType()
		return nil
	}
	return fmt.Errorf("unknown Poly field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PolyMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PolyMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PolyMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PolyMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PolyMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PolyMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PolyMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Poly unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PolyMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Poly edge %s", name)
}
