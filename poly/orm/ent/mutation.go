// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/twiglab/crm/poly/orm/ent/poly"
	"github.com/twiglab/crm/poly/orm/ent/predicate"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypePoly = "Poly"
)

// PolyMutation represents an operation that mutates the Poly nodes in the graph.
type PolyMutation struct {
	config
	op                  Op
	typ                 string
	id                  *uuid.UUID
	code                *string
	mall_code           *string
	operator            *string
	activity_add_time   *time.Time
	rule_code           *string
	activity_name       *string
	activity_desc       *string
	activity_budget     *int64
	addactivity_budget  *int64
	activity_start_time *time.Time
	activity_end_time   *time.Time
	activity_status     *int
	addactivity_status  *int
	activity_type       *int
	addactivity_type    *int
	clearedFields       map[string]struct{}
	done                bool
	oldValue            func(context.Context) (*Poly, error)
	predicates          []predicate.Poly
}

var _ ent.Mutation = (*PolyMutation)(nil)

// polyOption allows management of the mutation configuration using functional options.
type polyOption func(*PolyMutation)

// newPolyMutation creates new mutation for the Poly entity.
func newPolyMutation(c config, op Op, opts ...polyOption) *PolyMutation {
	m := &PolyMutation{
		config:        c,
		op:            op,
		typ:           TypePoly,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPolyID sets the ID field of the mutation.
func withPolyID(id uuid.UUID) polyOption {
	return func(m *PolyMutation) {
		var (
			err   error
			once  sync.Once
			value *Poly
		)
		m.oldValue = func(ctx context.Context) (*Poly, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Poly.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPoly sets the old Poly of the mutation.
func withPoly(node *Poly) polyOption {
	return func(m *PolyMutation) {
		m.oldValue = func(context.Context) (*Poly, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PolyMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PolyMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Poly entities.
func (m *PolyMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PolyMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PolyMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Poly.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCode sets the "code" field.
func (m *PolyMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *PolyMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the Poly entity.
// If the Poly object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PolyMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *PolyMutation) ResetCode() {
	m.code = nil
}

// SetMallCode sets the "mall_code" field.
func (m *PolyMutation) SetMallCode(s string) {
	m.mall_code = &s
}

// MallCode returns the value of the "mall_code" field in the mutation.
func (m *PolyMutation) MallCode() (r string, exists bool) {
	v := m.mall_code
	if v == nil {
		return
	}
	return *v, true
}

// OldMallCode returns the old "mall_code" field's value of the Poly entity.
// If the Poly object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PolyMutation) OldMallCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMallCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMallCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMallCode: %w", err)
	}
	return oldValue.MallCode, nil
}

// ResetMallCode resets all changes to the "mall_code" field.
func (m *PolyMutation) ResetMallCode() {
	m.mall_code = nil
}

// SetOperator sets the "operator" field.
func (m *PolyMutation) SetOperator(s string) {
	m.operator = &s
}

// Operator returns the value of the "operator" field in the mutation.
func (m *PolyMutation) Operator() (r string, exists bool) {
	v := m.operator
	if v == nil {
		return
	}
	return *v, true
}

// OldOperator returns the old "operator" field's value of the Poly entity.
// If the Poly object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PolyMutation) OldOperator(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOperator is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOperator requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOperator: %w", err)
	}
	return oldValue.Operator, nil
}

// ResetOperator resets all changes to the "operator" field.
func (m *PolyMutation) ResetOperator() {
	m.operator = nil
}

// SetActivityAddTime sets the "activity_add_time" field.
func (m *PolyMutation) SetActivityAddTime(t time.Time) {
	m.activity_add_time = &t
}

// ActivityAddTime returns the value of the "activity_add_time" field in the mutation.
func (m *PolyMutation) ActivityAddTime() (r time.Time, exists bool) {
	v := m.activity_add_time
	if v == nil {
		return
	}
	return *v, true
}

// OldActivityAddTime returns the old "activity_add_time" field's value of the Poly entity.
// If the Poly object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PolyMutation) OldActivityAddTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActivityAddTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActivityAddTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActivityAddTime: %w", err)
	}
	return oldValue.ActivityAddTime, nil
}

// ResetActivityAddTime resets all changes to the "activity_add_time" field.
func (m *PolyMutation) ResetActivityAddTime() {
	m.activity_add_time = nil
}

// SetRuleCode sets the "rule_code" field.
func (m *PolyMutation) SetRuleCode(s string) {
	m.rule_code = &s
}

// RuleCode returns the value of the "rule_code" field in the mutation.
func (m *PolyMutation) RuleCode() (r string, exists bool) {
	v := m.rule_code
	if v == nil {
		return
	}
	return *v, true
}

// OldRuleCode returns the old "rule_code" field's value of the Poly entity.
// If the Poly object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PolyMutation) OldRuleCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRuleCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRuleCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRuleCode: %w", err)
	}
	return oldValue.RuleCode, nil
}

// ResetRuleCode resets all changes to the "rule_code" field.
func (m *PolyMutation) ResetRuleCode() {
	m.rule_code = nil
}

// SetActivityName sets the "activity_name" field.
func (m *PolyMutation) SetActivityName(s string) {
	m.activity_name = &s
}

// ActivityName returns the value of the "activity_name" field in the mutation.
func (m *PolyMutation) ActivityName() (r string, exists bool) {
	v := m.activity_name
	if v == nil {
		return
	}
	return *v, true
}

// OldActivityName returns the old "activity_name" field's value of the Poly entity.
// If the Poly object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PolyMutation) OldActivityName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActivityName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActivityName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActivityName: %w", err)
	}
	return oldValue.ActivityName, nil
}

// ResetActivityName resets all changes to the "activity_name" field.
func (m *PolyMutation) ResetActivityName() {
	m.activity_name = nil
}

// SetActivityDesc sets the "activity_desc" field.
func (m *PolyMutation) SetActivityDesc(s string) {
	m.activity_desc = &s
}

// ActivityDesc returns the value of the "activity_desc" field in the mutation.
func (m *PolyMutation) ActivityDesc() (r string, exists bool) {
	v := m.activity_desc
	if v == nil {
		return
	}
	return *v, true
}

// OldActivityDesc returns the old "activity_desc" field's value of the Poly entity.
// If the Poly object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PolyMutation) OldActivityDesc(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActivityDesc is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActivityDesc requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActivityDesc: %w", err)
	}
	return oldValue.ActivityDesc, nil
}

// ResetActivityDesc resets all changes to the "activity_desc" field.
func (m *PolyMutation) ResetActivityDesc() {
	m.activity_desc = nil
}

// SetActivityBudget sets the "activity_budget" field.
func (m *PolyMutation) SetActivityBudget(i int64) {
	m.activity_budget = &i
	m.addactivity_budget = nil
}

// ActivityBudget returns the value of the "activity_budget" field in the mutation.
func (m *PolyMutation) ActivityBudget() (r int64, exists bool) {
	v := m.activity_budget
	if v == nil {
		return
	}
	return *v, true
}

// OldActivityBudget returns the old "activity_budget" field's value of the Poly entity.
// If the Poly object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PolyMutation) OldActivityBudget(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActivityBudget is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActivityBudget requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActivityBudget: %w", err)
	}
	return oldValue.ActivityBudget, nil
}

// AddActivityBudget adds i to the "activity_budget" field.
func (m *PolyMutation) AddActivityBudget(i int64) {
	if m.addactivity_budget != nil {
		*m.addactivity_budget += i
	} else {
		m.addactivity_budget = &i
	}
}

// AddedActivityBudget returns the value that was added to the "activity_budget" field in this mutation.
func (m *PolyMutation) AddedActivityBudget() (r int64, exists bool) {
	v := m.addactivity_budget
	if v == nil {
		return
	}
	return *v, true
}

// ResetActivityBudget resets all changes to the "activity_budget" field.
func (m *PolyMutation) ResetActivityBudget() {
	m.activity_budget = nil
	m.addactivity_budget = nil
}

// SetActivityStartTime sets the "activity_start_time" field.
func (m *PolyMutation) SetActivityStartTime(t time.Time) {
	m.activity_start_time = &t
}

// ActivityStartTime returns the value of the "activity_start_time" field in the mutation.
func (m *PolyMutation) ActivityStartTime() (r time.Time, exists bool) {
	v := m.activity_start_time
	if v == nil {
		return
	}
	return *v, true
}

// OldActivityStartTime returns the old "activity_start_time" field's value of the Poly entity.
// If the Poly object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PolyMutation) OldActivityStartTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActivityStartTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActivityStartTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActivityStartTime: %w", err)
	}
	return oldValue.ActivityStartTime, nil
}

// ResetActivityStartTime resets all changes to the "activity_start_time" field.
func (m *PolyMutation) ResetActivityStartTime() {
	m.activity_start_time = nil
}

// SetActivityEndTime sets the "activity_end_time" field.
func (m *PolyMutation) SetActivityEndTime(t time.Time) {
	m.activity_end_time = &t
}

// ActivityEndTime returns the value of the "activity_end_time" field in the mutation.
func (m *PolyMutation) ActivityEndTime() (r time.Time, exists bool) {
	v := m.activity_end_time
	if v == nil {
		return
	}
	return *v, true
}

// OldActivityEndTime returns the old "activity_end_time" field's value of the Poly entity.
// If the Poly object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PolyMutation) OldActivityEndTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActivityEndTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActivityEndTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActivityEndTime: %w", err)
	}
	return oldValue.ActivityEndTime, nil
}

// ResetActivityEndTime resets all changes to the "activity_end_time" field.
func (m *PolyMutation) ResetActivityEndTime() {
	m.activity_end_time = nil
}

// SetActivityStatus sets the "activity_status" field.
func (m *PolyMutation) SetActivityStatus(i int) {
	m.activity_status = &i
	m.addactivity_status = nil
}

// ActivityStatus returns the value of the "activity_status" field in the mutation.
func (m *PolyMutation) ActivityStatus() (r int, exists bool) {
	v := m.activity_status
	if v == nil {
		return
	}
	return *v, true
}

// OldActivityStatus returns the old "activity_status" field's value of the Poly entity.
// If the Poly object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PolyMutation) OldActivityStatus(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActivityStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActivityStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActivityStatus: %w", err)
	}
	return oldValue.ActivityStatus, nil
}

// AddActivityStatus adds i to the "activity_status" field.
func (m *PolyMutation) AddActivityStatus(i int) {
	if m.addactivity_status != nil {
		*m.addactivity_status += i
	} else {
		m.addactivity_status = &i
	}
}

// AddedActivityStatus returns the value that was added to the "activity_status" field in this mutation.
func (m *PolyMutation) AddedActivityStatus() (r int, exists bool) {
	v := m.addactivity_status
	if v == nil {
		return
	}
	return *v, true
}

// ResetActivityStatus resets all changes to the "activity_status" field.
func (m *PolyMutation) ResetActivityStatus() {
	m.activity_status = nil
	m.addactivity_status = nil
}

// SetActivityType sets the "activity_type" field.
func (m *PolyMutation) SetActivityType(i int) {
	m.activity_type = &i
	m.addactivity_type = nil
}

// ActivityType returns the value of the "activity_type" field in the mutation.
func (m *PolyMutation) ActivityType() (r int, exists bool) {
	v := m.activity_type
	if v == nil {
		return
	}
	return *v, true
}

// OldActivityType returns the old "activity_type" field's value of the Poly entity.
// If the Poly object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PolyMutation) OldActivityType(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActivityType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActivityType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActivityType: %w", err)
	}
	return oldValue.ActivityType, nil
}

// AddActivityType adds i to the "activity_type" field.
func (m *PolyMutation) AddActivityType(i int) {
	if m.addactivity_type != nil {
		*m.addactivity_type += i
	} else {
		m.addactivity_type = &i
	}
}

// AddedActivityType returns the value that was added to the "activity_type" field in this mutation.
func (m *PolyMutation) AddedActivityType() (r int, exists bool) {
	v := m.addactivity_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetActivityType resets all changes to the "activity_type" field.
func (m *PolyMutation) ResetActivityType() {
	m.activity_type = nil
	m.addactivity_type = nil
}

// Where appends a list predicates to the PolyMutation builder.
func (m *PolyMutation) Where(ps ...predicate.Poly) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PolyMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PolyMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Poly, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PolyMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PolyMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Poly).
func (m *PolyMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PolyMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.code != nil {
		fields = append(fields, poly.FieldCode)
	}
	if m.mall_code != nil {
		fields = append(fields, poly.FieldMallCode)
	}
	if m.operator != nil {
		fields = append(fields, poly.FieldOperator)
	}
	if m.activity_add_time != nil {
		fields = append(fields, poly.FieldActivityAddTime)
	}
	if m.rule_code != nil {
		fields = append(fields, poly.FieldRuleCode)
	}
	if m.activity_name != nil {
		fields = append(fields, poly.FieldActivityName)
	}
	if m.activity_desc != nil {
		fields = append(fields, poly.FieldActivityDesc)
	}
	if m.activity_budget != nil {
		fields = append(fields, poly.FieldActivityBudget)
	}
	if m.activity_start_time != nil {
		fields = append(fields, poly.FieldActivityStartTime)
	}
	if m.activity_end_time != nil {
		fields = append(fields, poly.FieldActivityEndTime)
	}
	if m.activity_status != nil {
		fields = append(fields, poly.FieldActivityStatus)
	}
	if m.activity_type != nil {
		fields = append(fields, poly.FieldActivityType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PolyMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case poly.FieldCode:
		return m.Code()
	case poly.FieldMallCode:
		return m.MallCode()
	case poly.FieldOperator:
		return m.Operator()
	case poly.FieldActivityAddTime:
		return m.ActivityAddTime()
	case poly.FieldRuleCode:
		return m.RuleCode()
	case poly.FieldActivityName:
		return m.ActivityName()
	case poly.FieldActivityDesc:
		return m.ActivityDesc()
	case poly.FieldActivityBudget:
		return m.ActivityBudget()
	case poly.FieldActivityStartTime:
		return m.ActivityStartTime()
	case poly.FieldActivityEndTime:
		return m.ActivityEndTime()
	case poly.FieldActivityStatus:
		return m.ActivityStatus()
	case poly.FieldActivityType:
		return m.ActivityType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PolyMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case poly.FieldCode:
		return m.OldCode(ctx)
	case poly.FieldMallCode:
		return m.OldMallCode(ctx)
	case poly.FieldOperator:
		return m.OldOperator(ctx)
	case poly.FieldActivityAddTime:
		return m.OldActivityAddTime(ctx)
	case poly.FieldRuleCode:
		return m.OldRuleCode(ctx)
	case poly.FieldActivityName:
		return m.OldActivityName(ctx)
	case poly.FieldActivityDesc:
		return m.OldActivityDesc(ctx)
	case poly.FieldActivityBudget:
		return m.OldActivityBudget(ctx)
	case poly.FieldActivityStartTime:
		return m.OldActivityStartTime(ctx)
	case poly.FieldActivityEndTime:
		return m.OldActivityEndTime(ctx)
	case poly.FieldActivityStatus:
		return m.OldActivityStatus(ctx)
	case poly.FieldActivityType:
		return m.OldActivityType(ctx)
	}
	return nil, fmt.Errorf("unknown Poly field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PolyMutation) SetField(name string, value ent.Value) error {
	switch name {
	case poly.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case poly.FieldMallCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMallCode(v)
		return nil
	case poly.FieldOperator:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOperator(v)
		return nil
	case poly.FieldActivityAddTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActivityAddTime(v)
		return nil
	case poly.FieldRuleCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRuleCode(v)
		return nil
	case poly.FieldActivityName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActivityName(v)
		return nil
	case poly.FieldActivityDesc:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActivityDesc(v)
		return nil
	case poly.FieldActivityBudget:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActivityBudget(v)
		return nil
	case poly.FieldActivityStartTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActivityStartTime(v)
		return nil
	case poly.FieldActivityEndTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActivityEndTime(v)
		return nil
	case poly.FieldActivityStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActivityStatus(v)
		return nil
	case poly.FieldActivityType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActivityType(v)
		return nil
	}
	return fmt.Errorf("unknown Poly field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PolyMutation) AddedFields() []string {
	var fields []string
	if m.addactivity_budget != nil {
		fields = append(fields, poly.FieldActivityBudget)
	}
	if m.addactivity_status != nil {
		fields = append(fields, poly.FieldActivityStatus)
	}
	if m.addactivity_type != nil {
		fields = append(fields, poly.FieldActivityType)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PolyMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case poly.FieldActivityBudget:
		return m.AddedActivityBudget()
	case poly.FieldActivityStatus:
		return m.AddedActivityStatus()
	case poly.FieldActivityType:
		return m.AddedActivityType()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PolyMutation) AddField(name string, value ent.Value) error {
	switch name {
	case poly.FieldActivityBudget:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddActivityBudget(v)
		return nil
	case poly.FieldActivityStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddActivityStatus(v)
		return nil
	case poly.FieldActivityType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddActivityType(v)
		return nil
	}
	return fmt.Errorf("unknown Poly numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PolyMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PolyMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PolyMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Poly nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PolyMutation) ResetField(name string) error {
	switch name {
	case poly.FieldCode:
		m.ResetCode()
		return nil
	case poly.FieldMallCode:
		m.ResetMallCode()
		return nil
	case poly.FieldOperator:
		m.ResetOperator()
		return nil
	case poly.FieldActivityAddTime:
		m.ResetActivityAddTime()
		return nil
	case poly.FieldRuleCode:
		m.ResetRuleCode()
		return nil
	case poly.FieldActivityName:
		m.ResetActivityName()
		return nil
	case poly.FieldActivityDesc:
		m.ResetActivityDesc()
		return nil
	case poly.FieldActivityBudget:
		m.ResetActivityBudget()
		return nil
	case poly.FieldActivityStartTime:
		m.ResetActivityStartTime()
		return nil
	case poly.FieldActivityEndTime:
		m.ResetActivityEndTime()
		return nil
	case poly.FieldActivityStatus:
		m.ResetActivityStatus()
		return nil
	case poly.FieldActivityType:
		m.ResetActivityType()
		return nil
	}
	return fmt.Errorf("unknown Poly field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PolyMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PolyMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PolyMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PolyMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PolyMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PolyMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PolyMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Poly unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PolyMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Poly edge %s", name)
}
