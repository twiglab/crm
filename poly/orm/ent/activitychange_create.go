// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/twiglab/crm/poly/orm/ent/activitychange"
)

// ActivityChangeCreate is the builder for creating a ActivityChange entity.
type ActivityChangeCreate struct {
	config
	mutation *ActivityChangeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCode sets the "code" field.
func (acc *ActivityChangeCreate) SetCode(s string) *ActivityChangeCreate {
	acc.mutation.SetCode(s)
	return acc
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (acc *ActivityChangeCreate) SetNillableCode(s *string) *ActivityChangeCreate {
	if s != nil {
		acc.SetCode(*s)
	}
	return acc
}

// SetActivityCode sets the "activity_code" field.
func (acc *ActivityChangeCreate) SetActivityCode(s string) *ActivityChangeCreate {
	acc.mutation.SetActivityCode(s)
	return acc
}

// SetOperator sets the "operator" field.
func (acc *ActivityChangeCreate) SetOperator(s string) *ActivityChangeCreate {
	acc.mutation.SetOperator(s)
	return acc
}

// SetSubmitTime sets the "submit_time" field.
func (acc *ActivityChangeCreate) SetSubmitTime(t time.Time) *ActivityChangeCreate {
	acc.mutation.SetSubmitTime(t)
	return acc
}

// SetNillableSubmitTime sets the "submit_time" field if the given value is not nil.
func (acc *ActivityChangeCreate) SetNillableSubmitTime(t *time.Time) *ActivityChangeCreate {
	if t != nil {
		acc.SetSubmitTime(*t)
	}
	return acc
}

// SetApprover sets the "approver" field.
func (acc *ActivityChangeCreate) SetApprover(s string) *ActivityChangeCreate {
	acc.mutation.SetApprover(s)
	return acc
}

// SetApproveTime sets the "approve_time" field.
func (acc *ActivityChangeCreate) SetApproveTime(t time.Time) *ActivityChangeCreate {
	acc.mutation.SetApproveTime(t)
	return acc
}

// SetStatus sets the "status" field.
func (acc *ActivityChangeCreate) SetStatus(i int) *ActivityChangeCreate {
	acc.mutation.SetStatus(i)
	return acc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (acc *ActivityChangeCreate) SetNillableStatus(i *int) *ActivityChangeCreate {
	if i != nil {
		acc.SetStatus(*i)
	}
	return acc
}

// SetChangeSummary sets the "change_summary" field.
func (acc *ActivityChangeCreate) SetChangeSummary(s string) *ActivityChangeCreate {
	acc.mutation.SetChangeSummary(s)
	return acc
}

// SetChangeReason sets the "change_reason" field.
func (acc *ActivityChangeCreate) SetChangeReason(s string) *ActivityChangeCreate {
	acc.mutation.SetChangeReason(s)
	return acc
}

// SetChangeRecord sets the "change_record" field.
func (acc *ActivityChangeCreate) SetChangeRecord(s string) *ActivityChangeCreate {
	acc.mutation.SetChangeRecord(s)
	return acc
}

// SetID sets the "id" field.
func (acc *ActivityChangeCreate) SetID(u uuid.UUID) *ActivityChangeCreate {
	acc.mutation.SetID(u)
	return acc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (acc *ActivityChangeCreate) SetNillableID(u *uuid.UUID) *ActivityChangeCreate {
	if u != nil {
		acc.SetID(*u)
	}
	return acc
}

// Mutation returns the ActivityChangeMutation object of the builder.
func (acc *ActivityChangeCreate) Mutation() *ActivityChangeMutation {
	return acc.mutation
}

// Save creates the ActivityChange in the database.
func (acc *ActivityChangeCreate) Save(ctx context.Context) (*ActivityChange, error) {
	acc.defaults()
	return withHooks(ctx, acc.sqlSave, acc.mutation, acc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (acc *ActivityChangeCreate) SaveX(ctx context.Context) *ActivityChange {
	v, err := acc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acc *ActivityChangeCreate) Exec(ctx context.Context) error {
	_, err := acc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acc *ActivityChangeCreate) ExecX(ctx context.Context) {
	if err := acc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (acc *ActivityChangeCreate) defaults() {
	if _, ok := acc.mutation.Code(); !ok {
		v := activitychange.DefaultCode()
		acc.mutation.SetCode(v)
	}
	if _, ok := acc.mutation.SubmitTime(); !ok {
		v := activitychange.DefaultSubmitTime()
		acc.mutation.SetSubmitTime(v)
	}
	if _, ok := acc.mutation.Status(); !ok {
		v := activitychange.DefaultStatus
		acc.mutation.SetStatus(v)
	}
	if _, ok := acc.mutation.ID(); !ok {
		v := activitychange.DefaultID()
		acc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (acc *ActivityChangeCreate) check() error {
	if _, ok := acc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "ActivityChange.code"`)}
	}
	if v, ok := acc.mutation.Code(); ok {
		if err := activitychange.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "ActivityChange.code": %w`, err)}
		}
	}
	if _, ok := acc.mutation.ActivityCode(); !ok {
		return &ValidationError{Name: "activity_code", err: errors.New(`ent: missing required field "ActivityChange.activity_code"`)}
	}
	if v, ok := acc.mutation.ActivityCode(); ok {
		if err := activitychange.ActivityCodeValidator(v); err != nil {
			return &ValidationError{Name: "activity_code", err: fmt.Errorf(`ent: validator failed for field "ActivityChange.activity_code": %w`, err)}
		}
	}
	if _, ok := acc.mutation.Operator(); !ok {
		return &ValidationError{Name: "operator", err: errors.New(`ent: missing required field "ActivityChange.operator"`)}
	}
	if v, ok := acc.mutation.Operator(); ok {
		if err := activitychange.OperatorValidator(v); err != nil {
			return &ValidationError{Name: "operator", err: fmt.Errorf(`ent: validator failed for field "ActivityChange.operator": %w`, err)}
		}
	}
	if _, ok := acc.mutation.SubmitTime(); !ok {
		return &ValidationError{Name: "submit_time", err: errors.New(`ent: missing required field "ActivityChange.submit_time"`)}
	}
	if _, ok := acc.mutation.Approver(); !ok {
		return &ValidationError{Name: "approver", err: errors.New(`ent: missing required field "ActivityChange.approver"`)}
	}
	if v, ok := acc.mutation.Approver(); ok {
		if err := activitychange.ApproverValidator(v); err != nil {
			return &ValidationError{Name: "approver", err: fmt.Errorf(`ent: validator failed for field "ActivityChange.approver": %w`, err)}
		}
	}
	if _, ok := acc.mutation.ApproveTime(); !ok {
		return &ValidationError{Name: "approve_time", err: errors.New(`ent: missing required field "ActivityChange.approve_time"`)}
	}
	if _, ok := acc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "ActivityChange.status"`)}
	}
	if _, ok := acc.mutation.ChangeSummary(); !ok {
		return &ValidationError{Name: "change_summary", err: errors.New(`ent: missing required field "ActivityChange.change_summary"`)}
	}
	if v, ok := acc.mutation.ChangeSummary(); ok {
		if err := activitychange.ChangeSummaryValidator(v); err != nil {
			return &ValidationError{Name: "change_summary", err: fmt.Errorf(`ent: validator failed for field "ActivityChange.change_summary": %w`, err)}
		}
	}
	if _, ok := acc.mutation.ChangeReason(); !ok {
		return &ValidationError{Name: "change_reason", err: errors.New(`ent: missing required field "ActivityChange.change_reason"`)}
	}
	if v, ok := acc.mutation.ChangeReason(); ok {
		if err := activitychange.ChangeReasonValidator(v); err != nil {
			return &ValidationError{Name: "change_reason", err: fmt.Errorf(`ent: validator failed for field "ActivityChange.change_reason": %w`, err)}
		}
	}
	if _, ok := acc.mutation.ChangeRecord(); !ok {
		return &ValidationError{Name: "change_record", err: errors.New(`ent: missing required field "ActivityChange.change_record"`)}
	}
	if v, ok := acc.mutation.ChangeRecord(); ok {
		if err := activitychange.ChangeRecordValidator(v); err != nil {
			return &ValidationError{Name: "change_record", err: fmt.Errorf(`ent: validator failed for field "ActivityChange.change_record": %w`, err)}
		}
	}
	return nil
}

func (acc *ActivityChangeCreate) sqlSave(ctx context.Context) (*ActivityChange, error) {
	if err := acc.check(); err != nil {
		return nil, err
	}
	_node, _spec := acc.createSpec()
	if err := sqlgraph.CreateNode(ctx, acc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	acc.mutation.id = &_node.ID
	acc.mutation.done = true
	return _node, nil
}

func (acc *ActivityChangeCreate) createSpec() (*ActivityChange, *sqlgraph.CreateSpec) {
	var (
		_node = &ActivityChange{config: acc.config}
		_spec = sqlgraph.NewCreateSpec(activitychange.Table, sqlgraph.NewFieldSpec(activitychange.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = acc.conflict
	if id, ok := acc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := acc.mutation.Code(); ok {
		_spec.SetField(activitychange.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := acc.mutation.ActivityCode(); ok {
		_spec.SetField(activitychange.FieldActivityCode, field.TypeString, value)
		_node.ActivityCode = value
	}
	if value, ok := acc.mutation.Operator(); ok {
		_spec.SetField(activitychange.FieldOperator, field.TypeString, value)
		_node.Operator = value
	}
	if value, ok := acc.mutation.SubmitTime(); ok {
		_spec.SetField(activitychange.FieldSubmitTime, field.TypeTime, value)
		_node.SubmitTime = value
	}
	if value, ok := acc.mutation.Approver(); ok {
		_spec.SetField(activitychange.FieldApprover, field.TypeString, value)
		_node.Approver = value
	}
	if value, ok := acc.mutation.ApproveTime(); ok {
		_spec.SetField(activitychange.FieldApproveTime, field.TypeTime, value)
		_node.ApproveTime = value
	}
	if value, ok := acc.mutation.Status(); ok {
		_spec.SetField(activitychange.FieldStatus, field.TypeInt, value)
		_node.Status = value
	}
	if value, ok := acc.mutation.ChangeSummary(); ok {
		_spec.SetField(activitychange.FieldChangeSummary, field.TypeString, value)
		_node.ChangeSummary = value
	}
	if value, ok := acc.mutation.ChangeReason(); ok {
		_spec.SetField(activitychange.FieldChangeReason, field.TypeString, value)
		_node.ChangeReason = value
	}
	if value, ok := acc.mutation.ChangeRecord(); ok {
		_spec.SetField(activitychange.FieldChangeRecord, field.TypeString, value)
		_node.ChangeRecord = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ActivityChange.Create().
//		SetCode(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ActivityChangeUpsert) {
//			SetCode(v+v).
//		}).
//		Exec(ctx)
func (acc *ActivityChangeCreate) OnConflict(opts ...sql.ConflictOption) *ActivityChangeUpsertOne {
	acc.conflict = opts
	return &ActivityChangeUpsertOne{
		create: acc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ActivityChange.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (acc *ActivityChangeCreate) OnConflictColumns(columns ...string) *ActivityChangeUpsertOne {
	acc.conflict = append(acc.conflict, sql.ConflictColumns(columns...))
	return &ActivityChangeUpsertOne{
		create: acc,
	}
}

type (
	// ActivityChangeUpsertOne is the builder for "upsert"-ing
	//  one ActivityChange node.
	ActivityChangeUpsertOne struct {
		create *ActivityChangeCreate
	}

	// ActivityChangeUpsert is the "OnConflict" setter.
	ActivityChangeUpsert struct {
		*sql.UpdateSet
	}
)

// SetOperator sets the "operator" field.
func (u *ActivityChangeUpsert) SetOperator(v string) *ActivityChangeUpsert {
	u.Set(activitychange.FieldOperator, v)
	return u
}

// UpdateOperator sets the "operator" field to the value that was provided on create.
func (u *ActivityChangeUpsert) UpdateOperator() *ActivityChangeUpsert {
	u.SetExcluded(activitychange.FieldOperator)
	return u
}

// SetApprover sets the "approver" field.
func (u *ActivityChangeUpsert) SetApprover(v string) *ActivityChangeUpsert {
	u.Set(activitychange.FieldApprover, v)
	return u
}

// UpdateApprover sets the "approver" field to the value that was provided on create.
func (u *ActivityChangeUpsert) UpdateApprover() *ActivityChangeUpsert {
	u.SetExcluded(activitychange.FieldApprover)
	return u
}

// SetApproveTime sets the "approve_time" field.
func (u *ActivityChangeUpsert) SetApproveTime(v time.Time) *ActivityChangeUpsert {
	u.Set(activitychange.FieldApproveTime, v)
	return u
}

// UpdateApproveTime sets the "approve_time" field to the value that was provided on create.
func (u *ActivityChangeUpsert) UpdateApproveTime() *ActivityChangeUpsert {
	u.SetExcluded(activitychange.FieldApproveTime)
	return u
}

// SetStatus sets the "status" field.
func (u *ActivityChangeUpsert) SetStatus(v int) *ActivityChangeUpsert {
	u.Set(activitychange.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ActivityChangeUpsert) UpdateStatus() *ActivityChangeUpsert {
	u.SetExcluded(activitychange.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *ActivityChangeUpsert) AddStatus(v int) *ActivityChangeUpsert {
	u.Add(activitychange.FieldStatus, v)
	return u
}

// SetChangeSummary sets the "change_summary" field.
func (u *ActivityChangeUpsert) SetChangeSummary(v string) *ActivityChangeUpsert {
	u.Set(activitychange.FieldChangeSummary, v)
	return u
}

// UpdateChangeSummary sets the "change_summary" field to the value that was provided on create.
func (u *ActivityChangeUpsert) UpdateChangeSummary() *ActivityChangeUpsert {
	u.SetExcluded(activitychange.FieldChangeSummary)
	return u
}

// SetChangeReason sets the "change_reason" field.
func (u *ActivityChangeUpsert) SetChangeReason(v string) *ActivityChangeUpsert {
	u.Set(activitychange.FieldChangeReason, v)
	return u
}

// UpdateChangeReason sets the "change_reason" field to the value that was provided on create.
func (u *ActivityChangeUpsert) UpdateChangeReason() *ActivityChangeUpsert {
	u.SetExcluded(activitychange.FieldChangeReason)
	return u
}

// SetChangeRecord sets the "change_record" field.
func (u *ActivityChangeUpsert) SetChangeRecord(v string) *ActivityChangeUpsert {
	u.Set(activitychange.FieldChangeRecord, v)
	return u
}

// UpdateChangeRecord sets the "change_record" field to the value that was provided on create.
func (u *ActivityChangeUpsert) UpdateChangeRecord() *ActivityChangeUpsert {
	u.SetExcluded(activitychange.FieldChangeRecord)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ActivityChange.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(activitychange.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ActivityChangeUpsertOne) UpdateNewValues() *ActivityChangeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(activitychange.FieldID)
		}
		if _, exists := u.create.mutation.Code(); exists {
			s.SetIgnore(activitychange.FieldCode)
		}
		if _, exists := u.create.mutation.ActivityCode(); exists {
			s.SetIgnore(activitychange.FieldActivityCode)
		}
		if _, exists := u.create.mutation.SubmitTime(); exists {
			s.SetIgnore(activitychange.FieldSubmitTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ActivityChange.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ActivityChangeUpsertOne) Ignore() *ActivityChangeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ActivityChangeUpsertOne) DoNothing() *ActivityChangeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ActivityChangeCreate.OnConflict
// documentation for more info.
func (u *ActivityChangeUpsertOne) Update(set func(*ActivityChangeUpsert)) *ActivityChangeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ActivityChangeUpsert{UpdateSet: update})
	}))
	return u
}

// SetOperator sets the "operator" field.
func (u *ActivityChangeUpsertOne) SetOperator(v string) *ActivityChangeUpsertOne {
	return u.Update(func(s *ActivityChangeUpsert) {
		s.SetOperator(v)
	})
}

// UpdateOperator sets the "operator" field to the value that was provided on create.
func (u *ActivityChangeUpsertOne) UpdateOperator() *ActivityChangeUpsertOne {
	return u.Update(func(s *ActivityChangeUpsert) {
		s.UpdateOperator()
	})
}

// SetApprover sets the "approver" field.
func (u *ActivityChangeUpsertOne) SetApprover(v string) *ActivityChangeUpsertOne {
	return u.Update(func(s *ActivityChangeUpsert) {
		s.SetApprover(v)
	})
}

// UpdateApprover sets the "approver" field to the value that was provided on create.
func (u *ActivityChangeUpsertOne) UpdateApprover() *ActivityChangeUpsertOne {
	return u.Update(func(s *ActivityChangeUpsert) {
		s.UpdateApprover()
	})
}

// SetApproveTime sets the "approve_time" field.
func (u *ActivityChangeUpsertOne) SetApproveTime(v time.Time) *ActivityChangeUpsertOne {
	return u.Update(func(s *ActivityChangeUpsert) {
		s.SetApproveTime(v)
	})
}

// UpdateApproveTime sets the "approve_time" field to the value that was provided on create.
func (u *ActivityChangeUpsertOne) UpdateApproveTime() *ActivityChangeUpsertOne {
	return u.Update(func(s *ActivityChangeUpsert) {
		s.UpdateApproveTime()
	})
}

// SetStatus sets the "status" field.
func (u *ActivityChangeUpsertOne) SetStatus(v int) *ActivityChangeUpsertOne {
	return u.Update(func(s *ActivityChangeUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *ActivityChangeUpsertOne) AddStatus(v int) *ActivityChangeUpsertOne {
	return u.Update(func(s *ActivityChangeUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ActivityChangeUpsertOne) UpdateStatus() *ActivityChangeUpsertOne {
	return u.Update(func(s *ActivityChangeUpsert) {
		s.UpdateStatus()
	})
}

// SetChangeSummary sets the "change_summary" field.
func (u *ActivityChangeUpsertOne) SetChangeSummary(v string) *ActivityChangeUpsertOne {
	return u.Update(func(s *ActivityChangeUpsert) {
		s.SetChangeSummary(v)
	})
}

// UpdateChangeSummary sets the "change_summary" field to the value that was provided on create.
func (u *ActivityChangeUpsertOne) UpdateChangeSummary() *ActivityChangeUpsertOne {
	return u.Update(func(s *ActivityChangeUpsert) {
		s.UpdateChangeSummary()
	})
}

// SetChangeReason sets the "change_reason" field.
func (u *ActivityChangeUpsertOne) SetChangeReason(v string) *ActivityChangeUpsertOne {
	return u.Update(func(s *ActivityChangeUpsert) {
		s.SetChangeReason(v)
	})
}

// UpdateChangeReason sets the "change_reason" field to the value that was provided on create.
func (u *ActivityChangeUpsertOne) UpdateChangeReason() *ActivityChangeUpsertOne {
	return u.Update(func(s *ActivityChangeUpsert) {
		s.UpdateChangeReason()
	})
}

// SetChangeRecord sets the "change_record" field.
func (u *ActivityChangeUpsertOne) SetChangeRecord(v string) *ActivityChangeUpsertOne {
	return u.Update(func(s *ActivityChangeUpsert) {
		s.SetChangeRecord(v)
	})
}

// UpdateChangeRecord sets the "change_record" field to the value that was provided on create.
func (u *ActivityChangeUpsertOne) UpdateChangeRecord() *ActivityChangeUpsertOne {
	return u.Update(func(s *ActivityChangeUpsert) {
		s.UpdateChangeRecord()
	})
}

// Exec executes the query.
func (u *ActivityChangeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ActivityChangeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ActivityChangeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ActivityChangeUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ActivityChangeUpsertOne.ID is not supported by MySQL driver. Use ActivityChangeUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ActivityChangeUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ActivityChangeCreateBulk is the builder for creating many ActivityChange entities in bulk.
type ActivityChangeCreateBulk struct {
	config
	err      error
	builders []*ActivityChangeCreate
	conflict []sql.ConflictOption
}

// Save creates the ActivityChange entities in the database.
func (accb *ActivityChangeCreateBulk) Save(ctx context.Context) ([]*ActivityChange, error) {
	if accb.err != nil {
		return nil, accb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(accb.builders))
	nodes := make([]*ActivityChange, len(accb.builders))
	mutators := make([]Mutator, len(accb.builders))
	for i := range accb.builders {
		func(i int, root context.Context) {
			builder := accb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ActivityChangeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, accb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = accb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, accb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, accb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (accb *ActivityChangeCreateBulk) SaveX(ctx context.Context) []*ActivityChange {
	v, err := accb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (accb *ActivityChangeCreateBulk) Exec(ctx context.Context) error {
	_, err := accb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (accb *ActivityChangeCreateBulk) ExecX(ctx context.Context) {
	if err := accb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ActivityChange.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ActivityChangeUpsert) {
//			SetCode(v+v).
//		}).
//		Exec(ctx)
func (accb *ActivityChangeCreateBulk) OnConflict(opts ...sql.ConflictOption) *ActivityChangeUpsertBulk {
	accb.conflict = opts
	return &ActivityChangeUpsertBulk{
		create: accb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ActivityChange.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (accb *ActivityChangeCreateBulk) OnConflictColumns(columns ...string) *ActivityChangeUpsertBulk {
	accb.conflict = append(accb.conflict, sql.ConflictColumns(columns...))
	return &ActivityChangeUpsertBulk{
		create: accb,
	}
}

// ActivityChangeUpsertBulk is the builder for "upsert"-ing
// a bulk of ActivityChange nodes.
type ActivityChangeUpsertBulk struct {
	create *ActivityChangeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ActivityChange.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(activitychange.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ActivityChangeUpsertBulk) UpdateNewValues() *ActivityChangeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(activitychange.FieldID)
			}
			if _, exists := b.mutation.Code(); exists {
				s.SetIgnore(activitychange.FieldCode)
			}
			if _, exists := b.mutation.ActivityCode(); exists {
				s.SetIgnore(activitychange.FieldActivityCode)
			}
			if _, exists := b.mutation.SubmitTime(); exists {
				s.SetIgnore(activitychange.FieldSubmitTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ActivityChange.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ActivityChangeUpsertBulk) Ignore() *ActivityChangeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ActivityChangeUpsertBulk) DoNothing() *ActivityChangeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ActivityChangeCreateBulk.OnConflict
// documentation for more info.
func (u *ActivityChangeUpsertBulk) Update(set func(*ActivityChangeUpsert)) *ActivityChangeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ActivityChangeUpsert{UpdateSet: update})
	}))
	return u
}

// SetOperator sets the "operator" field.
func (u *ActivityChangeUpsertBulk) SetOperator(v string) *ActivityChangeUpsertBulk {
	return u.Update(func(s *ActivityChangeUpsert) {
		s.SetOperator(v)
	})
}

// UpdateOperator sets the "operator" field to the value that was provided on create.
func (u *ActivityChangeUpsertBulk) UpdateOperator() *ActivityChangeUpsertBulk {
	return u.Update(func(s *ActivityChangeUpsert) {
		s.UpdateOperator()
	})
}

// SetApprover sets the "approver" field.
func (u *ActivityChangeUpsertBulk) SetApprover(v string) *ActivityChangeUpsertBulk {
	return u.Update(func(s *ActivityChangeUpsert) {
		s.SetApprover(v)
	})
}

// UpdateApprover sets the "approver" field to the value that was provided on create.
func (u *ActivityChangeUpsertBulk) UpdateApprover() *ActivityChangeUpsertBulk {
	return u.Update(func(s *ActivityChangeUpsert) {
		s.UpdateApprover()
	})
}

// SetApproveTime sets the "approve_time" field.
func (u *ActivityChangeUpsertBulk) SetApproveTime(v time.Time) *ActivityChangeUpsertBulk {
	return u.Update(func(s *ActivityChangeUpsert) {
		s.SetApproveTime(v)
	})
}

// UpdateApproveTime sets the "approve_time" field to the value that was provided on create.
func (u *ActivityChangeUpsertBulk) UpdateApproveTime() *ActivityChangeUpsertBulk {
	return u.Update(func(s *ActivityChangeUpsert) {
		s.UpdateApproveTime()
	})
}

// SetStatus sets the "status" field.
func (u *ActivityChangeUpsertBulk) SetStatus(v int) *ActivityChangeUpsertBulk {
	return u.Update(func(s *ActivityChangeUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *ActivityChangeUpsertBulk) AddStatus(v int) *ActivityChangeUpsertBulk {
	return u.Update(func(s *ActivityChangeUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ActivityChangeUpsertBulk) UpdateStatus() *ActivityChangeUpsertBulk {
	return u.Update(func(s *ActivityChangeUpsert) {
		s.UpdateStatus()
	})
}

// SetChangeSummary sets the "change_summary" field.
func (u *ActivityChangeUpsertBulk) SetChangeSummary(v string) *ActivityChangeUpsertBulk {
	return u.Update(func(s *ActivityChangeUpsert) {
		s.SetChangeSummary(v)
	})
}

// UpdateChangeSummary sets the "change_summary" field to the value that was provided on create.
func (u *ActivityChangeUpsertBulk) UpdateChangeSummary() *ActivityChangeUpsertBulk {
	return u.Update(func(s *ActivityChangeUpsert) {
		s.UpdateChangeSummary()
	})
}

// SetChangeReason sets the "change_reason" field.
func (u *ActivityChangeUpsertBulk) SetChangeReason(v string) *ActivityChangeUpsertBulk {
	return u.Update(func(s *ActivityChangeUpsert) {
		s.SetChangeReason(v)
	})
}

// UpdateChangeReason sets the "change_reason" field to the value that was provided on create.
func (u *ActivityChangeUpsertBulk) UpdateChangeReason() *ActivityChangeUpsertBulk {
	return u.Update(func(s *ActivityChangeUpsert) {
		s.UpdateChangeReason()
	})
}

// SetChangeRecord sets the "change_record" field.
func (u *ActivityChangeUpsertBulk) SetChangeRecord(v string) *ActivityChangeUpsertBulk {
	return u.Update(func(s *ActivityChangeUpsert) {
		s.SetChangeRecord(v)
	})
}

// UpdateChangeRecord sets the "change_record" field to the value that was provided on create.
func (u *ActivityChangeUpsertBulk) UpdateChangeRecord() *ActivityChangeUpsertBulk {
	return u.Update(func(s *ActivityChangeUpsert) {
		s.UpdateChangeRecord()
	})
}

// Exec executes the query.
func (u *ActivityChangeUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ActivityChangeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ActivityChangeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ActivityChangeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
