// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/twiglab/crm/bonus/orm/ent/bonusacc"
	"github.com/twiglab/crm/bonus/orm/ent/bonusitem"
	"github.com/twiglab/crm/bonus/orm/ent/predicate"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeBonusAcc  = "BonusAcc"
	TypeBonusItem = "BonusItem"
)

// BonusAccMutation represents an operation that mutates the BonusAcc nodes in the graph.
type BonusAccMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	create_time           *time.Time
	update_time           *time.Time
	member_code           *string
	last_clean_balance    *int
	addlast_clean_balance *int
	last_clean_ts         *int64
	addlast_clean_ts      *int64
	last_clean_time       *time.Time
	status                *int
	addstatus             *int
	clearedFields         map[string]struct{}
	done                  bool
	oldValue              func(context.Context) (*BonusAcc, error)
	predicates            []predicate.BonusAcc
}

var _ ent.Mutation = (*BonusAccMutation)(nil)

// bonusaccOption allows management of the mutation configuration using functional options.
type bonusaccOption func(*BonusAccMutation)

// newBonusAccMutation creates new mutation for the BonusAcc entity.
func newBonusAccMutation(c config, op Op, opts ...bonusaccOption) *BonusAccMutation {
	m := &BonusAccMutation{
		config:        c,
		op:            op,
		typ:           TypeBonusAcc,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBonusAccID sets the ID field of the mutation.
func withBonusAccID(id int) bonusaccOption {
	return func(m *BonusAccMutation) {
		var (
			err   error
			once  sync.Once
			value *BonusAcc
		)
		m.oldValue = func(ctx context.Context) (*BonusAcc, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().BonusAcc.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBonusAcc sets the old BonusAcc of the mutation.
func withBonusAcc(node *BonusAcc) bonusaccOption {
	return func(m *BonusAccMutation) {
		m.oldValue = func(context.Context) (*BonusAcc, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BonusAccMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BonusAccMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BonusAccMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BonusAccMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().BonusAcc.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *BonusAccMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *BonusAccMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the BonusAcc entity.
// If the BonusAcc object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BonusAccMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *BonusAccMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *BonusAccMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *BonusAccMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the BonusAcc entity.
// If the BonusAcc object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BonusAccMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *BonusAccMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetMemberCode sets the "member_code" field.
func (m *BonusAccMutation) SetMemberCode(s string) {
	m.member_code = &s
}

// MemberCode returns the value of the "member_code" field in the mutation.
func (m *BonusAccMutation) MemberCode() (r string, exists bool) {
	v := m.member_code
	if v == nil {
		return
	}
	return *v, true
}

// OldMemberCode returns the old "member_code" field's value of the BonusAcc entity.
// If the BonusAcc object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BonusAccMutation) OldMemberCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMemberCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMemberCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMemberCode: %w", err)
	}
	return oldValue.MemberCode, nil
}

// ResetMemberCode resets all changes to the "member_code" field.
func (m *BonusAccMutation) ResetMemberCode() {
	m.member_code = nil
}

// SetLastCleanBalance sets the "last_clean_balance" field.
func (m *BonusAccMutation) SetLastCleanBalance(i int) {
	m.last_clean_balance = &i
	m.addlast_clean_balance = nil
}

// LastCleanBalance returns the value of the "last_clean_balance" field in the mutation.
func (m *BonusAccMutation) LastCleanBalance() (r int, exists bool) {
	v := m.last_clean_balance
	if v == nil {
		return
	}
	return *v, true
}

// OldLastCleanBalance returns the old "last_clean_balance" field's value of the BonusAcc entity.
// If the BonusAcc object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BonusAccMutation) OldLastCleanBalance(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastCleanBalance is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastCleanBalance requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastCleanBalance: %w", err)
	}
	return oldValue.LastCleanBalance, nil
}

// AddLastCleanBalance adds i to the "last_clean_balance" field.
func (m *BonusAccMutation) AddLastCleanBalance(i int) {
	if m.addlast_clean_balance != nil {
		*m.addlast_clean_balance += i
	} else {
		m.addlast_clean_balance = &i
	}
}

// AddedLastCleanBalance returns the value that was added to the "last_clean_balance" field in this mutation.
func (m *BonusAccMutation) AddedLastCleanBalance() (r int, exists bool) {
	v := m.addlast_clean_balance
	if v == nil {
		return
	}
	return *v, true
}

// ResetLastCleanBalance resets all changes to the "last_clean_balance" field.
func (m *BonusAccMutation) ResetLastCleanBalance() {
	m.last_clean_balance = nil
	m.addlast_clean_balance = nil
}

// SetLastCleanTs sets the "last_clean_ts" field.
func (m *BonusAccMutation) SetLastCleanTs(i int64) {
	m.last_clean_ts = &i
	m.addlast_clean_ts = nil
}

// LastCleanTs returns the value of the "last_clean_ts" field in the mutation.
func (m *BonusAccMutation) LastCleanTs() (r int64, exists bool) {
	v := m.last_clean_ts
	if v == nil {
		return
	}
	return *v, true
}

// OldLastCleanTs returns the old "last_clean_ts" field's value of the BonusAcc entity.
// If the BonusAcc object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BonusAccMutation) OldLastCleanTs(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastCleanTs is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastCleanTs requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastCleanTs: %w", err)
	}
	return oldValue.LastCleanTs, nil
}

// AddLastCleanTs adds i to the "last_clean_ts" field.
func (m *BonusAccMutation) AddLastCleanTs(i int64) {
	if m.addlast_clean_ts != nil {
		*m.addlast_clean_ts += i
	} else {
		m.addlast_clean_ts = &i
	}
}

// AddedLastCleanTs returns the value that was added to the "last_clean_ts" field in this mutation.
func (m *BonusAccMutation) AddedLastCleanTs() (r int64, exists bool) {
	v := m.addlast_clean_ts
	if v == nil {
		return
	}
	return *v, true
}

// ResetLastCleanTs resets all changes to the "last_clean_ts" field.
func (m *BonusAccMutation) ResetLastCleanTs() {
	m.last_clean_ts = nil
	m.addlast_clean_ts = nil
}

// SetLastCleanTime sets the "last_clean_time" field.
func (m *BonusAccMutation) SetLastCleanTime(t time.Time) {
	m.last_clean_time = &t
}

// LastCleanTime returns the value of the "last_clean_time" field in the mutation.
func (m *BonusAccMutation) LastCleanTime() (r time.Time, exists bool) {
	v := m.last_clean_time
	if v == nil {
		return
	}
	return *v, true
}

// OldLastCleanTime returns the old "last_clean_time" field's value of the BonusAcc entity.
// If the BonusAcc object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BonusAccMutation) OldLastCleanTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastCleanTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastCleanTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastCleanTime: %w", err)
	}
	return oldValue.LastCleanTime, nil
}

// ResetLastCleanTime resets all changes to the "last_clean_time" field.
func (m *BonusAccMutation) ResetLastCleanTime() {
	m.last_clean_time = nil
}

// SetStatus sets the "status" field.
func (m *BonusAccMutation) SetStatus(i int) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *BonusAccMutation) Status() (r int, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the BonusAcc entity.
// If the BonusAcc object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BonusAccMutation) OldStatus(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to the "status" field.
func (m *BonusAccMutation) AddStatus(i int) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *BonusAccMutation) AddedStatus() (r int, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *BonusAccMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// Where appends a list predicates to the BonusAccMutation builder.
func (m *BonusAccMutation) Where(ps ...predicate.BonusAcc) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the BonusAccMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *BonusAccMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.BonusAcc, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *BonusAccMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *BonusAccMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (BonusAcc).
func (m *BonusAccMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BonusAccMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.create_time != nil {
		fields = append(fields, bonusacc.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, bonusacc.FieldUpdateTime)
	}
	if m.member_code != nil {
		fields = append(fields, bonusacc.FieldMemberCode)
	}
	if m.last_clean_balance != nil {
		fields = append(fields, bonusacc.FieldLastCleanBalance)
	}
	if m.last_clean_ts != nil {
		fields = append(fields, bonusacc.FieldLastCleanTs)
	}
	if m.last_clean_time != nil {
		fields = append(fields, bonusacc.FieldLastCleanTime)
	}
	if m.status != nil {
		fields = append(fields, bonusacc.FieldStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BonusAccMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case bonusacc.FieldCreateTime:
		return m.CreateTime()
	case bonusacc.FieldUpdateTime:
		return m.UpdateTime()
	case bonusacc.FieldMemberCode:
		return m.MemberCode()
	case bonusacc.FieldLastCleanBalance:
		return m.LastCleanBalance()
	case bonusacc.FieldLastCleanTs:
		return m.LastCleanTs()
	case bonusacc.FieldLastCleanTime:
		return m.LastCleanTime()
	case bonusacc.FieldStatus:
		return m.Status()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BonusAccMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case bonusacc.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case bonusacc.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case bonusacc.FieldMemberCode:
		return m.OldMemberCode(ctx)
	case bonusacc.FieldLastCleanBalance:
		return m.OldLastCleanBalance(ctx)
	case bonusacc.FieldLastCleanTs:
		return m.OldLastCleanTs(ctx)
	case bonusacc.FieldLastCleanTime:
		return m.OldLastCleanTime(ctx)
	case bonusacc.FieldStatus:
		return m.OldStatus(ctx)
	}
	return nil, fmt.Errorf("unknown BonusAcc field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BonusAccMutation) SetField(name string, value ent.Value) error {
	switch name {
	case bonusacc.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case bonusacc.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case bonusacc.FieldMemberCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMemberCode(v)
		return nil
	case bonusacc.FieldLastCleanBalance:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastCleanBalance(v)
		return nil
	case bonusacc.FieldLastCleanTs:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastCleanTs(v)
		return nil
	case bonusacc.FieldLastCleanTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastCleanTime(v)
		return nil
	case bonusacc.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	}
	return fmt.Errorf("unknown BonusAcc field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BonusAccMutation) AddedFields() []string {
	var fields []string
	if m.addlast_clean_balance != nil {
		fields = append(fields, bonusacc.FieldLastCleanBalance)
	}
	if m.addlast_clean_ts != nil {
		fields = append(fields, bonusacc.FieldLastCleanTs)
	}
	if m.addstatus != nil {
		fields = append(fields, bonusacc.FieldStatus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BonusAccMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case bonusacc.FieldLastCleanBalance:
		return m.AddedLastCleanBalance()
	case bonusacc.FieldLastCleanTs:
		return m.AddedLastCleanTs()
	case bonusacc.FieldStatus:
		return m.AddedStatus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BonusAccMutation) AddField(name string, value ent.Value) error {
	switch name {
	case bonusacc.FieldLastCleanBalance:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLastCleanBalance(v)
		return nil
	case bonusacc.FieldLastCleanTs:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLastCleanTs(v)
		return nil
	case bonusacc.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	}
	return fmt.Errorf("unknown BonusAcc numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BonusAccMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BonusAccMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BonusAccMutation) ClearField(name string) error {
	return fmt.Errorf("unknown BonusAcc nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BonusAccMutation) ResetField(name string) error {
	switch name {
	case bonusacc.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case bonusacc.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case bonusacc.FieldMemberCode:
		m.ResetMemberCode()
		return nil
	case bonusacc.FieldLastCleanBalance:
		m.ResetLastCleanBalance()
		return nil
	case bonusacc.FieldLastCleanTs:
		m.ResetLastCleanTs()
		return nil
	case bonusacc.FieldLastCleanTime:
		m.ResetLastCleanTime()
		return nil
	case bonusacc.FieldStatus:
		m.ResetStatus()
		return nil
	}
	return fmt.Errorf("unknown BonusAcc field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BonusAccMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BonusAccMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BonusAccMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BonusAccMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BonusAccMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BonusAccMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BonusAccMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown BonusAcc unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BonusAccMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown BonusAcc edge %s", name)
}

// BonusItemMutation represents an operation that mutates the BonusItem nodes in the graph.
type BonusItemMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	create_time         *time.Time
	update_time         *time.Time
	code                *string
	mch_id              *string
	mall_code           *string
	mall_name           *string
	shop_code           *string
	shop_name           *string
	member_code         *string
	wx_open_id          *string
	bcmb_notify_time    *time.Time
	bcmb_notify_id      *string
	bcmb_trans_code     *string
	amount              *int
	addamount           *int
	bcmb_trans_time     *time.Time
	create_ts           *int64
	addcreate_ts        *int64
	bcmb_trans_pay_code *string
	bcmb_trans_type     *int
	addbcmb_trans_type  *int
	bonus               *int
	addbonus            *int
	bonus_rate          *int32
	addbonus_rate       *int32
	status              *int32
	addstatus           *int32
	clearedFields       map[string]struct{}
	done                bool
	oldValue            func(context.Context) (*BonusItem, error)
	predicates          []predicate.BonusItem
}

var _ ent.Mutation = (*BonusItemMutation)(nil)

// bonusitemOption allows management of the mutation configuration using functional options.
type bonusitemOption func(*BonusItemMutation)

// newBonusItemMutation creates new mutation for the BonusItem entity.
func newBonusItemMutation(c config, op Op, opts ...bonusitemOption) *BonusItemMutation {
	m := &BonusItemMutation{
		config:        c,
		op:            op,
		typ:           TypeBonusItem,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBonusItemID sets the ID field of the mutation.
func withBonusItemID(id int) bonusitemOption {
	return func(m *BonusItemMutation) {
		var (
			err   error
			once  sync.Once
			value *BonusItem
		)
		m.oldValue = func(ctx context.Context) (*BonusItem, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().BonusItem.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBonusItem sets the old BonusItem of the mutation.
func withBonusItem(node *BonusItem) bonusitemOption {
	return func(m *BonusItemMutation) {
		m.oldValue = func(context.Context) (*BonusItem, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BonusItemMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BonusItemMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BonusItemMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BonusItemMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().BonusItem.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *BonusItemMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *BonusItemMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the BonusItem entity.
// If the BonusItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BonusItemMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *BonusItemMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *BonusItemMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *BonusItemMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the BonusItem entity.
// If the BonusItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BonusItemMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *BonusItemMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetCode sets the "code" field.
func (m *BonusItemMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *BonusItemMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the BonusItem entity.
// If the BonusItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BonusItemMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *BonusItemMutation) ResetCode() {
	m.code = nil
}

// SetMchID sets the "mch_id" field.
func (m *BonusItemMutation) SetMchID(s string) {
	m.mch_id = &s
}

// MchID returns the value of the "mch_id" field in the mutation.
func (m *BonusItemMutation) MchID() (r string, exists bool) {
	v := m.mch_id
	if v == nil {
		return
	}
	return *v, true
}

// OldMchID returns the old "mch_id" field's value of the BonusItem entity.
// If the BonusItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BonusItemMutation) OldMchID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMchID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMchID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMchID: %w", err)
	}
	return oldValue.MchID, nil
}

// ResetMchID resets all changes to the "mch_id" field.
func (m *BonusItemMutation) ResetMchID() {
	m.mch_id = nil
}

// SetMallCode sets the "mall_code" field.
func (m *BonusItemMutation) SetMallCode(s string) {
	m.mall_code = &s
}

// MallCode returns the value of the "mall_code" field in the mutation.
func (m *BonusItemMutation) MallCode() (r string, exists bool) {
	v := m.mall_code
	if v == nil {
		return
	}
	return *v, true
}

// OldMallCode returns the old "mall_code" field's value of the BonusItem entity.
// If the BonusItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BonusItemMutation) OldMallCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMallCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMallCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMallCode: %w", err)
	}
	return oldValue.MallCode, nil
}

// ResetMallCode resets all changes to the "mall_code" field.
func (m *BonusItemMutation) ResetMallCode() {
	m.mall_code = nil
}

// SetMallName sets the "mall_name" field.
func (m *BonusItemMutation) SetMallName(s string) {
	m.mall_name = &s
}

// MallName returns the value of the "mall_name" field in the mutation.
func (m *BonusItemMutation) MallName() (r string, exists bool) {
	v := m.mall_name
	if v == nil {
		return
	}
	return *v, true
}

// OldMallName returns the old "mall_name" field's value of the BonusItem entity.
// If the BonusItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BonusItemMutation) OldMallName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMallName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMallName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMallName: %w", err)
	}
	return oldValue.MallName, nil
}

// ResetMallName resets all changes to the "mall_name" field.
func (m *BonusItemMutation) ResetMallName() {
	m.mall_name = nil
}

// SetShopCode sets the "shop_code" field.
func (m *BonusItemMutation) SetShopCode(s string) {
	m.shop_code = &s
}

// ShopCode returns the value of the "shop_code" field in the mutation.
func (m *BonusItemMutation) ShopCode() (r string, exists bool) {
	v := m.shop_code
	if v == nil {
		return
	}
	return *v, true
}

// OldShopCode returns the old "shop_code" field's value of the BonusItem entity.
// If the BonusItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BonusItemMutation) OldShopCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShopCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShopCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShopCode: %w", err)
	}
	return oldValue.ShopCode, nil
}

// ResetShopCode resets all changes to the "shop_code" field.
func (m *BonusItemMutation) ResetShopCode() {
	m.shop_code = nil
}

// SetShopName sets the "shop_name" field.
func (m *BonusItemMutation) SetShopName(s string) {
	m.shop_name = &s
}

// ShopName returns the value of the "shop_name" field in the mutation.
func (m *BonusItemMutation) ShopName() (r string, exists bool) {
	v := m.shop_name
	if v == nil {
		return
	}
	return *v, true
}

// OldShopName returns the old "shop_name" field's value of the BonusItem entity.
// If the BonusItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BonusItemMutation) OldShopName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShopName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShopName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShopName: %w", err)
	}
	return oldValue.ShopName, nil
}

// ResetShopName resets all changes to the "shop_name" field.
func (m *BonusItemMutation) ResetShopName() {
	m.shop_name = nil
}

// SetMemberCode sets the "member_code" field.
func (m *BonusItemMutation) SetMemberCode(s string) {
	m.member_code = &s
}

// MemberCode returns the value of the "member_code" field in the mutation.
func (m *BonusItemMutation) MemberCode() (r string, exists bool) {
	v := m.member_code
	if v == nil {
		return
	}
	return *v, true
}

// OldMemberCode returns the old "member_code" field's value of the BonusItem entity.
// If the BonusItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BonusItemMutation) OldMemberCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMemberCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMemberCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMemberCode: %w", err)
	}
	return oldValue.MemberCode, nil
}

// ResetMemberCode resets all changes to the "member_code" field.
func (m *BonusItemMutation) ResetMemberCode() {
	m.member_code = nil
}

// SetWxOpenID sets the "wx_open_id" field.
func (m *BonusItemMutation) SetWxOpenID(s string) {
	m.wx_open_id = &s
}

// WxOpenID returns the value of the "wx_open_id" field in the mutation.
func (m *BonusItemMutation) WxOpenID() (r string, exists bool) {
	v := m.wx_open_id
	if v == nil {
		return
	}
	return *v, true
}

// OldWxOpenID returns the old "wx_open_id" field's value of the BonusItem entity.
// If the BonusItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BonusItemMutation) OldWxOpenID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWxOpenID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWxOpenID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWxOpenID: %w", err)
	}
	return oldValue.WxOpenID, nil
}

// ResetWxOpenID resets all changes to the "wx_open_id" field.
func (m *BonusItemMutation) ResetWxOpenID() {
	m.wx_open_id = nil
}

// SetBcmbNotifyTime sets the "bcmb_notify_time" field.
func (m *BonusItemMutation) SetBcmbNotifyTime(t time.Time) {
	m.bcmb_notify_time = &t
}

// BcmbNotifyTime returns the value of the "bcmb_notify_time" field in the mutation.
func (m *BonusItemMutation) BcmbNotifyTime() (r time.Time, exists bool) {
	v := m.bcmb_notify_time
	if v == nil {
		return
	}
	return *v, true
}

// OldBcmbNotifyTime returns the old "bcmb_notify_time" field's value of the BonusItem entity.
// If the BonusItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BonusItemMutation) OldBcmbNotifyTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBcmbNotifyTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBcmbNotifyTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBcmbNotifyTime: %w", err)
	}
	return oldValue.BcmbNotifyTime, nil
}

// ResetBcmbNotifyTime resets all changes to the "bcmb_notify_time" field.
func (m *BonusItemMutation) ResetBcmbNotifyTime() {
	m.bcmb_notify_time = nil
}

// SetBcmbNotifyID sets the "bcmb_notify_id" field.
func (m *BonusItemMutation) SetBcmbNotifyID(s string) {
	m.bcmb_notify_id = &s
}

// BcmbNotifyID returns the value of the "bcmb_notify_id" field in the mutation.
func (m *BonusItemMutation) BcmbNotifyID() (r string, exists bool) {
	v := m.bcmb_notify_id
	if v == nil {
		return
	}
	return *v, true
}

// OldBcmbNotifyID returns the old "bcmb_notify_id" field's value of the BonusItem entity.
// If the BonusItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BonusItemMutation) OldBcmbNotifyID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBcmbNotifyID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBcmbNotifyID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBcmbNotifyID: %w", err)
	}
	return oldValue.BcmbNotifyID, nil
}

// ClearBcmbNotifyID clears the value of the "bcmb_notify_id" field.
func (m *BonusItemMutation) ClearBcmbNotifyID() {
	m.bcmb_notify_id = nil
	m.clearedFields[bonusitem.FieldBcmbNotifyID] = struct{}{}
}

// BcmbNotifyIDCleared returns if the "bcmb_notify_id" field was cleared in this mutation.
func (m *BonusItemMutation) BcmbNotifyIDCleared() bool {
	_, ok := m.clearedFields[bonusitem.FieldBcmbNotifyID]
	return ok
}

// ResetBcmbNotifyID resets all changes to the "bcmb_notify_id" field.
func (m *BonusItemMutation) ResetBcmbNotifyID() {
	m.bcmb_notify_id = nil
	delete(m.clearedFields, bonusitem.FieldBcmbNotifyID)
}

// SetBcmbTransCode sets the "bcmb_trans_code" field.
func (m *BonusItemMutation) SetBcmbTransCode(s string) {
	m.bcmb_trans_code = &s
}

// BcmbTransCode returns the value of the "bcmb_trans_code" field in the mutation.
func (m *BonusItemMutation) BcmbTransCode() (r string, exists bool) {
	v := m.bcmb_trans_code
	if v == nil {
		return
	}
	return *v, true
}

// OldBcmbTransCode returns the old "bcmb_trans_code" field's value of the BonusItem entity.
// If the BonusItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BonusItemMutation) OldBcmbTransCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBcmbTransCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBcmbTransCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBcmbTransCode: %w", err)
	}
	return oldValue.BcmbTransCode, nil
}

// ResetBcmbTransCode resets all changes to the "bcmb_trans_code" field.
func (m *BonusItemMutation) ResetBcmbTransCode() {
	m.bcmb_trans_code = nil
}

// SetAmount sets the "amount" field.
func (m *BonusItemMutation) SetAmount(i int) {
	m.amount = &i
	m.addamount = nil
}

// Amount returns the value of the "amount" field in the mutation.
func (m *BonusItemMutation) Amount() (r int, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the BonusItem entity.
// If the BonusItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BonusItemMutation) OldAmount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// AddAmount adds i to the "amount" field.
func (m *BonusItemMutation) AddAmount(i int) {
	if m.addamount != nil {
		*m.addamount += i
	} else {
		m.addamount = &i
	}
}

// AddedAmount returns the value that was added to the "amount" field in this mutation.
func (m *BonusItemMutation) AddedAmount() (r int, exists bool) {
	v := m.addamount
	if v == nil {
		return
	}
	return *v, true
}

// ResetAmount resets all changes to the "amount" field.
func (m *BonusItemMutation) ResetAmount() {
	m.amount = nil
	m.addamount = nil
}

// SetBcmbTransTime sets the "bcmb_trans_time" field.
func (m *BonusItemMutation) SetBcmbTransTime(t time.Time) {
	m.bcmb_trans_time = &t
}

// BcmbTransTime returns the value of the "bcmb_trans_time" field in the mutation.
func (m *BonusItemMutation) BcmbTransTime() (r time.Time, exists bool) {
	v := m.bcmb_trans_time
	if v == nil {
		return
	}
	return *v, true
}

// OldBcmbTransTime returns the old "bcmb_trans_time" field's value of the BonusItem entity.
// If the BonusItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BonusItemMutation) OldBcmbTransTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBcmbTransTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBcmbTransTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBcmbTransTime: %w", err)
	}
	return oldValue.BcmbTransTime, nil
}

// ResetBcmbTransTime resets all changes to the "bcmb_trans_time" field.
func (m *BonusItemMutation) ResetBcmbTransTime() {
	m.bcmb_trans_time = nil
}

// SetCreateTs sets the "create_ts" field.
func (m *BonusItemMutation) SetCreateTs(i int64) {
	m.create_ts = &i
	m.addcreate_ts = nil
}

// CreateTs returns the value of the "create_ts" field in the mutation.
func (m *BonusItemMutation) CreateTs() (r int64, exists bool) {
	v := m.create_ts
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTs returns the old "create_ts" field's value of the BonusItem entity.
// If the BonusItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BonusItemMutation) OldCreateTs(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTs is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTs requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTs: %w", err)
	}
	return oldValue.CreateTs, nil
}

// AddCreateTs adds i to the "create_ts" field.
func (m *BonusItemMutation) AddCreateTs(i int64) {
	if m.addcreate_ts != nil {
		*m.addcreate_ts += i
	} else {
		m.addcreate_ts = &i
	}
}

// AddedCreateTs returns the value that was added to the "create_ts" field in this mutation.
func (m *BonusItemMutation) AddedCreateTs() (r int64, exists bool) {
	v := m.addcreate_ts
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreateTs resets all changes to the "create_ts" field.
func (m *BonusItemMutation) ResetCreateTs() {
	m.create_ts = nil
	m.addcreate_ts = nil
}

// SetBcmbTransPayCode sets the "bcmb_trans_pay_code" field.
func (m *BonusItemMutation) SetBcmbTransPayCode(s string) {
	m.bcmb_trans_pay_code = &s
}

// BcmbTransPayCode returns the value of the "bcmb_trans_pay_code" field in the mutation.
func (m *BonusItemMutation) BcmbTransPayCode() (r string, exists bool) {
	v := m.bcmb_trans_pay_code
	if v == nil {
		return
	}
	return *v, true
}

// OldBcmbTransPayCode returns the old "bcmb_trans_pay_code" field's value of the BonusItem entity.
// If the BonusItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BonusItemMutation) OldBcmbTransPayCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBcmbTransPayCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBcmbTransPayCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBcmbTransPayCode: %w", err)
	}
	return oldValue.BcmbTransPayCode, nil
}

// ClearBcmbTransPayCode clears the value of the "bcmb_trans_pay_code" field.
func (m *BonusItemMutation) ClearBcmbTransPayCode() {
	m.bcmb_trans_pay_code = nil
	m.clearedFields[bonusitem.FieldBcmbTransPayCode] = struct{}{}
}

// BcmbTransPayCodeCleared returns if the "bcmb_trans_pay_code" field was cleared in this mutation.
func (m *BonusItemMutation) BcmbTransPayCodeCleared() bool {
	_, ok := m.clearedFields[bonusitem.FieldBcmbTransPayCode]
	return ok
}

// ResetBcmbTransPayCode resets all changes to the "bcmb_trans_pay_code" field.
func (m *BonusItemMutation) ResetBcmbTransPayCode() {
	m.bcmb_trans_pay_code = nil
	delete(m.clearedFields, bonusitem.FieldBcmbTransPayCode)
}

// SetBcmbTransType sets the "bcmb_trans_type" field.
func (m *BonusItemMutation) SetBcmbTransType(i int) {
	m.bcmb_trans_type = &i
	m.addbcmb_trans_type = nil
}

// BcmbTransType returns the value of the "bcmb_trans_type" field in the mutation.
func (m *BonusItemMutation) BcmbTransType() (r int, exists bool) {
	v := m.bcmb_trans_type
	if v == nil {
		return
	}
	return *v, true
}

// OldBcmbTransType returns the old "bcmb_trans_type" field's value of the BonusItem entity.
// If the BonusItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BonusItemMutation) OldBcmbTransType(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBcmbTransType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBcmbTransType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBcmbTransType: %w", err)
	}
	return oldValue.BcmbTransType, nil
}

// AddBcmbTransType adds i to the "bcmb_trans_type" field.
func (m *BonusItemMutation) AddBcmbTransType(i int) {
	if m.addbcmb_trans_type != nil {
		*m.addbcmb_trans_type += i
	} else {
		m.addbcmb_trans_type = &i
	}
}

// AddedBcmbTransType returns the value that was added to the "bcmb_trans_type" field in this mutation.
func (m *BonusItemMutation) AddedBcmbTransType() (r int, exists bool) {
	v := m.addbcmb_trans_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetBcmbTransType resets all changes to the "bcmb_trans_type" field.
func (m *BonusItemMutation) ResetBcmbTransType() {
	m.bcmb_trans_type = nil
	m.addbcmb_trans_type = nil
}

// SetBonus sets the "bonus" field.
func (m *BonusItemMutation) SetBonus(i int) {
	m.bonus = &i
	m.addbonus = nil
}

// Bonus returns the value of the "bonus" field in the mutation.
func (m *BonusItemMutation) Bonus() (r int, exists bool) {
	v := m.bonus
	if v == nil {
		return
	}
	return *v, true
}

// OldBonus returns the old "bonus" field's value of the BonusItem entity.
// If the BonusItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BonusItemMutation) OldBonus(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBonus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBonus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBonus: %w", err)
	}
	return oldValue.Bonus, nil
}

// AddBonus adds i to the "bonus" field.
func (m *BonusItemMutation) AddBonus(i int) {
	if m.addbonus != nil {
		*m.addbonus += i
	} else {
		m.addbonus = &i
	}
}

// AddedBonus returns the value that was added to the "bonus" field in this mutation.
func (m *BonusItemMutation) AddedBonus() (r int, exists bool) {
	v := m.addbonus
	if v == nil {
		return
	}
	return *v, true
}

// ResetBonus resets all changes to the "bonus" field.
func (m *BonusItemMutation) ResetBonus() {
	m.bonus = nil
	m.addbonus = nil
}

// SetBonusRate sets the "bonus_rate" field.
func (m *BonusItemMutation) SetBonusRate(i int32) {
	m.bonus_rate = &i
	m.addbonus_rate = nil
}

// BonusRate returns the value of the "bonus_rate" field in the mutation.
func (m *BonusItemMutation) BonusRate() (r int32, exists bool) {
	v := m.bonus_rate
	if v == nil {
		return
	}
	return *v, true
}

// OldBonusRate returns the old "bonus_rate" field's value of the BonusItem entity.
// If the BonusItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BonusItemMutation) OldBonusRate(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBonusRate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBonusRate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBonusRate: %w", err)
	}
	return oldValue.BonusRate, nil
}

// AddBonusRate adds i to the "bonus_rate" field.
func (m *BonusItemMutation) AddBonusRate(i int32) {
	if m.addbonus_rate != nil {
		*m.addbonus_rate += i
	} else {
		m.addbonus_rate = &i
	}
}

// AddedBonusRate returns the value that was added to the "bonus_rate" field in this mutation.
func (m *BonusItemMutation) AddedBonusRate() (r int32, exists bool) {
	v := m.addbonus_rate
	if v == nil {
		return
	}
	return *v, true
}

// ResetBonusRate resets all changes to the "bonus_rate" field.
func (m *BonusItemMutation) ResetBonusRate() {
	m.bonus_rate = nil
	m.addbonus_rate = nil
}

// SetStatus sets the "status" field.
func (m *BonusItemMutation) SetStatus(i int32) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *BonusItemMutation) Status() (r int32, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the BonusItem entity.
// If the BonusItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BonusItemMutation) OldStatus(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to the "status" field.
func (m *BonusItemMutation) AddStatus(i int32) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *BonusItemMutation) AddedStatus() (r int32, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *BonusItemMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// Where appends a list predicates to the BonusItemMutation builder.
func (m *BonusItemMutation) Where(ps ...predicate.BonusItem) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the BonusItemMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *BonusItemMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.BonusItem, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *BonusItemMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *BonusItemMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (BonusItem).
func (m *BonusItemMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BonusItemMutation) Fields() []string {
	fields := make([]string, 0, 21)
	if m.create_time != nil {
		fields = append(fields, bonusitem.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, bonusitem.FieldUpdateTime)
	}
	if m.code != nil {
		fields = append(fields, bonusitem.FieldCode)
	}
	if m.mch_id != nil {
		fields = append(fields, bonusitem.FieldMchID)
	}
	if m.mall_code != nil {
		fields = append(fields, bonusitem.FieldMallCode)
	}
	if m.mall_name != nil {
		fields = append(fields, bonusitem.FieldMallName)
	}
	if m.shop_code != nil {
		fields = append(fields, bonusitem.FieldShopCode)
	}
	if m.shop_name != nil {
		fields = append(fields, bonusitem.FieldShopName)
	}
	if m.member_code != nil {
		fields = append(fields, bonusitem.FieldMemberCode)
	}
	if m.wx_open_id != nil {
		fields = append(fields, bonusitem.FieldWxOpenID)
	}
	if m.bcmb_notify_time != nil {
		fields = append(fields, bonusitem.FieldBcmbNotifyTime)
	}
	if m.bcmb_notify_id != nil {
		fields = append(fields, bonusitem.FieldBcmbNotifyID)
	}
	if m.bcmb_trans_code != nil {
		fields = append(fields, bonusitem.FieldBcmbTransCode)
	}
	if m.amount != nil {
		fields = append(fields, bonusitem.FieldAmount)
	}
	if m.bcmb_trans_time != nil {
		fields = append(fields, bonusitem.FieldBcmbTransTime)
	}
	if m.create_ts != nil {
		fields = append(fields, bonusitem.FieldCreateTs)
	}
	if m.bcmb_trans_pay_code != nil {
		fields = append(fields, bonusitem.FieldBcmbTransPayCode)
	}
	if m.bcmb_trans_type != nil {
		fields = append(fields, bonusitem.FieldBcmbTransType)
	}
	if m.bonus != nil {
		fields = append(fields, bonusitem.FieldBonus)
	}
	if m.bonus_rate != nil {
		fields = append(fields, bonusitem.FieldBonusRate)
	}
	if m.status != nil {
		fields = append(fields, bonusitem.FieldStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BonusItemMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case bonusitem.FieldCreateTime:
		return m.CreateTime()
	case bonusitem.FieldUpdateTime:
		return m.UpdateTime()
	case bonusitem.FieldCode:
		return m.Code()
	case bonusitem.FieldMchID:
		return m.MchID()
	case bonusitem.FieldMallCode:
		return m.MallCode()
	case bonusitem.FieldMallName:
		return m.MallName()
	case bonusitem.FieldShopCode:
		return m.ShopCode()
	case bonusitem.FieldShopName:
		return m.ShopName()
	case bonusitem.FieldMemberCode:
		return m.MemberCode()
	case bonusitem.FieldWxOpenID:
		return m.WxOpenID()
	case bonusitem.FieldBcmbNotifyTime:
		return m.BcmbNotifyTime()
	case bonusitem.FieldBcmbNotifyID:
		return m.BcmbNotifyID()
	case bonusitem.FieldBcmbTransCode:
		return m.BcmbTransCode()
	case bonusitem.FieldAmount:
		return m.Amount()
	case bonusitem.FieldBcmbTransTime:
		return m.BcmbTransTime()
	case bonusitem.FieldCreateTs:
		return m.CreateTs()
	case bonusitem.FieldBcmbTransPayCode:
		return m.BcmbTransPayCode()
	case bonusitem.FieldBcmbTransType:
		return m.BcmbTransType()
	case bonusitem.FieldBonus:
		return m.Bonus()
	case bonusitem.FieldBonusRate:
		return m.BonusRate()
	case bonusitem.FieldStatus:
		return m.Status()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BonusItemMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case bonusitem.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case bonusitem.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case bonusitem.FieldCode:
		return m.OldCode(ctx)
	case bonusitem.FieldMchID:
		return m.OldMchID(ctx)
	case bonusitem.FieldMallCode:
		return m.OldMallCode(ctx)
	case bonusitem.FieldMallName:
		return m.OldMallName(ctx)
	case bonusitem.FieldShopCode:
		return m.OldShopCode(ctx)
	case bonusitem.FieldShopName:
		return m.OldShopName(ctx)
	case bonusitem.FieldMemberCode:
		return m.OldMemberCode(ctx)
	case bonusitem.FieldWxOpenID:
		return m.OldWxOpenID(ctx)
	case bonusitem.FieldBcmbNotifyTime:
		return m.OldBcmbNotifyTime(ctx)
	case bonusitem.FieldBcmbNotifyID:
		return m.OldBcmbNotifyID(ctx)
	case bonusitem.FieldBcmbTransCode:
		return m.OldBcmbTransCode(ctx)
	case bonusitem.FieldAmount:
		return m.OldAmount(ctx)
	case bonusitem.FieldBcmbTransTime:
		return m.OldBcmbTransTime(ctx)
	case bonusitem.FieldCreateTs:
		return m.OldCreateTs(ctx)
	case bonusitem.FieldBcmbTransPayCode:
		return m.OldBcmbTransPayCode(ctx)
	case bonusitem.FieldBcmbTransType:
		return m.OldBcmbTransType(ctx)
	case bonusitem.FieldBonus:
		return m.OldBonus(ctx)
	case bonusitem.FieldBonusRate:
		return m.OldBonusRate(ctx)
	case bonusitem.FieldStatus:
		return m.OldStatus(ctx)
	}
	return nil, fmt.Errorf("unknown BonusItem field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BonusItemMutation) SetField(name string, value ent.Value) error {
	switch name {
	case bonusitem.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case bonusitem.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case bonusitem.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case bonusitem.FieldMchID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMchID(v)
		return nil
	case bonusitem.FieldMallCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMallCode(v)
		return nil
	case bonusitem.FieldMallName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMallName(v)
		return nil
	case bonusitem.FieldShopCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShopCode(v)
		return nil
	case bonusitem.FieldShopName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShopName(v)
		return nil
	case bonusitem.FieldMemberCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMemberCode(v)
		return nil
	case bonusitem.FieldWxOpenID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWxOpenID(v)
		return nil
	case bonusitem.FieldBcmbNotifyTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBcmbNotifyTime(v)
		return nil
	case bonusitem.FieldBcmbNotifyID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBcmbNotifyID(v)
		return nil
	case bonusitem.FieldBcmbTransCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBcmbTransCode(v)
		return nil
	case bonusitem.FieldAmount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case bonusitem.FieldBcmbTransTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBcmbTransTime(v)
		return nil
	case bonusitem.FieldCreateTs:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTs(v)
		return nil
	case bonusitem.FieldBcmbTransPayCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBcmbTransPayCode(v)
		return nil
	case bonusitem.FieldBcmbTransType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBcmbTransType(v)
		return nil
	case bonusitem.FieldBonus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBonus(v)
		return nil
	case bonusitem.FieldBonusRate:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBonusRate(v)
		return nil
	case bonusitem.FieldStatus:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	}
	return fmt.Errorf("unknown BonusItem field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BonusItemMutation) AddedFields() []string {
	var fields []string
	if m.addamount != nil {
		fields = append(fields, bonusitem.FieldAmount)
	}
	if m.addcreate_ts != nil {
		fields = append(fields, bonusitem.FieldCreateTs)
	}
	if m.addbcmb_trans_type != nil {
		fields = append(fields, bonusitem.FieldBcmbTransType)
	}
	if m.addbonus != nil {
		fields = append(fields, bonusitem.FieldBonus)
	}
	if m.addbonus_rate != nil {
		fields = append(fields, bonusitem.FieldBonusRate)
	}
	if m.addstatus != nil {
		fields = append(fields, bonusitem.FieldStatus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BonusItemMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case bonusitem.FieldAmount:
		return m.AddedAmount()
	case bonusitem.FieldCreateTs:
		return m.AddedCreateTs()
	case bonusitem.FieldBcmbTransType:
		return m.AddedBcmbTransType()
	case bonusitem.FieldBonus:
		return m.AddedBonus()
	case bonusitem.FieldBonusRate:
		return m.AddedBonusRate()
	case bonusitem.FieldStatus:
		return m.AddedStatus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BonusItemMutation) AddField(name string, value ent.Value) error {
	switch name {
	case bonusitem.FieldAmount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAmount(v)
		return nil
	case bonusitem.FieldCreateTs:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateTs(v)
		return nil
	case bonusitem.FieldBcmbTransType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBcmbTransType(v)
		return nil
	case bonusitem.FieldBonus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBonus(v)
		return nil
	case bonusitem.FieldBonusRate:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBonusRate(v)
		return nil
	case bonusitem.FieldStatus:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	}
	return fmt.Errorf("unknown BonusItem numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BonusItemMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(bonusitem.FieldBcmbNotifyID) {
		fields = append(fields, bonusitem.FieldBcmbNotifyID)
	}
	if m.FieldCleared(bonusitem.FieldBcmbTransPayCode) {
		fields = append(fields, bonusitem.FieldBcmbTransPayCode)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BonusItemMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BonusItemMutation) ClearField(name string) error {
	switch name {
	case bonusitem.FieldBcmbNotifyID:
		m.ClearBcmbNotifyID()
		return nil
	case bonusitem.FieldBcmbTransPayCode:
		m.ClearBcmbTransPayCode()
		return nil
	}
	return fmt.Errorf("unknown BonusItem nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BonusItemMutation) ResetField(name string) error {
	switch name {
	case bonusitem.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case bonusitem.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case bonusitem.FieldCode:
		m.ResetCode()
		return nil
	case bonusitem.FieldMchID:
		m.ResetMchID()
		return nil
	case bonusitem.FieldMallCode:
		m.ResetMallCode()
		return nil
	case bonusitem.FieldMallName:
		m.ResetMallName()
		return nil
	case bonusitem.FieldShopCode:
		m.ResetShopCode()
		return nil
	case bonusitem.FieldShopName:
		m.ResetShopName()
		return nil
	case bonusitem.FieldMemberCode:
		m.ResetMemberCode()
		return nil
	case bonusitem.FieldWxOpenID:
		m.ResetWxOpenID()
		return nil
	case bonusitem.FieldBcmbNotifyTime:
		m.ResetBcmbNotifyTime()
		return nil
	case bonusitem.FieldBcmbNotifyID:
		m.ResetBcmbNotifyID()
		return nil
	case bonusitem.FieldBcmbTransCode:
		m.ResetBcmbTransCode()
		return nil
	case bonusitem.FieldAmount:
		m.ResetAmount()
		return nil
	case bonusitem.FieldBcmbTransTime:
		m.ResetBcmbTransTime()
		return nil
	case bonusitem.FieldCreateTs:
		m.ResetCreateTs()
		return nil
	case bonusitem.FieldBcmbTransPayCode:
		m.ResetBcmbTransPayCode()
		return nil
	case bonusitem.FieldBcmbTransType:
		m.ResetBcmbTransType()
		return nil
	case bonusitem.FieldBonus:
		m.ResetBonus()
		return nil
	case bonusitem.FieldBonusRate:
		m.ResetBonusRate()
		return nil
	case bonusitem.FieldStatus:
		m.ResetStatus()
		return nil
	}
	return fmt.Errorf("unknown BonusItem field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BonusItemMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BonusItemMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BonusItemMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BonusItemMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BonusItemMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BonusItemMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BonusItemMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown BonusItem unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BonusItemMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown BonusItem edge %s", name)
}
