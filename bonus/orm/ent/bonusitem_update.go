// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/twiglab/crm/bonus/orm/ent/bonusitem"
	"github.com/twiglab/crm/bonus/orm/ent/predicate"
)

// BonusItemUpdate is the builder for updating BonusItem entities.
type BonusItemUpdate struct {
	config
	hooks    []Hook
	mutation *BonusItemMutation
}

// Where appends a list predicates to the BonusItemUpdate builder.
func (biu *BonusItemUpdate) Where(ps ...predicate.BonusItem) *BonusItemUpdate {
	biu.mutation.Where(ps...)
	return biu
}

// SetUpdateTime sets the "update_time" field.
func (biu *BonusItemUpdate) SetUpdateTime(t time.Time) *BonusItemUpdate {
	biu.mutation.SetUpdateTime(t)
	return biu
}

// SetBcmbNotifyID sets the "bcmb_notify_id" field.
func (biu *BonusItemUpdate) SetBcmbNotifyID(s string) *BonusItemUpdate {
	biu.mutation.SetBcmbNotifyID(s)
	return biu
}

// SetNillableBcmbNotifyID sets the "bcmb_notify_id" field if the given value is not nil.
func (biu *BonusItemUpdate) SetNillableBcmbNotifyID(s *string) *BonusItemUpdate {
	if s != nil {
		biu.SetBcmbNotifyID(*s)
	}
	return biu
}

// ClearBcmbNotifyID clears the value of the "bcmb_notify_id" field.
func (biu *BonusItemUpdate) ClearBcmbNotifyID() *BonusItemUpdate {
	biu.mutation.ClearBcmbNotifyID()
	return biu
}

// SetBcmbTransCode sets the "bcmb_trans_code" field.
func (biu *BonusItemUpdate) SetBcmbTransCode(s string) *BonusItemUpdate {
	biu.mutation.SetBcmbTransCode(s)
	return biu
}

// SetNillableBcmbTransCode sets the "bcmb_trans_code" field if the given value is not nil.
func (biu *BonusItemUpdate) SetNillableBcmbTransCode(s *string) *BonusItemUpdate {
	if s != nil {
		biu.SetBcmbTransCode(*s)
	}
	return biu
}

// SetBcmbTransPayCode sets the "bcmb_trans_pay_code" field.
func (biu *BonusItemUpdate) SetBcmbTransPayCode(s string) *BonusItemUpdate {
	biu.mutation.SetBcmbTransPayCode(s)
	return biu
}

// SetNillableBcmbTransPayCode sets the "bcmb_trans_pay_code" field if the given value is not nil.
func (biu *BonusItemUpdate) SetNillableBcmbTransPayCode(s *string) *BonusItemUpdate {
	if s != nil {
		biu.SetBcmbTransPayCode(*s)
	}
	return biu
}

// ClearBcmbTransPayCode clears the value of the "bcmb_trans_pay_code" field.
func (biu *BonusItemUpdate) ClearBcmbTransPayCode() *BonusItemUpdate {
	biu.mutation.ClearBcmbTransPayCode()
	return biu
}

// SetBonusRate sets the "bonus_rate" field.
func (biu *BonusItemUpdate) SetBonusRate(i int) *BonusItemUpdate {
	biu.mutation.ResetBonusRate()
	biu.mutation.SetBonusRate(i)
	return biu
}

// SetNillableBonusRate sets the "bonus_rate" field if the given value is not nil.
func (biu *BonusItemUpdate) SetNillableBonusRate(i *int) *BonusItemUpdate {
	if i != nil {
		biu.SetBonusRate(*i)
	}
	return biu
}

// AddBonusRate adds i to the "bonus_rate" field.
func (biu *BonusItemUpdate) AddBonusRate(i int) *BonusItemUpdate {
	biu.mutation.AddBonusRate(i)
	return biu
}

// SetStatus sets the "status" field.
func (biu *BonusItemUpdate) SetStatus(i int) *BonusItemUpdate {
	biu.mutation.ResetStatus()
	biu.mutation.SetStatus(i)
	return biu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (biu *BonusItemUpdate) SetNillableStatus(i *int) *BonusItemUpdate {
	if i != nil {
		biu.SetStatus(*i)
	}
	return biu
}

// AddStatus adds i to the "status" field.
func (biu *BonusItemUpdate) AddStatus(i int) *BonusItemUpdate {
	biu.mutation.AddStatus(i)
	return biu
}

// Mutation returns the BonusItemMutation object of the builder.
func (biu *BonusItemUpdate) Mutation() *BonusItemMutation {
	return biu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (biu *BonusItemUpdate) Save(ctx context.Context) (int, error) {
	biu.defaults()
	return withHooks(ctx, biu.sqlSave, biu.mutation, biu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (biu *BonusItemUpdate) SaveX(ctx context.Context) int {
	affected, err := biu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (biu *BonusItemUpdate) Exec(ctx context.Context) error {
	_, err := biu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (biu *BonusItemUpdate) ExecX(ctx context.Context) {
	if err := biu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (biu *BonusItemUpdate) defaults() {
	if _, ok := biu.mutation.UpdateTime(); !ok {
		v := bonusitem.UpdateDefaultUpdateTime()
		biu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (biu *BonusItemUpdate) check() error {
	if v, ok := biu.mutation.BcmbNotifyID(); ok {
		if err := bonusitem.BcmbNotifyIDValidator(v); err != nil {
			return &ValidationError{Name: "bcmb_notify_id", err: fmt.Errorf(`ent: validator failed for field "BonusItem.bcmb_notify_id": %w`, err)}
		}
	}
	if v, ok := biu.mutation.BcmbTransCode(); ok {
		if err := bonusitem.BcmbTransCodeValidator(v); err != nil {
			return &ValidationError{Name: "bcmb_trans_code", err: fmt.Errorf(`ent: validator failed for field "BonusItem.bcmb_trans_code": %w`, err)}
		}
	}
	if v, ok := biu.mutation.BcmbTransPayCode(); ok {
		if err := bonusitem.BcmbTransPayCodeValidator(v); err != nil {
			return &ValidationError{Name: "bcmb_trans_pay_code", err: fmt.Errorf(`ent: validator failed for field "BonusItem.bcmb_trans_pay_code": %w`, err)}
		}
	}
	return nil
}

func (biu *BonusItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := biu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(bonusitem.Table, bonusitem.Columns, sqlgraph.NewFieldSpec(bonusitem.FieldID, field.TypeInt))
	if ps := biu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := biu.mutation.UpdateTime(); ok {
		_spec.SetField(bonusitem.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := biu.mutation.BcmbNotifyID(); ok {
		_spec.SetField(bonusitem.FieldBcmbNotifyID, field.TypeString, value)
	}
	if biu.mutation.BcmbNotifyIDCleared() {
		_spec.ClearField(bonusitem.FieldBcmbNotifyID, field.TypeString)
	}
	if value, ok := biu.mutation.BcmbTransCode(); ok {
		_spec.SetField(bonusitem.FieldBcmbTransCode, field.TypeString, value)
	}
	if value, ok := biu.mutation.BcmbTransPayCode(); ok {
		_spec.SetField(bonusitem.FieldBcmbTransPayCode, field.TypeString, value)
	}
	if biu.mutation.BcmbTransPayCodeCleared() {
		_spec.ClearField(bonusitem.FieldBcmbTransPayCode, field.TypeString)
	}
	if value, ok := biu.mutation.BonusRate(); ok {
		_spec.SetField(bonusitem.FieldBonusRate, field.TypeInt, value)
	}
	if value, ok := biu.mutation.AddedBonusRate(); ok {
		_spec.AddField(bonusitem.FieldBonusRate, field.TypeInt, value)
	}
	if value, ok := biu.mutation.Status(); ok {
		_spec.SetField(bonusitem.FieldStatus, field.TypeInt, value)
	}
	if value, ok := biu.mutation.AddedStatus(); ok {
		_spec.AddField(bonusitem.FieldStatus, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, biu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bonusitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	biu.mutation.done = true
	return n, nil
}

// BonusItemUpdateOne is the builder for updating a single BonusItem entity.
type BonusItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BonusItemMutation
}

// SetUpdateTime sets the "update_time" field.
func (biuo *BonusItemUpdateOne) SetUpdateTime(t time.Time) *BonusItemUpdateOne {
	biuo.mutation.SetUpdateTime(t)
	return biuo
}

// SetBcmbNotifyID sets the "bcmb_notify_id" field.
func (biuo *BonusItemUpdateOne) SetBcmbNotifyID(s string) *BonusItemUpdateOne {
	biuo.mutation.SetBcmbNotifyID(s)
	return biuo
}

// SetNillableBcmbNotifyID sets the "bcmb_notify_id" field if the given value is not nil.
func (biuo *BonusItemUpdateOne) SetNillableBcmbNotifyID(s *string) *BonusItemUpdateOne {
	if s != nil {
		biuo.SetBcmbNotifyID(*s)
	}
	return biuo
}

// ClearBcmbNotifyID clears the value of the "bcmb_notify_id" field.
func (biuo *BonusItemUpdateOne) ClearBcmbNotifyID() *BonusItemUpdateOne {
	biuo.mutation.ClearBcmbNotifyID()
	return biuo
}

// SetBcmbTransCode sets the "bcmb_trans_code" field.
func (biuo *BonusItemUpdateOne) SetBcmbTransCode(s string) *BonusItemUpdateOne {
	biuo.mutation.SetBcmbTransCode(s)
	return biuo
}

// SetNillableBcmbTransCode sets the "bcmb_trans_code" field if the given value is not nil.
func (biuo *BonusItemUpdateOne) SetNillableBcmbTransCode(s *string) *BonusItemUpdateOne {
	if s != nil {
		biuo.SetBcmbTransCode(*s)
	}
	return biuo
}

// SetBcmbTransPayCode sets the "bcmb_trans_pay_code" field.
func (biuo *BonusItemUpdateOne) SetBcmbTransPayCode(s string) *BonusItemUpdateOne {
	biuo.mutation.SetBcmbTransPayCode(s)
	return biuo
}

// SetNillableBcmbTransPayCode sets the "bcmb_trans_pay_code" field if the given value is not nil.
func (biuo *BonusItemUpdateOne) SetNillableBcmbTransPayCode(s *string) *BonusItemUpdateOne {
	if s != nil {
		biuo.SetBcmbTransPayCode(*s)
	}
	return biuo
}

// ClearBcmbTransPayCode clears the value of the "bcmb_trans_pay_code" field.
func (biuo *BonusItemUpdateOne) ClearBcmbTransPayCode() *BonusItemUpdateOne {
	biuo.mutation.ClearBcmbTransPayCode()
	return biuo
}

// SetBonusRate sets the "bonus_rate" field.
func (biuo *BonusItemUpdateOne) SetBonusRate(i int) *BonusItemUpdateOne {
	biuo.mutation.ResetBonusRate()
	biuo.mutation.SetBonusRate(i)
	return biuo
}

// SetNillableBonusRate sets the "bonus_rate" field if the given value is not nil.
func (biuo *BonusItemUpdateOne) SetNillableBonusRate(i *int) *BonusItemUpdateOne {
	if i != nil {
		biuo.SetBonusRate(*i)
	}
	return biuo
}

// AddBonusRate adds i to the "bonus_rate" field.
func (biuo *BonusItemUpdateOne) AddBonusRate(i int) *BonusItemUpdateOne {
	biuo.mutation.AddBonusRate(i)
	return biuo
}

// SetStatus sets the "status" field.
func (biuo *BonusItemUpdateOne) SetStatus(i int) *BonusItemUpdateOne {
	biuo.mutation.ResetStatus()
	biuo.mutation.SetStatus(i)
	return biuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (biuo *BonusItemUpdateOne) SetNillableStatus(i *int) *BonusItemUpdateOne {
	if i != nil {
		biuo.SetStatus(*i)
	}
	return biuo
}

// AddStatus adds i to the "status" field.
func (biuo *BonusItemUpdateOne) AddStatus(i int) *BonusItemUpdateOne {
	biuo.mutation.AddStatus(i)
	return biuo
}

// Mutation returns the BonusItemMutation object of the builder.
func (biuo *BonusItemUpdateOne) Mutation() *BonusItemMutation {
	return biuo.mutation
}

// Where appends a list predicates to the BonusItemUpdate builder.
func (biuo *BonusItemUpdateOne) Where(ps ...predicate.BonusItem) *BonusItemUpdateOne {
	biuo.mutation.Where(ps...)
	return biuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (biuo *BonusItemUpdateOne) Select(field string, fields ...string) *BonusItemUpdateOne {
	biuo.fields = append([]string{field}, fields...)
	return biuo
}

// Save executes the query and returns the updated BonusItem entity.
func (biuo *BonusItemUpdateOne) Save(ctx context.Context) (*BonusItem, error) {
	biuo.defaults()
	return withHooks(ctx, biuo.sqlSave, biuo.mutation, biuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (biuo *BonusItemUpdateOne) SaveX(ctx context.Context) *BonusItem {
	node, err := biuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (biuo *BonusItemUpdateOne) Exec(ctx context.Context) error {
	_, err := biuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (biuo *BonusItemUpdateOne) ExecX(ctx context.Context) {
	if err := biuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (biuo *BonusItemUpdateOne) defaults() {
	if _, ok := biuo.mutation.UpdateTime(); !ok {
		v := bonusitem.UpdateDefaultUpdateTime()
		biuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (biuo *BonusItemUpdateOne) check() error {
	if v, ok := biuo.mutation.BcmbNotifyID(); ok {
		if err := bonusitem.BcmbNotifyIDValidator(v); err != nil {
			return &ValidationError{Name: "bcmb_notify_id", err: fmt.Errorf(`ent: validator failed for field "BonusItem.bcmb_notify_id": %w`, err)}
		}
	}
	if v, ok := biuo.mutation.BcmbTransCode(); ok {
		if err := bonusitem.BcmbTransCodeValidator(v); err != nil {
			return &ValidationError{Name: "bcmb_trans_code", err: fmt.Errorf(`ent: validator failed for field "BonusItem.bcmb_trans_code": %w`, err)}
		}
	}
	if v, ok := biuo.mutation.BcmbTransPayCode(); ok {
		if err := bonusitem.BcmbTransPayCodeValidator(v); err != nil {
			return &ValidationError{Name: "bcmb_trans_pay_code", err: fmt.Errorf(`ent: validator failed for field "BonusItem.bcmb_trans_pay_code": %w`, err)}
		}
	}
	return nil
}

func (biuo *BonusItemUpdateOne) sqlSave(ctx context.Context) (_node *BonusItem, err error) {
	if err := biuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(bonusitem.Table, bonusitem.Columns, sqlgraph.NewFieldSpec(bonusitem.FieldID, field.TypeInt))
	id, ok := biuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BonusItem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := biuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bonusitem.FieldID)
		for _, f := range fields {
			if !bonusitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != bonusitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := biuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := biuo.mutation.UpdateTime(); ok {
		_spec.SetField(bonusitem.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := biuo.mutation.BcmbNotifyID(); ok {
		_spec.SetField(bonusitem.FieldBcmbNotifyID, field.TypeString, value)
	}
	if biuo.mutation.BcmbNotifyIDCleared() {
		_spec.ClearField(bonusitem.FieldBcmbNotifyID, field.TypeString)
	}
	if value, ok := biuo.mutation.BcmbTransCode(); ok {
		_spec.SetField(bonusitem.FieldBcmbTransCode, field.TypeString, value)
	}
	if value, ok := biuo.mutation.BcmbTransPayCode(); ok {
		_spec.SetField(bonusitem.FieldBcmbTransPayCode, field.TypeString, value)
	}
	if biuo.mutation.BcmbTransPayCodeCleared() {
		_spec.ClearField(bonusitem.FieldBcmbTransPayCode, field.TypeString)
	}
	if value, ok := biuo.mutation.BonusRate(); ok {
		_spec.SetField(bonusitem.FieldBonusRate, field.TypeInt, value)
	}
	if value, ok := biuo.mutation.AddedBonusRate(); ok {
		_spec.AddField(bonusitem.FieldBonusRate, field.TypeInt, value)
	}
	if value, ok := biuo.mutation.Status(); ok {
		_spec.SetField(bonusitem.FieldStatus, field.TypeInt, value)
	}
	if value, ok := biuo.mutation.AddedStatus(); ok {
		_spec.AddField(bonusitem.FieldStatus, field.TypeInt, value)
	}
	_node = &BonusItem{config: biuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, biuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bonusitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	biuo.mutation.done = true
	return _node, nil
}
