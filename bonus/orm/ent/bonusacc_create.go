// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/twiglab/crm/bonus/orm/ent/bonusacc"
)

// BonusAccCreate is the builder for creating a BonusAcc entity.
type BonusAccCreate struct {
	config
	mutation *BonusAccMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (bac *BonusAccCreate) SetCreateTime(t time.Time) *BonusAccCreate {
	bac.mutation.SetCreateTime(t)
	return bac
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (bac *BonusAccCreate) SetNillableCreateTime(t *time.Time) *BonusAccCreate {
	if t != nil {
		bac.SetCreateTime(*t)
	}
	return bac
}

// SetUpdateTime sets the "update_time" field.
func (bac *BonusAccCreate) SetUpdateTime(t time.Time) *BonusAccCreate {
	bac.mutation.SetUpdateTime(t)
	return bac
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (bac *BonusAccCreate) SetNillableUpdateTime(t *time.Time) *BonusAccCreate {
	if t != nil {
		bac.SetUpdateTime(*t)
	}
	return bac
}

// SetMemberCode sets the "member_code" field.
func (bac *BonusAccCreate) SetMemberCode(s string) *BonusAccCreate {
	bac.mutation.SetMemberCode(s)
	return bac
}

// SetLastCleanBalance sets the "last_clean_balance" field.
func (bac *BonusAccCreate) SetLastCleanBalance(i int) *BonusAccCreate {
	bac.mutation.SetLastCleanBalance(i)
	return bac
}

// SetNillableLastCleanBalance sets the "last_clean_balance" field if the given value is not nil.
func (bac *BonusAccCreate) SetNillableLastCleanBalance(i *int) *BonusAccCreate {
	if i != nil {
		bac.SetLastCleanBalance(*i)
	}
	return bac
}

// SetLastCleanTs sets the "last_clean_ts" field.
func (bac *BonusAccCreate) SetLastCleanTs(i int64) *BonusAccCreate {
	bac.mutation.SetLastCleanTs(i)
	return bac
}

// SetNillableLastCleanTs sets the "last_clean_ts" field if the given value is not nil.
func (bac *BonusAccCreate) SetNillableLastCleanTs(i *int64) *BonusAccCreate {
	if i != nil {
		bac.SetLastCleanTs(*i)
	}
	return bac
}

// SetLastCleanTime sets the "last_clean_time" field.
func (bac *BonusAccCreate) SetLastCleanTime(t time.Time) *BonusAccCreate {
	bac.mutation.SetLastCleanTime(t)
	return bac
}

// SetNillableLastCleanTime sets the "last_clean_time" field if the given value is not nil.
func (bac *BonusAccCreate) SetNillableLastCleanTime(t *time.Time) *BonusAccCreate {
	if t != nil {
		bac.SetLastCleanTime(*t)
	}
	return bac
}

// SetStatus sets the "status" field.
func (bac *BonusAccCreate) SetStatus(i int) *BonusAccCreate {
	bac.mutation.SetStatus(i)
	return bac
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (bac *BonusAccCreate) SetNillableStatus(i *int) *BonusAccCreate {
	if i != nil {
		bac.SetStatus(*i)
	}
	return bac
}

// Mutation returns the BonusAccMutation object of the builder.
func (bac *BonusAccCreate) Mutation() *BonusAccMutation {
	return bac.mutation
}

// Save creates the BonusAcc in the database.
func (bac *BonusAccCreate) Save(ctx context.Context) (*BonusAcc, error) {
	bac.defaults()
	return withHooks(ctx, bac.sqlSave, bac.mutation, bac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bac *BonusAccCreate) SaveX(ctx context.Context) *BonusAcc {
	v, err := bac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bac *BonusAccCreate) Exec(ctx context.Context) error {
	_, err := bac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bac *BonusAccCreate) ExecX(ctx context.Context) {
	if err := bac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bac *BonusAccCreate) defaults() {
	if _, ok := bac.mutation.CreateTime(); !ok {
		v := bonusacc.DefaultCreateTime()
		bac.mutation.SetCreateTime(v)
	}
	if _, ok := bac.mutation.UpdateTime(); !ok {
		v := bonusacc.DefaultUpdateTime()
		bac.mutation.SetUpdateTime(v)
	}
	if _, ok := bac.mutation.LastCleanBalance(); !ok {
		v := bonusacc.DefaultLastCleanBalance
		bac.mutation.SetLastCleanBalance(v)
	}
	if _, ok := bac.mutation.LastCleanTs(); !ok {
		v := bonusacc.DefaultLastCleanTs
		bac.mutation.SetLastCleanTs(v)
	}
	if _, ok := bac.mutation.LastCleanTime(); !ok {
		v := bonusacc.DefaultLastCleanTime()
		bac.mutation.SetLastCleanTime(v)
	}
	if _, ok := bac.mutation.Status(); !ok {
		v := bonusacc.DefaultStatus
		bac.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bac *BonusAccCreate) check() error {
	if _, ok := bac.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "BonusAcc.create_time"`)}
	}
	if _, ok := bac.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "BonusAcc.update_time"`)}
	}
	if _, ok := bac.mutation.MemberCode(); !ok {
		return &ValidationError{Name: "member_code", err: errors.New(`ent: missing required field "BonusAcc.member_code"`)}
	}
	if v, ok := bac.mutation.MemberCode(); ok {
		if err := bonusacc.MemberCodeValidator(v); err != nil {
			return &ValidationError{Name: "member_code", err: fmt.Errorf(`ent: validator failed for field "BonusAcc.member_code": %w`, err)}
		}
	}
	if _, ok := bac.mutation.LastCleanBalance(); !ok {
		return &ValidationError{Name: "last_clean_balance", err: errors.New(`ent: missing required field "BonusAcc.last_clean_balance"`)}
	}
	if _, ok := bac.mutation.LastCleanTs(); !ok {
		return &ValidationError{Name: "last_clean_ts", err: errors.New(`ent: missing required field "BonusAcc.last_clean_ts"`)}
	}
	if _, ok := bac.mutation.LastCleanTime(); !ok {
		return &ValidationError{Name: "last_clean_time", err: errors.New(`ent: missing required field "BonusAcc.last_clean_time"`)}
	}
	if _, ok := bac.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "BonusAcc.status"`)}
	}
	return nil
}

func (bac *BonusAccCreate) sqlSave(ctx context.Context) (*BonusAcc, error) {
	if err := bac.check(); err != nil {
		return nil, err
	}
	_node, _spec := bac.createSpec()
	if err := sqlgraph.CreateNode(ctx, bac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	bac.mutation.id = &_node.ID
	bac.mutation.done = true
	return _node, nil
}

func (bac *BonusAccCreate) createSpec() (*BonusAcc, *sqlgraph.CreateSpec) {
	var (
		_node = &BonusAcc{config: bac.config}
		_spec = sqlgraph.NewCreateSpec(bonusacc.Table, sqlgraph.NewFieldSpec(bonusacc.FieldID, field.TypeInt))
	)
	_spec.OnConflict = bac.conflict
	if value, ok := bac.mutation.CreateTime(); ok {
		_spec.SetField(bonusacc.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := bac.mutation.UpdateTime(); ok {
		_spec.SetField(bonusacc.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := bac.mutation.MemberCode(); ok {
		_spec.SetField(bonusacc.FieldMemberCode, field.TypeString, value)
		_node.MemberCode = value
	}
	if value, ok := bac.mutation.LastCleanBalance(); ok {
		_spec.SetField(bonusacc.FieldLastCleanBalance, field.TypeInt, value)
		_node.LastCleanBalance = value
	}
	if value, ok := bac.mutation.LastCleanTs(); ok {
		_spec.SetField(bonusacc.FieldLastCleanTs, field.TypeInt64, value)
		_node.LastCleanTs = value
	}
	if value, ok := bac.mutation.LastCleanTime(); ok {
		_spec.SetField(bonusacc.FieldLastCleanTime, field.TypeTime, value)
		_node.LastCleanTime = value
	}
	if value, ok := bac.mutation.Status(); ok {
		_spec.SetField(bonusacc.FieldStatus, field.TypeInt, value)
		_node.Status = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BonusAcc.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BonusAccUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (bac *BonusAccCreate) OnConflict(opts ...sql.ConflictOption) *BonusAccUpsertOne {
	bac.conflict = opts
	return &BonusAccUpsertOne{
		create: bac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BonusAcc.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bac *BonusAccCreate) OnConflictColumns(columns ...string) *BonusAccUpsertOne {
	bac.conflict = append(bac.conflict, sql.ConflictColumns(columns...))
	return &BonusAccUpsertOne{
		create: bac,
	}
}

type (
	// BonusAccUpsertOne is the builder for "upsert"-ing
	//  one BonusAcc node.
	BonusAccUpsertOne struct {
		create *BonusAccCreate
	}

	// BonusAccUpsert is the "OnConflict" setter.
	BonusAccUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *BonusAccUpsert) SetUpdateTime(v time.Time) *BonusAccUpsert {
	u.Set(bonusacc.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *BonusAccUpsert) UpdateUpdateTime() *BonusAccUpsert {
	u.SetExcluded(bonusacc.FieldUpdateTime)
	return u
}

// SetStatus sets the "status" field.
func (u *BonusAccUpsert) SetStatus(v int) *BonusAccUpsert {
	u.Set(bonusacc.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *BonusAccUpsert) UpdateStatus() *BonusAccUpsert {
	u.SetExcluded(bonusacc.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *BonusAccUpsert) AddStatus(v int) *BonusAccUpsert {
	u.Add(bonusacc.FieldStatus, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.BonusAcc.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BonusAccUpsertOne) UpdateNewValues() *BonusAccUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(bonusacc.FieldCreateTime)
		}
		if _, exists := u.create.mutation.MemberCode(); exists {
			s.SetIgnore(bonusacc.FieldMemberCode)
		}
		if _, exists := u.create.mutation.LastCleanBalance(); exists {
			s.SetIgnore(bonusacc.FieldLastCleanBalance)
		}
		if _, exists := u.create.mutation.LastCleanTs(); exists {
			s.SetIgnore(bonusacc.FieldLastCleanTs)
		}
		if _, exists := u.create.mutation.LastCleanTime(); exists {
			s.SetIgnore(bonusacc.FieldLastCleanTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BonusAcc.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BonusAccUpsertOne) Ignore() *BonusAccUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BonusAccUpsertOne) DoNothing() *BonusAccUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BonusAccCreate.OnConflict
// documentation for more info.
func (u *BonusAccUpsertOne) Update(set func(*BonusAccUpsert)) *BonusAccUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BonusAccUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *BonusAccUpsertOne) SetUpdateTime(v time.Time) *BonusAccUpsertOne {
	return u.Update(func(s *BonusAccUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *BonusAccUpsertOne) UpdateUpdateTime() *BonusAccUpsertOne {
	return u.Update(func(s *BonusAccUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetStatus sets the "status" field.
func (u *BonusAccUpsertOne) SetStatus(v int) *BonusAccUpsertOne {
	return u.Update(func(s *BonusAccUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *BonusAccUpsertOne) AddStatus(v int) *BonusAccUpsertOne {
	return u.Update(func(s *BonusAccUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *BonusAccUpsertOne) UpdateStatus() *BonusAccUpsertOne {
	return u.Update(func(s *BonusAccUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *BonusAccUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BonusAccCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BonusAccUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BonusAccUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BonusAccUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BonusAccCreateBulk is the builder for creating many BonusAcc entities in bulk.
type BonusAccCreateBulk struct {
	config
	err      error
	builders []*BonusAccCreate
	conflict []sql.ConflictOption
}

// Save creates the BonusAcc entities in the database.
func (bacb *BonusAccCreateBulk) Save(ctx context.Context) ([]*BonusAcc, error) {
	if bacb.err != nil {
		return nil, bacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bacb.builders))
	nodes := make([]*BonusAcc, len(bacb.builders))
	mutators := make([]Mutator, len(bacb.builders))
	for i := range bacb.builders {
		func(i int, root context.Context) {
			builder := bacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BonusAccMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bacb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bacb *BonusAccCreateBulk) SaveX(ctx context.Context) []*BonusAcc {
	v, err := bacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bacb *BonusAccCreateBulk) Exec(ctx context.Context) error {
	_, err := bacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bacb *BonusAccCreateBulk) ExecX(ctx context.Context) {
	if err := bacb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BonusAcc.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BonusAccUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (bacb *BonusAccCreateBulk) OnConflict(opts ...sql.ConflictOption) *BonusAccUpsertBulk {
	bacb.conflict = opts
	return &BonusAccUpsertBulk{
		create: bacb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BonusAcc.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bacb *BonusAccCreateBulk) OnConflictColumns(columns ...string) *BonusAccUpsertBulk {
	bacb.conflict = append(bacb.conflict, sql.ConflictColumns(columns...))
	return &BonusAccUpsertBulk{
		create: bacb,
	}
}

// BonusAccUpsertBulk is the builder for "upsert"-ing
// a bulk of BonusAcc nodes.
type BonusAccUpsertBulk struct {
	create *BonusAccCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BonusAcc.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BonusAccUpsertBulk) UpdateNewValues() *BonusAccUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(bonusacc.FieldCreateTime)
			}
			if _, exists := b.mutation.MemberCode(); exists {
				s.SetIgnore(bonusacc.FieldMemberCode)
			}
			if _, exists := b.mutation.LastCleanBalance(); exists {
				s.SetIgnore(bonusacc.FieldLastCleanBalance)
			}
			if _, exists := b.mutation.LastCleanTs(); exists {
				s.SetIgnore(bonusacc.FieldLastCleanTs)
			}
			if _, exists := b.mutation.LastCleanTime(); exists {
				s.SetIgnore(bonusacc.FieldLastCleanTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BonusAcc.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BonusAccUpsertBulk) Ignore() *BonusAccUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BonusAccUpsertBulk) DoNothing() *BonusAccUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BonusAccCreateBulk.OnConflict
// documentation for more info.
func (u *BonusAccUpsertBulk) Update(set func(*BonusAccUpsert)) *BonusAccUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BonusAccUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *BonusAccUpsertBulk) SetUpdateTime(v time.Time) *BonusAccUpsertBulk {
	return u.Update(func(s *BonusAccUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *BonusAccUpsertBulk) UpdateUpdateTime() *BonusAccUpsertBulk {
	return u.Update(func(s *BonusAccUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetStatus sets the "status" field.
func (u *BonusAccUpsertBulk) SetStatus(v int) *BonusAccUpsertBulk {
	return u.Update(func(s *BonusAccUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *BonusAccUpsertBulk) AddStatus(v int) *BonusAccUpsertBulk {
	return u.Update(func(s *BonusAccUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *BonusAccUpsertBulk) UpdateStatus() *BonusAccUpsertBulk {
	return u.Update(func(s *BonusAccUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *BonusAccUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BonusAccCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BonusAccCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BonusAccUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
