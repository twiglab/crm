// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/twiglab/crm/bonus/orm/ent/bonusitem"
)

// BonusItemCreate is the builder for creating a BonusItem entity.
type BonusItemCreate struct {
	config
	mutation *BonusItemMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (bic *BonusItemCreate) SetCreateTime(t time.Time) *BonusItemCreate {
	bic.mutation.SetCreateTime(t)
	return bic
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (bic *BonusItemCreate) SetNillableCreateTime(t *time.Time) *BonusItemCreate {
	if t != nil {
		bic.SetCreateTime(*t)
	}
	return bic
}

// SetUpdateTime sets the "update_time" field.
func (bic *BonusItemCreate) SetUpdateTime(t time.Time) *BonusItemCreate {
	bic.mutation.SetUpdateTime(t)
	return bic
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (bic *BonusItemCreate) SetNillableUpdateTime(t *time.Time) *BonusItemCreate {
	if t != nil {
		bic.SetUpdateTime(*t)
	}
	return bic
}

// SetCode sets the "code" field.
func (bic *BonusItemCreate) SetCode(s string) *BonusItemCreate {
	bic.mutation.SetCode(s)
	return bic
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (bic *BonusItemCreate) SetNillableCode(s *string) *BonusItemCreate {
	if s != nil {
		bic.SetCode(*s)
	}
	return bic
}

// SetMchID sets the "mch_id" field.
func (bic *BonusItemCreate) SetMchID(s string) *BonusItemCreate {
	bic.mutation.SetMchID(s)
	return bic
}

// SetMallCode sets the "mall_code" field.
func (bic *BonusItemCreate) SetMallCode(s string) *BonusItemCreate {
	bic.mutation.SetMallCode(s)
	return bic
}

// SetMallName sets the "mall_name" field.
func (bic *BonusItemCreate) SetMallName(s string) *BonusItemCreate {
	bic.mutation.SetMallName(s)
	return bic
}

// SetShopCode sets the "shop_code" field.
func (bic *BonusItemCreate) SetShopCode(s string) *BonusItemCreate {
	bic.mutation.SetShopCode(s)
	return bic
}

// SetShopName sets the "shop_name" field.
func (bic *BonusItemCreate) SetShopName(s string) *BonusItemCreate {
	bic.mutation.SetShopName(s)
	return bic
}

// SetMemberCode sets the "member_code" field.
func (bic *BonusItemCreate) SetMemberCode(s string) *BonusItemCreate {
	bic.mutation.SetMemberCode(s)
	return bic
}

// SetWxOpenID sets the "wx_open_id" field.
func (bic *BonusItemCreate) SetWxOpenID(s string) *BonusItemCreate {
	bic.mutation.SetWxOpenID(s)
	return bic
}

// SetBcmbNotifyTime sets the "bcmb_notify_time" field.
func (bic *BonusItemCreate) SetBcmbNotifyTime(t time.Time) *BonusItemCreate {
	bic.mutation.SetBcmbNotifyTime(t)
	return bic
}

// SetNillableBcmbNotifyTime sets the "bcmb_notify_time" field if the given value is not nil.
func (bic *BonusItemCreate) SetNillableBcmbNotifyTime(t *time.Time) *BonusItemCreate {
	if t != nil {
		bic.SetBcmbNotifyTime(*t)
	}
	return bic
}

// SetBcmbNotifyID sets the "bcmb_notify_id" field.
func (bic *BonusItemCreate) SetBcmbNotifyID(s string) *BonusItemCreate {
	bic.mutation.SetBcmbNotifyID(s)
	return bic
}

// SetNillableBcmbNotifyID sets the "bcmb_notify_id" field if the given value is not nil.
func (bic *BonusItemCreate) SetNillableBcmbNotifyID(s *string) *BonusItemCreate {
	if s != nil {
		bic.SetBcmbNotifyID(*s)
	}
	return bic
}

// SetBcmbTransCode sets the "bcmb_trans_code" field.
func (bic *BonusItemCreate) SetBcmbTransCode(s string) *BonusItemCreate {
	bic.mutation.SetBcmbTransCode(s)
	return bic
}

// SetAmount sets the "amount" field.
func (bic *BonusItemCreate) SetAmount(i int) *BonusItemCreate {
	bic.mutation.SetAmount(i)
	return bic
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (bic *BonusItemCreate) SetNillableAmount(i *int) *BonusItemCreate {
	if i != nil {
		bic.SetAmount(*i)
	}
	return bic
}

// SetBcmbTransTime sets the "bcmb_trans_time" field.
func (bic *BonusItemCreate) SetBcmbTransTime(t time.Time) *BonusItemCreate {
	bic.mutation.SetBcmbTransTime(t)
	return bic
}

// SetNillableBcmbTransTime sets the "bcmb_trans_time" field if the given value is not nil.
func (bic *BonusItemCreate) SetNillableBcmbTransTime(t *time.Time) *BonusItemCreate {
	if t != nil {
		bic.SetBcmbTransTime(*t)
	}
	return bic
}

// SetCreateTs sets the "create_ts" field.
func (bic *BonusItemCreate) SetCreateTs(i int64) *BonusItemCreate {
	bic.mutation.SetCreateTs(i)
	return bic
}

// SetNillableCreateTs sets the "create_ts" field if the given value is not nil.
func (bic *BonusItemCreate) SetNillableCreateTs(i *int64) *BonusItemCreate {
	if i != nil {
		bic.SetCreateTs(*i)
	}
	return bic
}

// SetBcmbTransPayCode sets the "bcmb_trans_pay_code" field.
func (bic *BonusItemCreate) SetBcmbTransPayCode(s string) *BonusItemCreate {
	bic.mutation.SetBcmbTransPayCode(s)
	return bic
}

// SetNillableBcmbTransPayCode sets the "bcmb_trans_pay_code" field if the given value is not nil.
func (bic *BonusItemCreate) SetNillableBcmbTransPayCode(s *string) *BonusItemCreate {
	if s != nil {
		bic.SetBcmbTransPayCode(*s)
	}
	return bic
}

// SetBcmbTransType sets the "bcmb_trans_type" field.
func (bic *BonusItemCreate) SetBcmbTransType(i int) *BonusItemCreate {
	bic.mutation.SetBcmbTransType(i)
	return bic
}

// SetNillableBcmbTransType sets the "bcmb_trans_type" field if the given value is not nil.
func (bic *BonusItemCreate) SetNillableBcmbTransType(i *int) *BonusItemCreate {
	if i != nil {
		bic.SetBcmbTransType(*i)
	}
	return bic
}

// SetBonus sets the "bonus" field.
func (bic *BonusItemCreate) SetBonus(i int) *BonusItemCreate {
	bic.mutation.SetBonus(i)
	return bic
}

// SetNillableBonus sets the "bonus" field if the given value is not nil.
func (bic *BonusItemCreate) SetNillableBonus(i *int) *BonusItemCreate {
	if i != nil {
		bic.SetBonus(*i)
	}
	return bic
}

// SetBonusRate sets the "bonus_rate" field.
func (bic *BonusItemCreate) SetBonusRate(i int32) *BonusItemCreate {
	bic.mutation.SetBonusRate(i)
	return bic
}

// SetNillableBonusRate sets the "bonus_rate" field if the given value is not nil.
func (bic *BonusItemCreate) SetNillableBonusRate(i *int32) *BonusItemCreate {
	if i != nil {
		bic.SetBonusRate(*i)
	}
	return bic
}

// SetStatus sets the "status" field.
func (bic *BonusItemCreate) SetStatus(i int32) *BonusItemCreate {
	bic.mutation.SetStatus(i)
	return bic
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (bic *BonusItemCreate) SetNillableStatus(i *int32) *BonusItemCreate {
	if i != nil {
		bic.SetStatus(*i)
	}
	return bic
}

// Mutation returns the BonusItemMutation object of the builder.
func (bic *BonusItemCreate) Mutation() *BonusItemMutation {
	return bic.mutation
}

// Save creates the BonusItem in the database.
func (bic *BonusItemCreate) Save(ctx context.Context) (*BonusItem, error) {
	bic.defaults()
	return withHooks(ctx, bic.sqlSave, bic.mutation, bic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bic *BonusItemCreate) SaveX(ctx context.Context) *BonusItem {
	v, err := bic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bic *BonusItemCreate) Exec(ctx context.Context) error {
	_, err := bic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bic *BonusItemCreate) ExecX(ctx context.Context) {
	if err := bic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bic *BonusItemCreate) defaults() {
	if _, ok := bic.mutation.CreateTime(); !ok {
		v := bonusitem.DefaultCreateTime()
		bic.mutation.SetCreateTime(v)
	}
	if _, ok := bic.mutation.UpdateTime(); !ok {
		v := bonusitem.DefaultUpdateTime()
		bic.mutation.SetUpdateTime(v)
	}
	if _, ok := bic.mutation.Code(); !ok {
		v := bonusitem.DefaultCode()
		bic.mutation.SetCode(v)
	}
	if _, ok := bic.mutation.BcmbNotifyTime(); !ok {
		v := bonusitem.DefaultBcmbNotifyTime()
		bic.mutation.SetBcmbNotifyTime(v)
	}
	if _, ok := bic.mutation.Amount(); !ok {
		v := bonusitem.DefaultAmount
		bic.mutation.SetAmount(v)
	}
	if _, ok := bic.mutation.BcmbTransTime(); !ok {
		v := bonusitem.DefaultBcmbTransTime()
		bic.mutation.SetBcmbTransTime(v)
	}
	if _, ok := bic.mutation.CreateTs(); !ok {
		v := bonusitem.DefaultCreateTs
		bic.mutation.SetCreateTs(v)
	}
	if _, ok := bic.mutation.BcmbTransType(); !ok {
		v := bonusitem.DefaultBcmbTransType
		bic.mutation.SetBcmbTransType(v)
	}
	if _, ok := bic.mutation.Bonus(); !ok {
		v := bonusitem.DefaultBonus
		bic.mutation.SetBonus(v)
	}
	if _, ok := bic.mutation.BonusRate(); !ok {
		v := bonusitem.DefaultBonusRate
		bic.mutation.SetBonusRate(v)
	}
	if _, ok := bic.mutation.Status(); !ok {
		v := bonusitem.DefaultStatus
		bic.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bic *BonusItemCreate) check() error {
	if _, ok := bic.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "BonusItem.create_time"`)}
	}
	if _, ok := bic.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "BonusItem.update_time"`)}
	}
	if _, ok := bic.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "BonusItem.code"`)}
	}
	if v, ok := bic.mutation.Code(); ok {
		if err := bonusitem.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "BonusItem.code": %w`, err)}
		}
	}
	if _, ok := bic.mutation.MchID(); !ok {
		return &ValidationError{Name: "mch_id", err: errors.New(`ent: missing required field "BonusItem.mch_id"`)}
	}
	if v, ok := bic.mutation.MchID(); ok {
		if err := bonusitem.MchIDValidator(v); err != nil {
			return &ValidationError{Name: "mch_id", err: fmt.Errorf(`ent: validator failed for field "BonusItem.mch_id": %w`, err)}
		}
	}
	if _, ok := bic.mutation.MallCode(); !ok {
		return &ValidationError{Name: "mall_code", err: errors.New(`ent: missing required field "BonusItem.mall_code"`)}
	}
	if v, ok := bic.mutation.MallCode(); ok {
		if err := bonusitem.MallCodeValidator(v); err != nil {
			return &ValidationError{Name: "mall_code", err: fmt.Errorf(`ent: validator failed for field "BonusItem.mall_code": %w`, err)}
		}
	}
	if _, ok := bic.mutation.MallName(); !ok {
		return &ValidationError{Name: "mall_name", err: errors.New(`ent: missing required field "BonusItem.mall_name"`)}
	}
	if v, ok := bic.mutation.MallName(); ok {
		if err := bonusitem.MallNameValidator(v); err != nil {
			return &ValidationError{Name: "mall_name", err: fmt.Errorf(`ent: validator failed for field "BonusItem.mall_name": %w`, err)}
		}
	}
	if _, ok := bic.mutation.ShopCode(); !ok {
		return &ValidationError{Name: "shop_code", err: errors.New(`ent: missing required field "BonusItem.shop_code"`)}
	}
	if v, ok := bic.mutation.ShopCode(); ok {
		if err := bonusitem.ShopCodeValidator(v); err != nil {
			return &ValidationError{Name: "shop_code", err: fmt.Errorf(`ent: validator failed for field "BonusItem.shop_code": %w`, err)}
		}
	}
	if _, ok := bic.mutation.ShopName(); !ok {
		return &ValidationError{Name: "shop_name", err: errors.New(`ent: missing required field "BonusItem.shop_name"`)}
	}
	if v, ok := bic.mutation.ShopName(); ok {
		if err := bonusitem.ShopNameValidator(v); err != nil {
			return &ValidationError{Name: "shop_name", err: fmt.Errorf(`ent: validator failed for field "BonusItem.shop_name": %w`, err)}
		}
	}
	if _, ok := bic.mutation.MemberCode(); !ok {
		return &ValidationError{Name: "member_code", err: errors.New(`ent: missing required field "BonusItem.member_code"`)}
	}
	if v, ok := bic.mutation.MemberCode(); ok {
		if err := bonusitem.MemberCodeValidator(v); err != nil {
			return &ValidationError{Name: "member_code", err: fmt.Errorf(`ent: validator failed for field "BonusItem.member_code": %w`, err)}
		}
	}
	if _, ok := bic.mutation.WxOpenID(); !ok {
		return &ValidationError{Name: "wx_open_id", err: errors.New(`ent: missing required field "BonusItem.wx_open_id"`)}
	}
	if v, ok := bic.mutation.WxOpenID(); ok {
		if err := bonusitem.WxOpenIDValidator(v); err != nil {
			return &ValidationError{Name: "wx_open_id", err: fmt.Errorf(`ent: validator failed for field "BonusItem.wx_open_id": %w`, err)}
		}
	}
	if _, ok := bic.mutation.BcmbNotifyTime(); !ok {
		return &ValidationError{Name: "bcmb_notify_time", err: errors.New(`ent: missing required field "BonusItem.bcmb_notify_time"`)}
	}
	if v, ok := bic.mutation.BcmbNotifyID(); ok {
		if err := bonusitem.BcmbNotifyIDValidator(v); err != nil {
			return &ValidationError{Name: "bcmb_notify_id", err: fmt.Errorf(`ent: validator failed for field "BonusItem.bcmb_notify_id": %w`, err)}
		}
	}
	if _, ok := bic.mutation.BcmbTransCode(); !ok {
		return &ValidationError{Name: "bcmb_trans_code", err: errors.New(`ent: missing required field "BonusItem.bcmb_trans_code"`)}
	}
	if v, ok := bic.mutation.BcmbTransCode(); ok {
		if err := bonusitem.BcmbTransCodeValidator(v); err != nil {
			return &ValidationError{Name: "bcmb_trans_code", err: fmt.Errorf(`ent: validator failed for field "BonusItem.bcmb_trans_code": %w`, err)}
		}
	}
	if _, ok := bic.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "BonusItem.amount"`)}
	}
	if _, ok := bic.mutation.BcmbTransTime(); !ok {
		return &ValidationError{Name: "bcmb_trans_time", err: errors.New(`ent: missing required field "BonusItem.bcmb_trans_time"`)}
	}
	if _, ok := bic.mutation.CreateTs(); !ok {
		return &ValidationError{Name: "create_ts", err: errors.New(`ent: missing required field "BonusItem.create_ts"`)}
	}
	if v, ok := bic.mutation.BcmbTransPayCode(); ok {
		if err := bonusitem.BcmbTransPayCodeValidator(v); err != nil {
			return &ValidationError{Name: "bcmb_trans_pay_code", err: fmt.Errorf(`ent: validator failed for field "BonusItem.bcmb_trans_pay_code": %w`, err)}
		}
	}
	if _, ok := bic.mutation.BcmbTransType(); !ok {
		return &ValidationError{Name: "bcmb_trans_type", err: errors.New(`ent: missing required field "BonusItem.bcmb_trans_type"`)}
	}
	if _, ok := bic.mutation.Bonus(); !ok {
		return &ValidationError{Name: "bonus", err: errors.New(`ent: missing required field "BonusItem.bonus"`)}
	}
	if _, ok := bic.mutation.BonusRate(); !ok {
		return &ValidationError{Name: "bonus_rate", err: errors.New(`ent: missing required field "BonusItem.bonus_rate"`)}
	}
	if _, ok := bic.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "BonusItem.status"`)}
	}
	return nil
}

func (bic *BonusItemCreate) sqlSave(ctx context.Context) (*BonusItem, error) {
	if err := bic.check(); err != nil {
		return nil, err
	}
	_node, _spec := bic.createSpec()
	if err := sqlgraph.CreateNode(ctx, bic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	bic.mutation.id = &_node.ID
	bic.mutation.done = true
	return _node, nil
}

func (bic *BonusItemCreate) createSpec() (*BonusItem, *sqlgraph.CreateSpec) {
	var (
		_node = &BonusItem{config: bic.config}
		_spec = sqlgraph.NewCreateSpec(bonusitem.Table, sqlgraph.NewFieldSpec(bonusitem.FieldID, field.TypeInt))
	)
	_spec.OnConflict = bic.conflict
	if value, ok := bic.mutation.CreateTime(); ok {
		_spec.SetField(bonusitem.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := bic.mutation.UpdateTime(); ok {
		_spec.SetField(bonusitem.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := bic.mutation.Code(); ok {
		_spec.SetField(bonusitem.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := bic.mutation.MchID(); ok {
		_spec.SetField(bonusitem.FieldMchID, field.TypeString, value)
		_node.MchID = value
	}
	if value, ok := bic.mutation.MallCode(); ok {
		_spec.SetField(bonusitem.FieldMallCode, field.TypeString, value)
		_node.MallCode = value
	}
	if value, ok := bic.mutation.MallName(); ok {
		_spec.SetField(bonusitem.FieldMallName, field.TypeString, value)
		_node.MallName = value
	}
	if value, ok := bic.mutation.ShopCode(); ok {
		_spec.SetField(bonusitem.FieldShopCode, field.TypeString, value)
		_node.ShopCode = value
	}
	if value, ok := bic.mutation.ShopName(); ok {
		_spec.SetField(bonusitem.FieldShopName, field.TypeString, value)
		_node.ShopName = value
	}
	if value, ok := bic.mutation.MemberCode(); ok {
		_spec.SetField(bonusitem.FieldMemberCode, field.TypeString, value)
		_node.MemberCode = value
	}
	if value, ok := bic.mutation.WxOpenID(); ok {
		_spec.SetField(bonusitem.FieldWxOpenID, field.TypeString, value)
		_node.WxOpenID = value
	}
	if value, ok := bic.mutation.BcmbNotifyTime(); ok {
		_spec.SetField(bonusitem.FieldBcmbNotifyTime, field.TypeTime, value)
		_node.BcmbNotifyTime = value
	}
	if value, ok := bic.mutation.BcmbNotifyID(); ok {
		_spec.SetField(bonusitem.FieldBcmbNotifyID, field.TypeString, value)
		_node.BcmbNotifyID = value
	}
	if value, ok := bic.mutation.BcmbTransCode(); ok {
		_spec.SetField(bonusitem.FieldBcmbTransCode, field.TypeString, value)
		_node.BcmbTransCode = value
	}
	if value, ok := bic.mutation.Amount(); ok {
		_spec.SetField(bonusitem.FieldAmount, field.TypeInt, value)
		_node.Amount = value
	}
	if value, ok := bic.mutation.BcmbTransTime(); ok {
		_spec.SetField(bonusitem.FieldBcmbTransTime, field.TypeTime, value)
		_node.BcmbTransTime = value
	}
	if value, ok := bic.mutation.CreateTs(); ok {
		_spec.SetField(bonusitem.FieldCreateTs, field.TypeInt64, value)
		_node.CreateTs = value
	}
	if value, ok := bic.mutation.BcmbTransPayCode(); ok {
		_spec.SetField(bonusitem.FieldBcmbTransPayCode, field.TypeString, value)
		_node.BcmbTransPayCode = value
	}
	if value, ok := bic.mutation.BcmbTransType(); ok {
		_spec.SetField(bonusitem.FieldBcmbTransType, field.TypeInt, value)
		_node.BcmbTransType = value
	}
	if value, ok := bic.mutation.Bonus(); ok {
		_spec.SetField(bonusitem.FieldBonus, field.TypeInt, value)
		_node.Bonus = value
	}
	if value, ok := bic.mutation.BonusRate(); ok {
		_spec.SetField(bonusitem.FieldBonusRate, field.TypeInt32, value)
		_node.BonusRate = value
	}
	if value, ok := bic.mutation.Status(); ok {
		_spec.SetField(bonusitem.FieldStatus, field.TypeInt32, value)
		_node.Status = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BonusItem.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BonusItemUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (bic *BonusItemCreate) OnConflict(opts ...sql.ConflictOption) *BonusItemUpsertOne {
	bic.conflict = opts
	return &BonusItemUpsertOne{
		create: bic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BonusItem.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bic *BonusItemCreate) OnConflictColumns(columns ...string) *BonusItemUpsertOne {
	bic.conflict = append(bic.conflict, sql.ConflictColumns(columns...))
	return &BonusItemUpsertOne{
		create: bic,
	}
}

type (
	// BonusItemUpsertOne is the builder for "upsert"-ing
	//  one BonusItem node.
	BonusItemUpsertOne struct {
		create *BonusItemCreate
	}

	// BonusItemUpsert is the "OnConflict" setter.
	BonusItemUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *BonusItemUpsert) SetUpdateTime(v time.Time) *BonusItemUpsert {
	u.Set(bonusitem.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *BonusItemUpsert) UpdateUpdateTime() *BonusItemUpsert {
	u.SetExcluded(bonusitem.FieldUpdateTime)
	return u
}

// SetBcmbNotifyID sets the "bcmb_notify_id" field.
func (u *BonusItemUpsert) SetBcmbNotifyID(v string) *BonusItemUpsert {
	u.Set(bonusitem.FieldBcmbNotifyID, v)
	return u
}

// UpdateBcmbNotifyID sets the "bcmb_notify_id" field to the value that was provided on create.
func (u *BonusItemUpsert) UpdateBcmbNotifyID() *BonusItemUpsert {
	u.SetExcluded(bonusitem.FieldBcmbNotifyID)
	return u
}

// ClearBcmbNotifyID clears the value of the "bcmb_notify_id" field.
func (u *BonusItemUpsert) ClearBcmbNotifyID() *BonusItemUpsert {
	u.SetNull(bonusitem.FieldBcmbNotifyID)
	return u
}

// SetBcmbTransCode sets the "bcmb_trans_code" field.
func (u *BonusItemUpsert) SetBcmbTransCode(v string) *BonusItemUpsert {
	u.Set(bonusitem.FieldBcmbTransCode, v)
	return u
}

// UpdateBcmbTransCode sets the "bcmb_trans_code" field to the value that was provided on create.
func (u *BonusItemUpsert) UpdateBcmbTransCode() *BonusItemUpsert {
	u.SetExcluded(bonusitem.FieldBcmbTransCode)
	return u
}

// SetBcmbTransPayCode sets the "bcmb_trans_pay_code" field.
func (u *BonusItemUpsert) SetBcmbTransPayCode(v string) *BonusItemUpsert {
	u.Set(bonusitem.FieldBcmbTransPayCode, v)
	return u
}

// UpdateBcmbTransPayCode sets the "bcmb_trans_pay_code" field to the value that was provided on create.
func (u *BonusItemUpsert) UpdateBcmbTransPayCode() *BonusItemUpsert {
	u.SetExcluded(bonusitem.FieldBcmbTransPayCode)
	return u
}

// ClearBcmbTransPayCode clears the value of the "bcmb_trans_pay_code" field.
func (u *BonusItemUpsert) ClearBcmbTransPayCode() *BonusItemUpsert {
	u.SetNull(bonusitem.FieldBcmbTransPayCode)
	return u
}

// SetBonusRate sets the "bonus_rate" field.
func (u *BonusItemUpsert) SetBonusRate(v int32) *BonusItemUpsert {
	u.Set(bonusitem.FieldBonusRate, v)
	return u
}

// UpdateBonusRate sets the "bonus_rate" field to the value that was provided on create.
func (u *BonusItemUpsert) UpdateBonusRate() *BonusItemUpsert {
	u.SetExcluded(bonusitem.FieldBonusRate)
	return u
}

// AddBonusRate adds v to the "bonus_rate" field.
func (u *BonusItemUpsert) AddBonusRate(v int32) *BonusItemUpsert {
	u.Add(bonusitem.FieldBonusRate, v)
	return u
}

// SetStatus sets the "status" field.
func (u *BonusItemUpsert) SetStatus(v int32) *BonusItemUpsert {
	u.Set(bonusitem.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *BonusItemUpsert) UpdateStatus() *BonusItemUpsert {
	u.SetExcluded(bonusitem.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *BonusItemUpsert) AddStatus(v int32) *BonusItemUpsert {
	u.Add(bonusitem.FieldStatus, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.BonusItem.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BonusItemUpsertOne) UpdateNewValues() *BonusItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(bonusitem.FieldCreateTime)
		}
		if _, exists := u.create.mutation.Code(); exists {
			s.SetIgnore(bonusitem.FieldCode)
		}
		if _, exists := u.create.mutation.MchID(); exists {
			s.SetIgnore(bonusitem.FieldMchID)
		}
		if _, exists := u.create.mutation.MallCode(); exists {
			s.SetIgnore(bonusitem.FieldMallCode)
		}
		if _, exists := u.create.mutation.MallName(); exists {
			s.SetIgnore(bonusitem.FieldMallName)
		}
		if _, exists := u.create.mutation.ShopCode(); exists {
			s.SetIgnore(bonusitem.FieldShopCode)
		}
		if _, exists := u.create.mutation.ShopName(); exists {
			s.SetIgnore(bonusitem.FieldShopName)
		}
		if _, exists := u.create.mutation.MemberCode(); exists {
			s.SetIgnore(bonusitem.FieldMemberCode)
		}
		if _, exists := u.create.mutation.WxOpenID(); exists {
			s.SetIgnore(bonusitem.FieldWxOpenID)
		}
		if _, exists := u.create.mutation.BcmbNotifyTime(); exists {
			s.SetIgnore(bonusitem.FieldBcmbNotifyTime)
		}
		if _, exists := u.create.mutation.Amount(); exists {
			s.SetIgnore(bonusitem.FieldAmount)
		}
		if _, exists := u.create.mutation.BcmbTransTime(); exists {
			s.SetIgnore(bonusitem.FieldBcmbTransTime)
		}
		if _, exists := u.create.mutation.CreateTs(); exists {
			s.SetIgnore(bonusitem.FieldCreateTs)
		}
		if _, exists := u.create.mutation.BcmbTransType(); exists {
			s.SetIgnore(bonusitem.FieldBcmbTransType)
		}
		if _, exists := u.create.mutation.Bonus(); exists {
			s.SetIgnore(bonusitem.FieldBonus)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BonusItem.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BonusItemUpsertOne) Ignore() *BonusItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BonusItemUpsertOne) DoNothing() *BonusItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BonusItemCreate.OnConflict
// documentation for more info.
func (u *BonusItemUpsertOne) Update(set func(*BonusItemUpsert)) *BonusItemUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BonusItemUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *BonusItemUpsertOne) SetUpdateTime(v time.Time) *BonusItemUpsertOne {
	return u.Update(func(s *BonusItemUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *BonusItemUpsertOne) UpdateUpdateTime() *BonusItemUpsertOne {
	return u.Update(func(s *BonusItemUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetBcmbNotifyID sets the "bcmb_notify_id" field.
func (u *BonusItemUpsertOne) SetBcmbNotifyID(v string) *BonusItemUpsertOne {
	return u.Update(func(s *BonusItemUpsert) {
		s.SetBcmbNotifyID(v)
	})
}

// UpdateBcmbNotifyID sets the "bcmb_notify_id" field to the value that was provided on create.
func (u *BonusItemUpsertOne) UpdateBcmbNotifyID() *BonusItemUpsertOne {
	return u.Update(func(s *BonusItemUpsert) {
		s.UpdateBcmbNotifyID()
	})
}

// ClearBcmbNotifyID clears the value of the "bcmb_notify_id" field.
func (u *BonusItemUpsertOne) ClearBcmbNotifyID() *BonusItemUpsertOne {
	return u.Update(func(s *BonusItemUpsert) {
		s.ClearBcmbNotifyID()
	})
}

// SetBcmbTransCode sets the "bcmb_trans_code" field.
func (u *BonusItemUpsertOne) SetBcmbTransCode(v string) *BonusItemUpsertOne {
	return u.Update(func(s *BonusItemUpsert) {
		s.SetBcmbTransCode(v)
	})
}

// UpdateBcmbTransCode sets the "bcmb_trans_code" field to the value that was provided on create.
func (u *BonusItemUpsertOne) UpdateBcmbTransCode() *BonusItemUpsertOne {
	return u.Update(func(s *BonusItemUpsert) {
		s.UpdateBcmbTransCode()
	})
}

// SetBcmbTransPayCode sets the "bcmb_trans_pay_code" field.
func (u *BonusItemUpsertOne) SetBcmbTransPayCode(v string) *BonusItemUpsertOne {
	return u.Update(func(s *BonusItemUpsert) {
		s.SetBcmbTransPayCode(v)
	})
}

// UpdateBcmbTransPayCode sets the "bcmb_trans_pay_code" field to the value that was provided on create.
func (u *BonusItemUpsertOne) UpdateBcmbTransPayCode() *BonusItemUpsertOne {
	return u.Update(func(s *BonusItemUpsert) {
		s.UpdateBcmbTransPayCode()
	})
}

// ClearBcmbTransPayCode clears the value of the "bcmb_trans_pay_code" field.
func (u *BonusItemUpsertOne) ClearBcmbTransPayCode() *BonusItemUpsertOne {
	return u.Update(func(s *BonusItemUpsert) {
		s.ClearBcmbTransPayCode()
	})
}

// SetBonusRate sets the "bonus_rate" field.
func (u *BonusItemUpsertOne) SetBonusRate(v int32) *BonusItemUpsertOne {
	return u.Update(func(s *BonusItemUpsert) {
		s.SetBonusRate(v)
	})
}

// AddBonusRate adds v to the "bonus_rate" field.
func (u *BonusItemUpsertOne) AddBonusRate(v int32) *BonusItemUpsertOne {
	return u.Update(func(s *BonusItemUpsert) {
		s.AddBonusRate(v)
	})
}

// UpdateBonusRate sets the "bonus_rate" field to the value that was provided on create.
func (u *BonusItemUpsertOne) UpdateBonusRate() *BonusItemUpsertOne {
	return u.Update(func(s *BonusItemUpsert) {
		s.UpdateBonusRate()
	})
}

// SetStatus sets the "status" field.
func (u *BonusItemUpsertOne) SetStatus(v int32) *BonusItemUpsertOne {
	return u.Update(func(s *BonusItemUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *BonusItemUpsertOne) AddStatus(v int32) *BonusItemUpsertOne {
	return u.Update(func(s *BonusItemUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *BonusItemUpsertOne) UpdateStatus() *BonusItemUpsertOne {
	return u.Update(func(s *BonusItemUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *BonusItemUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BonusItemCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BonusItemUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BonusItemUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BonusItemUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BonusItemCreateBulk is the builder for creating many BonusItem entities in bulk.
type BonusItemCreateBulk struct {
	config
	err      error
	builders []*BonusItemCreate
	conflict []sql.ConflictOption
}

// Save creates the BonusItem entities in the database.
func (bicb *BonusItemCreateBulk) Save(ctx context.Context) ([]*BonusItem, error) {
	if bicb.err != nil {
		return nil, bicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bicb.builders))
	nodes := make([]*BonusItem, len(bicb.builders))
	mutators := make([]Mutator, len(bicb.builders))
	for i := range bicb.builders {
		func(i int, root context.Context) {
			builder := bicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BonusItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bicb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bicb *BonusItemCreateBulk) SaveX(ctx context.Context) []*BonusItem {
	v, err := bicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bicb *BonusItemCreateBulk) Exec(ctx context.Context) error {
	_, err := bicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bicb *BonusItemCreateBulk) ExecX(ctx context.Context) {
	if err := bicb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.BonusItem.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BonusItemUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (bicb *BonusItemCreateBulk) OnConflict(opts ...sql.ConflictOption) *BonusItemUpsertBulk {
	bicb.conflict = opts
	return &BonusItemUpsertBulk{
		create: bicb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.BonusItem.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bicb *BonusItemCreateBulk) OnConflictColumns(columns ...string) *BonusItemUpsertBulk {
	bicb.conflict = append(bicb.conflict, sql.ConflictColumns(columns...))
	return &BonusItemUpsertBulk{
		create: bicb,
	}
}

// BonusItemUpsertBulk is the builder for "upsert"-ing
// a bulk of BonusItem nodes.
type BonusItemUpsertBulk struct {
	create *BonusItemCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.BonusItem.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BonusItemUpsertBulk) UpdateNewValues() *BonusItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(bonusitem.FieldCreateTime)
			}
			if _, exists := b.mutation.Code(); exists {
				s.SetIgnore(bonusitem.FieldCode)
			}
			if _, exists := b.mutation.MchID(); exists {
				s.SetIgnore(bonusitem.FieldMchID)
			}
			if _, exists := b.mutation.MallCode(); exists {
				s.SetIgnore(bonusitem.FieldMallCode)
			}
			if _, exists := b.mutation.MallName(); exists {
				s.SetIgnore(bonusitem.FieldMallName)
			}
			if _, exists := b.mutation.ShopCode(); exists {
				s.SetIgnore(bonusitem.FieldShopCode)
			}
			if _, exists := b.mutation.ShopName(); exists {
				s.SetIgnore(bonusitem.FieldShopName)
			}
			if _, exists := b.mutation.MemberCode(); exists {
				s.SetIgnore(bonusitem.FieldMemberCode)
			}
			if _, exists := b.mutation.WxOpenID(); exists {
				s.SetIgnore(bonusitem.FieldWxOpenID)
			}
			if _, exists := b.mutation.BcmbNotifyTime(); exists {
				s.SetIgnore(bonusitem.FieldBcmbNotifyTime)
			}
			if _, exists := b.mutation.Amount(); exists {
				s.SetIgnore(bonusitem.FieldAmount)
			}
			if _, exists := b.mutation.BcmbTransTime(); exists {
				s.SetIgnore(bonusitem.FieldBcmbTransTime)
			}
			if _, exists := b.mutation.CreateTs(); exists {
				s.SetIgnore(bonusitem.FieldCreateTs)
			}
			if _, exists := b.mutation.BcmbTransType(); exists {
				s.SetIgnore(bonusitem.FieldBcmbTransType)
			}
			if _, exists := b.mutation.Bonus(); exists {
				s.SetIgnore(bonusitem.FieldBonus)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.BonusItem.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BonusItemUpsertBulk) Ignore() *BonusItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BonusItemUpsertBulk) DoNothing() *BonusItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BonusItemCreateBulk.OnConflict
// documentation for more info.
func (u *BonusItemUpsertBulk) Update(set func(*BonusItemUpsert)) *BonusItemUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BonusItemUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *BonusItemUpsertBulk) SetUpdateTime(v time.Time) *BonusItemUpsertBulk {
	return u.Update(func(s *BonusItemUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *BonusItemUpsertBulk) UpdateUpdateTime() *BonusItemUpsertBulk {
	return u.Update(func(s *BonusItemUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetBcmbNotifyID sets the "bcmb_notify_id" field.
func (u *BonusItemUpsertBulk) SetBcmbNotifyID(v string) *BonusItemUpsertBulk {
	return u.Update(func(s *BonusItemUpsert) {
		s.SetBcmbNotifyID(v)
	})
}

// UpdateBcmbNotifyID sets the "bcmb_notify_id" field to the value that was provided on create.
func (u *BonusItemUpsertBulk) UpdateBcmbNotifyID() *BonusItemUpsertBulk {
	return u.Update(func(s *BonusItemUpsert) {
		s.UpdateBcmbNotifyID()
	})
}

// ClearBcmbNotifyID clears the value of the "bcmb_notify_id" field.
func (u *BonusItemUpsertBulk) ClearBcmbNotifyID() *BonusItemUpsertBulk {
	return u.Update(func(s *BonusItemUpsert) {
		s.ClearBcmbNotifyID()
	})
}

// SetBcmbTransCode sets the "bcmb_trans_code" field.
func (u *BonusItemUpsertBulk) SetBcmbTransCode(v string) *BonusItemUpsertBulk {
	return u.Update(func(s *BonusItemUpsert) {
		s.SetBcmbTransCode(v)
	})
}

// UpdateBcmbTransCode sets the "bcmb_trans_code" field to the value that was provided on create.
func (u *BonusItemUpsertBulk) UpdateBcmbTransCode() *BonusItemUpsertBulk {
	return u.Update(func(s *BonusItemUpsert) {
		s.UpdateBcmbTransCode()
	})
}

// SetBcmbTransPayCode sets the "bcmb_trans_pay_code" field.
func (u *BonusItemUpsertBulk) SetBcmbTransPayCode(v string) *BonusItemUpsertBulk {
	return u.Update(func(s *BonusItemUpsert) {
		s.SetBcmbTransPayCode(v)
	})
}

// UpdateBcmbTransPayCode sets the "bcmb_trans_pay_code" field to the value that was provided on create.
func (u *BonusItemUpsertBulk) UpdateBcmbTransPayCode() *BonusItemUpsertBulk {
	return u.Update(func(s *BonusItemUpsert) {
		s.UpdateBcmbTransPayCode()
	})
}

// ClearBcmbTransPayCode clears the value of the "bcmb_trans_pay_code" field.
func (u *BonusItemUpsertBulk) ClearBcmbTransPayCode() *BonusItemUpsertBulk {
	return u.Update(func(s *BonusItemUpsert) {
		s.ClearBcmbTransPayCode()
	})
}

// SetBonusRate sets the "bonus_rate" field.
func (u *BonusItemUpsertBulk) SetBonusRate(v int32) *BonusItemUpsertBulk {
	return u.Update(func(s *BonusItemUpsert) {
		s.SetBonusRate(v)
	})
}

// AddBonusRate adds v to the "bonus_rate" field.
func (u *BonusItemUpsertBulk) AddBonusRate(v int32) *BonusItemUpsertBulk {
	return u.Update(func(s *BonusItemUpsert) {
		s.AddBonusRate(v)
	})
}

// UpdateBonusRate sets the "bonus_rate" field to the value that was provided on create.
func (u *BonusItemUpsertBulk) UpdateBonusRate() *BonusItemUpsertBulk {
	return u.Update(func(s *BonusItemUpsert) {
		s.UpdateBonusRate()
	})
}

// SetStatus sets the "status" field.
func (u *BonusItemUpsertBulk) SetStatus(v int32) *BonusItemUpsertBulk {
	return u.Update(func(s *BonusItemUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *BonusItemUpsertBulk) AddStatus(v int32) *BonusItemUpsertBulk {
	return u.Update(func(s *BonusItemUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *BonusItemUpsertBulk) UpdateStatus() *BonusItemUpsertBulk {
	return u.Update(func(s *BonusItemUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *BonusItemUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BonusItemCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BonusItemCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BonusItemUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
