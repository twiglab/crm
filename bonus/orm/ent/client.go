// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/twiglab/crm/bonus/orm/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"github.com/twiglab/crm/bonus/orm/ent/bonusacc"
	"github.com/twiglab/crm/bonus/orm/ent/bonusitem"

	stdsql "database/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// BonusAcc is the client for interacting with the BonusAcc builders.
	BonusAcc *BonusAccClient
	// BonusItem is the client for interacting with the BonusItem builders.
	BonusItem *BonusItemClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.BonusAcc = NewBonusAccClient(c.config)
	c.BonusItem = NewBonusItemClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:       ctx,
		config:    cfg,
		BonusAcc:  NewBonusAccClient(cfg),
		BonusItem: NewBonusItemClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:       ctx,
		config:    cfg,
		BonusAcc:  NewBonusAccClient(cfg),
		BonusItem: NewBonusItemClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		BonusAcc.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.BonusAcc.Use(hooks...)
	c.BonusItem.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.BonusAcc.Intercept(interceptors...)
	c.BonusItem.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *BonusAccMutation:
		return c.BonusAcc.mutate(ctx, m)
	case *BonusItemMutation:
		return c.BonusItem.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// BonusAccClient is a client for the BonusAcc schema.
type BonusAccClient struct {
	config
}

// NewBonusAccClient returns a client for the BonusAcc from the given config.
func NewBonusAccClient(c config) *BonusAccClient {
	return &BonusAccClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `bonusacc.Hooks(f(g(h())))`.
func (c *BonusAccClient) Use(hooks ...Hook) {
	c.hooks.BonusAcc = append(c.hooks.BonusAcc, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `bonusacc.Intercept(f(g(h())))`.
func (c *BonusAccClient) Intercept(interceptors ...Interceptor) {
	c.inters.BonusAcc = append(c.inters.BonusAcc, interceptors...)
}

// Create returns a builder for creating a BonusAcc entity.
func (c *BonusAccClient) Create() *BonusAccCreate {
	mutation := newBonusAccMutation(c.config, OpCreate)
	return &BonusAccCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BonusAcc entities.
func (c *BonusAccClient) CreateBulk(builders ...*BonusAccCreate) *BonusAccCreateBulk {
	return &BonusAccCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BonusAccClient) MapCreateBulk(slice any, setFunc func(*BonusAccCreate, int)) *BonusAccCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BonusAccCreateBulk{err: fmt.Errorf("calling to BonusAccClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BonusAccCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BonusAccCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BonusAcc.
func (c *BonusAccClient) Update() *BonusAccUpdate {
	mutation := newBonusAccMutation(c.config, OpUpdate)
	return &BonusAccUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BonusAccClient) UpdateOne(ba *BonusAcc) *BonusAccUpdateOne {
	mutation := newBonusAccMutation(c.config, OpUpdateOne, withBonusAcc(ba))
	return &BonusAccUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BonusAccClient) UpdateOneID(id int) *BonusAccUpdateOne {
	mutation := newBonusAccMutation(c.config, OpUpdateOne, withBonusAccID(id))
	return &BonusAccUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BonusAcc.
func (c *BonusAccClient) Delete() *BonusAccDelete {
	mutation := newBonusAccMutation(c.config, OpDelete)
	return &BonusAccDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BonusAccClient) DeleteOne(ba *BonusAcc) *BonusAccDeleteOne {
	return c.DeleteOneID(ba.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BonusAccClient) DeleteOneID(id int) *BonusAccDeleteOne {
	builder := c.Delete().Where(bonusacc.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BonusAccDeleteOne{builder}
}

// Query returns a query builder for BonusAcc.
func (c *BonusAccClient) Query() *BonusAccQuery {
	return &BonusAccQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBonusAcc},
		inters: c.Interceptors(),
	}
}

// Get returns a BonusAcc entity by its id.
func (c *BonusAccClient) Get(ctx context.Context, id int) (*BonusAcc, error) {
	return c.Query().Where(bonusacc.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BonusAccClient) GetX(ctx context.Context, id int) *BonusAcc {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *BonusAccClient) Hooks() []Hook {
	return c.hooks.BonusAcc
}

// Interceptors returns the client interceptors.
func (c *BonusAccClient) Interceptors() []Interceptor {
	return c.inters.BonusAcc
}

func (c *BonusAccClient) mutate(ctx context.Context, m *BonusAccMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BonusAccCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BonusAccUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BonusAccUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BonusAccDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown BonusAcc mutation op: %q", m.Op())
	}
}

// BonusItemClient is a client for the BonusItem schema.
type BonusItemClient struct {
	config
}

// NewBonusItemClient returns a client for the BonusItem from the given config.
func NewBonusItemClient(c config) *BonusItemClient {
	return &BonusItemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `bonusitem.Hooks(f(g(h())))`.
func (c *BonusItemClient) Use(hooks ...Hook) {
	c.hooks.BonusItem = append(c.hooks.BonusItem, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `bonusitem.Intercept(f(g(h())))`.
func (c *BonusItemClient) Intercept(interceptors ...Interceptor) {
	c.inters.BonusItem = append(c.inters.BonusItem, interceptors...)
}

// Create returns a builder for creating a BonusItem entity.
func (c *BonusItemClient) Create() *BonusItemCreate {
	mutation := newBonusItemMutation(c.config, OpCreate)
	return &BonusItemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BonusItem entities.
func (c *BonusItemClient) CreateBulk(builders ...*BonusItemCreate) *BonusItemCreateBulk {
	return &BonusItemCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *BonusItemClient) MapCreateBulk(slice any, setFunc func(*BonusItemCreate, int)) *BonusItemCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &BonusItemCreateBulk{err: fmt.Errorf("calling to BonusItemClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*BonusItemCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &BonusItemCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BonusItem.
func (c *BonusItemClient) Update() *BonusItemUpdate {
	mutation := newBonusItemMutation(c.config, OpUpdate)
	return &BonusItemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BonusItemClient) UpdateOne(bi *BonusItem) *BonusItemUpdateOne {
	mutation := newBonusItemMutation(c.config, OpUpdateOne, withBonusItem(bi))
	return &BonusItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BonusItemClient) UpdateOneID(id int) *BonusItemUpdateOne {
	mutation := newBonusItemMutation(c.config, OpUpdateOne, withBonusItemID(id))
	return &BonusItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BonusItem.
func (c *BonusItemClient) Delete() *BonusItemDelete {
	mutation := newBonusItemMutation(c.config, OpDelete)
	return &BonusItemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BonusItemClient) DeleteOne(bi *BonusItem) *BonusItemDeleteOne {
	return c.DeleteOneID(bi.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *BonusItemClient) DeleteOneID(id int) *BonusItemDeleteOne {
	builder := c.Delete().Where(bonusitem.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BonusItemDeleteOne{builder}
}

// Query returns a query builder for BonusItem.
func (c *BonusItemClient) Query() *BonusItemQuery {
	return &BonusItemQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeBonusItem},
		inters: c.Interceptors(),
	}
}

// Get returns a BonusItem entity by its id.
func (c *BonusItemClient) Get(ctx context.Context, id int) (*BonusItem, error) {
	return c.Query().Where(bonusitem.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BonusItemClient) GetX(ctx context.Context, id int) *BonusItem {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *BonusItemClient) Hooks() []Hook {
	return c.hooks.BonusItem
}

// Interceptors returns the client interceptors.
func (c *BonusItemClient) Interceptors() []Interceptor {
	return c.inters.BonusItem
}

func (c *BonusItemClient) mutate(ctx context.Context, m *BonusItemMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&BonusItemCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&BonusItemUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&BonusItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&BonusItemDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown BonusItem mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		BonusAcc, BonusItem []ent.Hook
	}
	inters struct {
		BonusAcc, BonusItem []ent.Interceptor
	}
)

// ExecContext allows calling the underlying ExecContext method of the driver if it is supported by it.
// See, database/sql#DB.ExecContext for more information.
func (c *config) ExecContext(ctx context.Context, query string, args ...any) (stdsql.Result, error) {
	ex, ok := c.driver.(interface {
		ExecContext(context.Context, string, ...any) (stdsql.Result, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.ExecContext is not supported")
	}
	return ex.ExecContext(ctx, query, args...)
}

// QueryContext allows calling the underlying QueryContext method of the driver if it is supported by it.
// See, database/sql#DB.QueryContext for more information.
func (c *config) QueryContext(ctx context.Context, query string, args ...any) (*stdsql.Rows, error) {
	q, ok := c.driver.(interface {
		QueryContext(context.Context, string, ...any) (*stdsql.Rows, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.QueryContext is not supported")
	}
	return q.QueryContext(ctx, query, args...)
}
