// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/twiglab/crm/bonus/orm/ent/bonusitem"
)

// BonusItem is the model entity for the BonusItem schema.
type BonusItem struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// MchID holds the value of the "mch_id" field.
	MchID string `json:"mch_id,omitempty"`
	// MallCode holds the value of the "mall_code" field.
	MallCode string `json:"mall_code,omitempty"`
	// MallName holds the value of the "mall_name" field.
	MallName string `json:"mall_name,omitempty"`
	// ShopCode holds the value of the "shop_code" field.
	ShopCode string `json:"shop_code,omitempty"`
	// ShopName holds the value of the "shop_name" field.
	ShopName string `json:"shop_name,omitempty"`
	// MemberCode holds the value of the "member_code" field.
	MemberCode string `json:"member_code,omitempty"`
	// WxOpenID holds the value of the "wx_open_id" field.
	WxOpenID string `json:"wx_open_id,omitempty"`
	// BcmbNotifyTime holds the value of the "bcmb_notify_time" field.
	BcmbNotifyTime time.Time `json:"bcmb_notify_time,omitempty"`
	// BcmbNotifyID holds the value of the "bcmb_notify_id" field.
	BcmbNotifyID string `json:"bcmb_notify_id,omitempty"`
	// BcmbTransCode holds the value of the "bcmb_trans_code" field.
	BcmbTransCode string `json:"bcmb_trans_code,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount int `json:"amount,omitempty"`
	// BcmbTransTime holds the value of the "bcmb_trans_time" field.
	BcmbTransTime time.Time `json:"bcmb_trans_time,omitempty"`
	// CreateTs holds the value of the "create_ts" field.
	CreateTs int64 `json:"create_ts,omitempty"`
	// BcmbTransPayCode holds the value of the "bcmb_trans_pay_code" field.
	BcmbTransPayCode string `json:"bcmb_trans_pay_code,omitempty"`
	// BcmbTransType holds the value of the "bcmb_trans_type" field.
	BcmbTransType int `json:"bcmb_trans_type,omitempty"`
	// Bonus holds the value of the "bonus" field.
	Bonus int `json:"bonus,omitempty"`
	// 积分比例
	BonusRate int32 `json:"bonus_rate,omitempty"`
	// Status holds the value of the "status" field.
	Status       int `json:"status,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BonusItem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case bonusitem.FieldID, bonusitem.FieldAmount, bonusitem.FieldCreateTs, bonusitem.FieldBcmbTransType, bonusitem.FieldBonus, bonusitem.FieldBonusRate, bonusitem.FieldStatus:
			values[i] = new(sql.NullInt64)
		case bonusitem.FieldCode, bonusitem.FieldMchID, bonusitem.FieldMallCode, bonusitem.FieldMallName, bonusitem.FieldShopCode, bonusitem.FieldShopName, bonusitem.FieldMemberCode, bonusitem.FieldWxOpenID, bonusitem.FieldBcmbNotifyID, bonusitem.FieldBcmbTransCode, bonusitem.FieldBcmbTransPayCode:
			values[i] = new(sql.NullString)
		case bonusitem.FieldCreateTime, bonusitem.FieldUpdateTime, bonusitem.FieldBcmbNotifyTime, bonusitem.FieldBcmbTransTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BonusItem fields.
func (bi *BonusItem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case bonusitem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			bi.ID = int(value.Int64)
		case bonusitem.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				bi.CreateTime = value.Time
			}
		case bonusitem.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				bi.UpdateTime = value.Time
			}
		case bonusitem.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				bi.Code = value.String
			}
		case bonusitem.FieldMchID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mch_id", values[i])
			} else if value.Valid {
				bi.MchID = value.String
			}
		case bonusitem.FieldMallCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mall_code", values[i])
			} else if value.Valid {
				bi.MallCode = value.String
			}
		case bonusitem.FieldMallName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mall_name", values[i])
			} else if value.Valid {
				bi.MallName = value.String
			}
		case bonusitem.FieldShopCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shop_code", values[i])
			} else if value.Valid {
				bi.ShopCode = value.String
			}
		case bonusitem.FieldShopName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shop_name", values[i])
			} else if value.Valid {
				bi.ShopName = value.String
			}
		case bonusitem.FieldMemberCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field member_code", values[i])
			} else if value.Valid {
				bi.MemberCode = value.String
			}
		case bonusitem.FieldWxOpenID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field wx_open_id", values[i])
			} else if value.Valid {
				bi.WxOpenID = value.String
			}
		case bonusitem.FieldBcmbNotifyTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field bcmb_notify_time", values[i])
			} else if value.Valid {
				bi.BcmbNotifyTime = value.Time
			}
		case bonusitem.FieldBcmbNotifyID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bcmb_notify_id", values[i])
			} else if value.Valid {
				bi.BcmbNotifyID = value.String
			}
		case bonusitem.FieldBcmbTransCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bcmb_trans_code", values[i])
			} else if value.Valid {
				bi.BcmbTransCode = value.String
			}
		case bonusitem.FieldAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				bi.Amount = int(value.Int64)
			}
		case bonusitem.FieldBcmbTransTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field bcmb_trans_time", values[i])
			} else if value.Valid {
				bi.BcmbTransTime = value.Time
			}
		case bonusitem.FieldCreateTs:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_ts", values[i])
			} else if value.Valid {
				bi.CreateTs = value.Int64
			}
		case bonusitem.FieldBcmbTransPayCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bcmb_trans_pay_code", values[i])
			} else if value.Valid {
				bi.BcmbTransPayCode = value.String
			}
		case bonusitem.FieldBcmbTransType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field bcmb_trans_type", values[i])
			} else if value.Valid {
				bi.BcmbTransType = int(value.Int64)
			}
		case bonusitem.FieldBonus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field bonus", values[i])
			} else if value.Valid {
				bi.Bonus = int(value.Int64)
			}
		case bonusitem.FieldBonusRate:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field bonus_rate", values[i])
			} else if value.Valid {
				bi.BonusRate = int32(value.Int64)
			}
		case bonusitem.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				bi.Status = int(value.Int64)
			}
		default:
			bi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BonusItem.
// This includes values selected through modifiers, order, etc.
func (bi *BonusItem) Value(name string) (ent.Value, error) {
	return bi.selectValues.Get(name)
}

// Update returns a builder for updating this BonusItem.
// Note that you need to call BonusItem.Unwrap() before calling this method if this BonusItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (bi *BonusItem) Update() *BonusItemUpdateOne {
	return NewBonusItemClient(bi.config).UpdateOne(bi)
}

// Unwrap unwraps the BonusItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bi *BonusItem) Unwrap() *BonusItem {
	_tx, ok := bi.config.driver.(*txDriver)
	if !ok {
		panic("ent: BonusItem is not a transactional entity")
	}
	bi.config.driver = _tx.drv
	return bi
}

// String implements the fmt.Stringer.
func (bi *BonusItem) String() string {
	var builder strings.Builder
	builder.WriteString("BonusItem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bi.ID))
	builder.WriteString("create_time=")
	builder.WriteString(bi.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(bi.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(bi.Code)
	builder.WriteString(", ")
	builder.WriteString("mch_id=")
	builder.WriteString(bi.MchID)
	builder.WriteString(", ")
	builder.WriteString("mall_code=")
	builder.WriteString(bi.MallCode)
	builder.WriteString(", ")
	builder.WriteString("mall_name=")
	builder.WriteString(bi.MallName)
	builder.WriteString(", ")
	builder.WriteString("shop_code=")
	builder.WriteString(bi.ShopCode)
	builder.WriteString(", ")
	builder.WriteString("shop_name=")
	builder.WriteString(bi.ShopName)
	builder.WriteString(", ")
	builder.WriteString("member_code=")
	builder.WriteString(bi.MemberCode)
	builder.WriteString(", ")
	builder.WriteString("wx_open_id=")
	builder.WriteString(bi.WxOpenID)
	builder.WriteString(", ")
	builder.WriteString("bcmb_notify_time=")
	builder.WriteString(bi.BcmbNotifyTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("bcmb_notify_id=")
	builder.WriteString(bi.BcmbNotifyID)
	builder.WriteString(", ")
	builder.WriteString("bcmb_trans_code=")
	builder.WriteString(bi.BcmbTransCode)
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", bi.Amount))
	builder.WriteString(", ")
	builder.WriteString("bcmb_trans_time=")
	builder.WriteString(bi.BcmbTransTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("create_ts=")
	builder.WriteString(fmt.Sprintf("%v", bi.CreateTs))
	builder.WriteString(", ")
	builder.WriteString("bcmb_trans_pay_code=")
	builder.WriteString(bi.BcmbTransPayCode)
	builder.WriteString(", ")
	builder.WriteString("bcmb_trans_type=")
	builder.WriteString(fmt.Sprintf("%v", bi.BcmbTransType))
	builder.WriteString(", ")
	builder.WriteString("bonus=")
	builder.WriteString(fmt.Sprintf("%v", bi.Bonus))
	builder.WriteString(", ")
	builder.WriteString("bonus_rate=")
	builder.WriteString(fmt.Sprintf("%v", bi.BonusRate))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", bi.Status))
	builder.WriteByte(')')
	return builder.String()
}

// BonusItems is a parsable slice of BonusItem.
type BonusItems []*BonusItem
