// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/twiglab/crm/member/orm/ent/member"
)

// MemberCreate is the builder for creating a Member entity.
type MemberCreate struct {
	config
	mutation *MemberMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreateTime sets the "create_time" field.
func (mc *MemberCreate) SetCreateTime(t time.Time) *MemberCreate {
	mc.mutation.SetCreateTime(t)
	return mc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (mc *MemberCreate) SetNillableCreateTime(t *time.Time) *MemberCreate {
	if t != nil {
		mc.SetCreateTime(*t)
	}
	return mc
}

// SetUpdateTime sets the "update_time" field.
func (mc *MemberCreate) SetUpdateTime(t time.Time) *MemberCreate {
	mc.mutation.SetUpdateTime(t)
	return mc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (mc *MemberCreate) SetNillableUpdateTime(t *time.Time) *MemberCreate {
	if t != nil {
		mc.SetUpdateTime(*t)
	}
	return mc
}

// SetCode sets the "code" field.
func (mc *MemberCreate) SetCode(s string) *MemberCreate {
	mc.mutation.SetCode(s)
	return mc
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (mc *MemberCreate) SetNillableCode(s *string) *MemberCreate {
	if s != nil {
		mc.SetCode(*s)
	}
	return mc
}

// SetCodeBin sets the "code_bin" field.
func (mc *MemberCreate) SetCodeBin(s string) *MemberCreate {
	mc.mutation.SetCodeBin(s)
	return mc
}

// SetNillableCodeBin sets the "code_bin" field if the given value is not nil.
func (mc *MemberCreate) SetNillableCodeBin(s *string) *MemberCreate {
	if s != nil {
		mc.SetCodeBin(*s)
	}
	return mc
}

// SetPhone sets the "phone" field.
func (mc *MemberCreate) SetPhone(s string) *MemberCreate {
	mc.mutation.SetPhone(s)
	return mc
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (mc *MemberCreate) SetNillablePhone(s *string) *MemberCreate {
	if s != nil {
		mc.SetPhone(*s)
	}
	return mc
}

// SetNickname sets the "nickname" field.
func (mc *MemberCreate) SetNickname(s string) *MemberCreate {
	mc.mutation.SetNickname(s)
	return mc
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (mc *MemberCreate) SetNillableNickname(s *string) *MemberCreate {
	if s != nil {
		mc.SetNickname(*s)
	}
	return mc
}

// SetWxOpenID sets the "wx_open_id" field.
func (mc *MemberCreate) SetWxOpenID(s string) *MemberCreate {
	mc.mutation.SetWxOpenID(s)
	return mc
}

// SetBcmbCode sets the "bcmb_code" field.
func (mc *MemberCreate) SetBcmbCode(s string) *MemberCreate {
	mc.mutation.SetBcmbCode(s)
	return mc
}

// SetNillableBcmbCode sets the "bcmb_code" field if the given value is not nil.
func (mc *MemberCreate) SetNillableBcmbCode(s *string) *MemberCreate {
	if s != nil {
		mc.SetBcmbCode(*s)
	}
	return mc
}

// SetBcmbRegTime sets the "bcmb_reg_time" field.
func (mc *MemberCreate) SetBcmbRegTime(t time.Time) *MemberCreate {
	mc.mutation.SetBcmbRegTime(t)
	return mc
}

// SetNillableBcmbRegTime sets the "bcmb_reg_time" field if the given value is not nil.
func (mc *MemberCreate) SetNillableBcmbRegTime(t *time.Time) *MemberCreate {
	if t != nil {
		mc.SetBcmbRegTime(*t)
	}
	return mc
}

// SetBcmbRegMsgID sets the "bcmb_reg_msg_id" field.
func (mc *MemberCreate) SetBcmbRegMsgID(s string) *MemberCreate {
	mc.mutation.SetBcmbRegMsgID(s)
	return mc
}

// SetNillableBcmbRegMsgID sets the "bcmb_reg_msg_id" field if the given value is not nil.
func (mc *MemberCreate) SetNillableBcmbRegMsgID(s *string) *MemberCreate {
	if s != nil {
		mc.SetBcmbRegMsgID(*s)
	}
	return mc
}

// SetBcmbType sets the "bcmb_type" field.
func (mc *MemberCreate) SetBcmbType(i int) *MemberCreate {
	mc.mutation.SetBcmbType(i)
	return mc
}

// SetNillableBcmbType sets the "bcmb_type" field if the given value is not nil.
func (mc *MemberCreate) SetNillableBcmbType(i *int) *MemberCreate {
	if i != nil {
		mc.SetBcmbType(*i)
	}
	return mc
}

// SetLevel sets the "level" field.
func (mc *MemberCreate) SetLevel(i int) *MemberCreate {
	mc.mutation.SetLevel(i)
	return mc
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (mc *MemberCreate) SetNillableLevel(i *int) *MemberCreate {
	if i != nil {
		mc.SetLevel(*i)
	}
	return mc
}

// SetSource sets the "source" field.
func (mc *MemberCreate) SetSource(i int) *MemberCreate {
	mc.mutation.SetSource(i)
	return mc
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (mc *MemberCreate) SetNillableSource(i *int) *MemberCreate {
	if i != nil {
		mc.SetSource(*i)
	}
	return mc
}

// SetLastTime sets the "last_time" field.
func (mc *MemberCreate) SetLastTime(t time.Time) *MemberCreate {
	mc.mutation.SetLastTime(t)
	return mc
}

// SetNillableLastTime sets the "last_time" field if the given value is not nil.
func (mc *MemberCreate) SetNillableLastTime(t *time.Time) *MemberCreate {
	if t != nil {
		mc.SetLastTime(*t)
	}
	return mc
}

// SetStatus sets the "status" field.
func (mc *MemberCreate) SetStatus(i int) *MemberCreate {
	mc.mutation.SetStatus(i)
	return mc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mc *MemberCreate) SetNillableStatus(i *int) *MemberCreate {
	if i != nil {
		mc.SetStatus(*i)
	}
	return mc
}

// Mutation returns the MemberMutation object of the builder.
func (mc *MemberCreate) Mutation() *MemberMutation {
	return mc.mutation
}

// Save creates the Member in the database.
func (mc *MemberCreate) Save(ctx context.Context) (*Member, error) {
	mc.defaults()
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MemberCreate) SaveX(ctx context.Context) *Member {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MemberCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MemberCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *MemberCreate) defaults() {
	if _, ok := mc.mutation.CreateTime(); !ok {
		v := member.DefaultCreateTime()
		mc.mutation.SetCreateTime(v)
	}
	if _, ok := mc.mutation.UpdateTime(); !ok {
		v := member.DefaultUpdateTime()
		mc.mutation.SetUpdateTime(v)
	}
	if _, ok := mc.mutation.Code(); !ok {
		v := member.DefaultCode()
		mc.mutation.SetCode(v)
	}
	if _, ok := mc.mutation.BcmbType(); !ok {
		v := member.DefaultBcmbType
		mc.mutation.SetBcmbType(v)
	}
	if _, ok := mc.mutation.Level(); !ok {
		v := member.DefaultLevel
		mc.mutation.SetLevel(v)
	}
	if _, ok := mc.mutation.Source(); !ok {
		v := member.DefaultSource
		mc.mutation.SetSource(v)
	}
	if _, ok := mc.mutation.LastTime(); !ok {
		v := member.DefaultLastTime()
		mc.mutation.SetLastTime(v)
	}
	if _, ok := mc.mutation.Status(); !ok {
		v := member.DefaultStatus
		mc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MemberCreate) check() error {
	if _, ok := mc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Member.create_time"`)}
	}
	if _, ok := mc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Member.update_time"`)}
	}
	if _, ok := mc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "Member.code"`)}
	}
	if v, ok := mc.mutation.Code(); ok {
		if err := member.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Member.code": %w`, err)}
		}
	}
	if v, ok := mc.mutation.CodeBin(); ok {
		if err := member.CodeBinValidator(v); err != nil {
			return &ValidationError{Name: "code_bin", err: fmt.Errorf(`ent: validator failed for field "Member.code_bin": %w`, err)}
		}
	}
	if v, ok := mc.mutation.Phone(); ok {
		if err := member.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "Member.phone": %w`, err)}
		}
	}
	if v, ok := mc.mutation.Nickname(); ok {
		if err := member.NicknameValidator(v); err != nil {
			return &ValidationError{Name: "nickname", err: fmt.Errorf(`ent: validator failed for field "Member.nickname": %w`, err)}
		}
	}
	if _, ok := mc.mutation.WxOpenID(); !ok {
		return &ValidationError{Name: "wx_open_id", err: errors.New(`ent: missing required field "Member.wx_open_id"`)}
	}
	if v, ok := mc.mutation.WxOpenID(); ok {
		if err := member.WxOpenIDValidator(v); err != nil {
			return &ValidationError{Name: "wx_open_id", err: fmt.Errorf(`ent: validator failed for field "Member.wx_open_id": %w`, err)}
		}
	}
	if v, ok := mc.mutation.BcmbCode(); ok {
		if err := member.BcmbCodeValidator(v); err != nil {
			return &ValidationError{Name: "bcmb_code", err: fmt.Errorf(`ent: validator failed for field "Member.bcmb_code": %w`, err)}
		}
	}
	if v, ok := mc.mutation.BcmbRegMsgID(); ok {
		if err := member.BcmbRegMsgIDValidator(v); err != nil {
			return &ValidationError{Name: "bcmb_reg_msg_id", err: fmt.Errorf(`ent: validator failed for field "Member.bcmb_reg_msg_id": %w`, err)}
		}
	}
	if _, ok := mc.mutation.BcmbType(); !ok {
		return &ValidationError{Name: "bcmb_type", err: errors.New(`ent: missing required field "Member.bcmb_type"`)}
	}
	if _, ok := mc.mutation.Level(); !ok {
		return &ValidationError{Name: "level", err: errors.New(`ent: missing required field "Member.level"`)}
	}
	if _, ok := mc.mutation.Source(); !ok {
		return &ValidationError{Name: "source", err: errors.New(`ent: missing required field "Member.source"`)}
	}
	if _, ok := mc.mutation.LastTime(); !ok {
		return &ValidationError{Name: "last_time", err: errors.New(`ent: missing required field "Member.last_time"`)}
	}
	if _, ok := mc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Member.status"`)}
	}
	return nil
}

func (mc *MemberCreate) sqlSave(ctx context.Context) (*Member, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *MemberCreate) createSpec() (*Member, *sqlgraph.CreateSpec) {
	var (
		_node = &Member{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(member.Table, sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt))
	)
	_spec.OnConflict = mc.conflict
	if value, ok := mc.mutation.CreateTime(); ok {
		_spec.SetField(member.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := mc.mutation.UpdateTime(); ok {
		_spec.SetField(member.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := mc.mutation.Code(); ok {
		_spec.SetField(member.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := mc.mutation.CodeBin(); ok {
		_spec.SetField(member.FieldCodeBin, field.TypeString, value)
		_node.CodeBin = value
	}
	if value, ok := mc.mutation.Phone(); ok {
		_spec.SetField(member.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := mc.mutation.Nickname(); ok {
		_spec.SetField(member.FieldNickname, field.TypeString, value)
		_node.Nickname = value
	}
	if value, ok := mc.mutation.WxOpenID(); ok {
		_spec.SetField(member.FieldWxOpenID, field.TypeString, value)
		_node.WxOpenID = value
	}
	if value, ok := mc.mutation.BcmbCode(); ok {
		_spec.SetField(member.FieldBcmbCode, field.TypeString, value)
		_node.BcmbCode = value
	}
	if value, ok := mc.mutation.BcmbRegTime(); ok {
		_spec.SetField(member.FieldBcmbRegTime, field.TypeTime, value)
		_node.BcmbRegTime = &value
	}
	if value, ok := mc.mutation.BcmbRegMsgID(); ok {
		_spec.SetField(member.FieldBcmbRegMsgID, field.TypeString, value)
		_node.BcmbRegMsgID = value
	}
	if value, ok := mc.mutation.BcmbType(); ok {
		_spec.SetField(member.FieldBcmbType, field.TypeInt, value)
		_node.BcmbType = value
	}
	if value, ok := mc.mutation.Level(); ok {
		_spec.SetField(member.FieldLevel, field.TypeInt, value)
		_node.Level = value
	}
	if value, ok := mc.mutation.Source(); ok {
		_spec.SetField(member.FieldSource, field.TypeInt, value)
		_node.Source = value
	}
	if value, ok := mc.mutation.LastTime(); ok {
		_spec.SetField(member.FieldLastTime, field.TypeTime, value)
		_node.LastTime = value
	}
	if value, ok := mc.mutation.Status(); ok {
		_spec.SetField(member.FieldStatus, field.TypeInt, value)
		_node.Status = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Member.Create().
//		SetCreateTime(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MemberUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (mc *MemberCreate) OnConflict(opts ...sql.ConflictOption) *MemberUpsertOne {
	mc.conflict = opts
	return &MemberUpsertOne{
		create: mc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Member.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mc *MemberCreate) OnConflictColumns(columns ...string) *MemberUpsertOne {
	mc.conflict = append(mc.conflict, sql.ConflictColumns(columns...))
	return &MemberUpsertOne{
		create: mc,
	}
}

type (
	// MemberUpsertOne is the builder for "upsert"-ing
	//  one Member node.
	MemberUpsertOne struct {
		create *MemberCreate
	}

	// MemberUpsert is the "OnConflict" setter.
	MemberUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdateTime sets the "update_time" field.
func (u *MemberUpsert) SetUpdateTime(v time.Time) *MemberUpsert {
	u.Set(member.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *MemberUpsert) UpdateUpdateTime() *MemberUpsert {
	u.SetExcluded(member.FieldUpdateTime)
	return u
}

// SetCodeBin sets the "code_bin" field.
func (u *MemberUpsert) SetCodeBin(v string) *MemberUpsert {
	u.Set(member.FieldCodeBin, v)
	return u
}

// UpdateCodeBin sets the "code_bin" field to the value that was provided on create.
func (u *MemberUpsert) UpdateCodeBin() *MemberUpsert {
	u.SetExcluded(member.FieldCodeBin)
	return u
}

// ClearCodeBin clears the value of the "code_bin" field.
func (u *MemberUpsert) ClearCodeBin() *MemberUpsert {
	u.SetNull(member.FieldCodeBin)
	return u
}

// SetPhone sets the "phone" field.
func (u *MemberUpsert) SetPhone(v string) *MemberUpsert {
	u.Set(member.FieldPhone, v)
	return u
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *MemberUpsert) UpdatePhone() *MemberUpsert {
	u.SetExcluded(member.FieldPhone)
	return u
}

// ClearPhone clears the value of the "phone" field.
func (u *MemberUpsert) ClearPhone() *MemberUpsert {
	u.SetNull(member.FieldPhone)
	return u
}

// SetNickname sets the "nickname" field.
func (u *MemberUpsert) SetNickname(v string) *MemberUpsert {
	u.Set(member.FieldNickname, v)
	return u
}

// UpdateNickname sets the "nickname" field to the value that was provided on create.
func (u *MemberUpsert) UpdateNickname() *MemberUpsert {
	u.SetExcluded(member.FieldNickname)
	return u
}

// ClearNickname clears the value of the "nickname" field.
func (u *MemberUpsert) ClearNickname() *MemberUpsert {
	u.SetNull(member.FieldNickname)
	return u
}

// SetWxOpenID sets the "wx_open_id" field.
func (u *MemberUpsert) SetWxOpenID(v string) *MemberUpsert {
	u.Set(member.FieldWxOpenID, v)
	return u
}

// UpdateWxOpenID sets the "wx_open_id" field to the value that was provided on create.
func (u *MemberUpsert) UpdateWxOpenID() *MemberUpsert {
	u.SetExcluded(member.FieldWxOpenID)
	return u
}

// SetBcmbCode sets the "bcmb_code" field.
func (u *MemberUpsert) SetBcmbCode(v string) *MemberUpsert {
	u.Set(member.FieldBcmbCode, v)
	return u
}

// UpdateBcmbCode sets the "bcmb_code" field to the value that was provided on create.
func (u *MemberUpsert) UpdateBcmbCode() *MemberUpsert {
	u.SetExcluded(member.FieldBcmbCode)
	return u
}

// ClearBcmbCode clears the value of the "bcmb_code" field.
func (u *MemberUpsert) ClearBcmbCode() *MemberUpsert {
	u.SetNull(member.FieldBcmbCode)
	return u
}

// SetBcmbRegTime sets the "bcmb_reg_time" field.
func (u *MemberUpsert) SetBcmbRegTime(v time.Time) *MemberUpsert {
	u.Set(member.FieldBcmbRegTime, v)
	return u
}

// UpdateBcmbRegTime sets the "bcmb_reg_time" field to the value that was provided on create.
func (u *MemberUpsert) UpdateBcmbRegTime() *MemberUpsert {
	u.SetExcluded(member.FieldBcmbRegTime)
	return u
}

// ClearBcmbRegTime clears the value of the "bcmb_reg_time" field.
func (u *MemberUpsert) ClearBcmbRegTime() *MemberUpsert {
	u.SetNull(member.FieldBcmbRegTime)
	return u
}

// SetBcmbRegMsgID sets the "bcmb_reg_msg_id" field.
func (u *MemberUpsert) SetBcmbRegMsgID(v string) *MemberUpsert {
	u.Set(member.FieldBcmbRegMsgID, v)
	return u
}

// UpdateBcmbRegMsgID sets the "bcmb_reg_msg_id" field to the value that was provided on create.
func (u *MemberUpsert) UpdateBcmbRegMsgID() *MemberUpsert {
	u.SetExcluded(member.FieldBcmbRegMsgID)
	return u
}

// ClearBcmbRegMsgID clears the value of the "bcmb_reg_msg_id" field.
func (u *MemberUpsert) ClearBcmbRegMsgID() *MemberUpsert {
	u.SetNull(member.FieldBcmbRegMsgID)
	return u
}

// SetBcmbType sets the "bcmb_type" field.
func (u *MemberUpsert) SetBcmbType(v int) *MemberUpsert {
	u.Set(member.FieldBcmbType, v)
	return u
}

// UpdateBcmbType sets the "bcmb_type" field to the value that was provided on create.
func (u *MemberUpsert) UpdateBcmbType() *MemberUpsert {
	u.SetExcluded(member.FieldBcmbType)
	return u
}

// AddBcmbType adds v to the "bcmb_type" field.
func (u *MemberUpsert) AddBcmbType(v int) *MemberUpsert {
	u.Add(member.FieldBcmbType, v)
	return u
}

// SetLevel sets the "level" field.
func (u *MemberUpsert) SetLevel(v int) *MemberUpsert {
	u.Set(member.FieldLevel, v)
	return u
}

// UpdateLevel sets the "level" field to the value that was provided on create.
func (u *MemberUpsert) UpdateLevel() *MemberUpsert {
	u.SetExcluded(member.FieldLevel)
	return u
}

// AddLevel adds v to the "level" field.
func (u *MemberUpsert) AddLevel(v int) *MemberUpsert {
	u.Add(member.FieldLevel, v)
	return u
}

// SetSource sets the "source" field.
func (u *MemberUpsert) SetSource(v int) *MemberUpsert {
	u.Set(member.FieldSource, v)
	return u
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *MemberUpsert) UpdateSource() *MemberUpsert {
	u.SetExcluded(member.FieldSource)
	return u
}

// AddSource adds v to the "source" field.
func (u *MemberUpsert) AddSource(v int) *MemberUpsert {
	u.Add(member.FieldSource, v)
	return u
}

// SetLastTime sets the "last_time" field.
func (u *MemberUpsert) SetLastTime(v time.Time) *MemberUpsert {
	u.Set(member.FieldLastTime, v)
	return u
}

// UpdateLastTime sets the "last_time" field to the value that was provided on create.
func (u *MemberUpsert) UpdateLastTime() *MemberUpsert {
	u.SetExcluded(member.FieldLastTime)
	return u
}

// SetStatus sets the "status" field.
func (u *MemberUpsert) SetStatus(v int) *MemberUpsert {
	u.Set(member.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *MemberUpsert) UpdateStatus() *MemberUpsert {
	u.SetExcluded(member.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *MemberUpsert) AddStatus(v int) *MemberUpsert {
	u.Add(member.FieldStatus, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Member.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *MemberUpsertOne) UpdateNewValues() *MemberUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(member.FieldCreateTime)
		}
		if _, exists := u.create.mutation.Code(); exists {
			s.SetIgnore(member.FieldCode)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Member.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MemberUpsertOne) Ignore() *MemberUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MemberUpsertOne) DoNothing() *MemberUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MemberCreate.OnConflict
// documentation for more info.
func (u *MemberUpsertOne) Update(set func(*MemberUpsert)) *MemberUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MemberUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *MemberUpsertOne) SetUpdateTime(v time.Time) *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *MemberUpsertOne) UpdateUpdateTime() *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetCodeBin sets the "code_bin" field.
func (u *MemberUpsertOne) SetCodeBin(v string) *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.SetCodeBin(v)
	})
}

// UpdateCodeBin sets the "code_bin" field to the value that was provided on create.
func (u *MemberUpsertOne) UpdateCodeBin() *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.UpdateCodeBin()
	})
}

// ClearCodeBin clears the value of the "code_bin" field.
func (u *MemberUpsertOne) ClearCodeBin() *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.ClearCodeBin()
	})
}

// SetPhone sets the "phone" field.
func (u *MemberUpsertOne) SetPhone(v string) *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *MemberUpsertOne) UpdatePhone() *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.UpdatePhone()
	})
}

// ClearPhone clears the value of the "phone" field.
func (u *MemberUpsertOne) ClearPhone() *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.ClearPhone()
	})
}

// SetNickname sets the "nickname" field.
func (u *MemberUpsertOne) SetNickname(v string) *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.SetNickname(v)
	})
}

// UpdateNickname sets the "nickname" field to the value that was provided on create.
func (u *MemberUpsertOne) UpdateNickname() *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.UpdateNickname()
	})
}

// ClearNickname clears the value of the "nickname" field.
func (u *MemberUpsertOne) ClearNickname() *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.ClearNickname()
	})
}

// SetWxOpenID sets the "wx_open_id" field.
func (u *MemberUpsertOne) SetWxOpenID(v string) *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.SetWxOpenID(v)
	})
}

// UpdateWxOpenID sets the "wx_open_id" field to the value that was provided on create.
func (u *MemberUpsertOne) UpdateWxOpenID() *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.UpdateWxOpenID()
	})
}

// SetBcmbCode sets the "bcmb_code" field.
func (u *MemberUpsertOne) SetBcmbCode(v string) *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.SetBcmbCode(v)
	})
}

// UpdateBcmbCode sets the "bcmb_code" field to the value that was provided on create.
func (u *MemberUpsertOne) UpdateBcmbCode() *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.UpdateBcmbCode()
	})
}

// ClearBcmbCode clears the value of the "bcmb_code" field.
func (u *MemberUpsertOne) ClearBcmbCode() *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.ClearBcmbCode()
	})
}

// SetBcmbRegTime sets the "bcmb_reg_time" field.
func (u *MemberUpsertOne) SetBcmbRegTime(v time.Time) *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.SetBcmbRegTime(v)
	})
}

// UpdateBcmbRegTime sets the "bcmb_reg_time" field to the value that was provided on create.
func (u *MemberUpsertOne) UpdateBcmbRegTime() *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.UpdateBcmbRegTime()
	})
}

// ClearBcmbRegTime clears the value of the "bcmb_reg_time" field.
func (u *MemberUpsertOne) ClearBcmbRegTime() *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.ClearBcmbRegTime()
	})
}

// SetBcmbRegMsgID sets the "bcmb_reg_msg_id" field.
func (u *MemberUpsertOne) SetBcmbRegMsgID(v string) *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.SetBcmbRegMsgID(v)
	})
}

// UpdateBcmbRegMsgID sets the "bcmb_reg_msg_id" field to the value that was provided on create.
func (u *MemberUpsertOne) UpdateBcmbRegMsgID() *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.UpdateBcmbRegMsgID()
	})
}

// ClearBcmbRegMsgID clears the value of the "bcmb_reg_msg_id" field.
func (u *MemberUpsertOne) ClearBcmbRegMsgID() *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.ClearBcmbRegMsgID()
	})
}

// SetBcmbType sets the "bcmb_type" field.
func (u *MemberUpsertOne) SetBcmbType(v int) *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.SetBcmbType(v)
	})
}

// AddBcmbType adds v to the "bcmb_type" field.
func (u *MemberUpsertOne) AddBcmbType(v int) *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.AddBcmbType(v)
	})
}

// UpdateBcmbType sets the "bcmb_type" field to the value that was provided on create.
func (u *MemberUpsertOne) UpdateBcmbType() *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.UpdateBcmbType()
	})
}

// SetLevel sets the "level" field.
func (u *MemberUpsertOne) SetLevel(v int) *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.SetLevel(v)
	})
}

// AddLevel adds v to the "level" field.
func (u *MemberUpsertOne) AddLevel(v int) *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.AddLevel(v)
	})
}

// UpdateLevel sets the "level" field to the value that was provided on create.
func (u *MemberUpsertOne) UpdateLevel() *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.UpdateLevel()
	})
}

// SetSource sets the "source" field.
func (u *MemberUpsertOne) SetSource(v int) *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.SetSource(v)
	})
}

// AddSource adds v to the "source" field.
func (u *MemberUpsertOne) AddSource(v int) *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.AddSource(v)
	})
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *MemberUpsertOne) UpdateSource() *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.UpdateSource()
	})
}

// SetLastTime sets the "last_time" field.
func (u *MemberUpsertOne) SetLastTime(v time.Time) *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.SetLastTime(v)
	})
}

// UpdateLastTime sets the "last_time" field to the value that was provided on create.
func (u *MemberUpsertOne) UpdateLastTime() *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.UpdateLastTime()
	})
}

// SetStatus sets the "status" field.
func (u *MemberUpsertOne) SetStatus(v int) *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *MemberUpsertOne) AddStatus(v int) *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *MemberUpsertOne) UpdateStatus() *MemberUpsertOne {
	return u.Update(func(s *MemberUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *MemberUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MemberCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MemberUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MemberUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MemberUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MemberCreateBulk is the builder for creating many Member entities in bulk.
type MemberCreateBulk struct {
	config
	err      error
	builders []*MemberCreate
	conflict []sql.ConflictOption
}

// Save creates the Member entities in the database.
func (mcb *MemberCreateBulk) Save(ctx context.Context) ([]*Member, error) {
	if mcb.err != nil {
		return nil, mcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Member, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MemberMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MemberCreateBulk) SaveX(ctx context.Context) []*Member {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MemberCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MemberCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Member.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MemberUpsert) {
//			SetCreateTime(v+v).
//		}).
//		Exec(ctx)
func (mcb *MemberCreateBulk) OnConflict(opts ...sql.ConflictOption) *MemberUpsertBulk {
	mcb.conflict = opts
	return &MemberUpsertBulk{
		create: mcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Member.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mcb *MemberCreateBulk) OnConflictColumns(columns ...string) *MemberUpsertBulk {
	mcb.conflict = append(mcb.conflict, sql.ConflictColumns(columns...))
	return &MemberUpsertBulk{
		create: mcb,
	}
}

// MemberUpsertBulk is the builder for "upsert"-ing
// a bulk of Member nodes.
type MemberUpsertBulk struct {
	create *MemberCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Member.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *MemberUpsertBulk) UpdateNewValues() *MemberUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(member.FieldCreateTime)
			}
			if _, exists := b.mutation.Code(); exists {
				s.SetIgnore(member.FieldCode)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Member.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MemberUpsertBulk) Ignore() *MemberUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MemberUpsertBulk) DoNothing() *MemberUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MemberCreateBulk.OnConflict
// documentation for more info.
func (u *MemberUpsertBulk) Update(set func(*MemberUpsert)) *MemberUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MemberUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *MemberUpsertBulk) SetUpdateTime(v time.Time) *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *MemberUpsertBulk) UpdateUpdateTime() *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.UpdateUpdateTime()
	})
}

// SetCodeBin sets the "code_bin" field.
func (u *MemberUpsertBulk) SetCodeBin(v string) *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.SetCodeBin(v)
	})
}

// UpdateCodeBin sets the "code_bin" field to the value that was provided on create.
func (u *MemberUpsertBulk) UpdateCodeBin() *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.UpdateCodeBin()
	})
}

// ClearCodeBin clears the value of the "code_bin" field.
func (u *MemberUpsertBulk) ClearCodeBin() *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.ClearCodeBin()
	})
}

// SetPhone sets the "phone" field.
func (u *MemberUpsertBulk) SetPhone(v string) *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *MemberUpsertBulk) UpdatePhone() *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.UpdatePhone()
	})
}

// ClearPhone clears the value of the "phone" field.
func (u *MemberUpsertBulk) ClearPhone() *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.ClearPhone()
	})
}

// SetNickname sets the "nickname" field.
func (u *MemberUpsertBulk) SetNickname(v string) *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.SetNickname(v)
	})
}

// UpdateNickname sets the "nickname" field to the value that was provided on create.
func (u *MemberUpsertBulk) UpdateNickname() *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.UpdateNickname()
	})
}

// ClearNickname clears the value of the "nickname" field.
func (u *MemberUpsertBulk) ClearNickname() *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.ClearNickname()
	})
}

// SetWxOpenID sets the "wx_open_id" field.
func (u *MemberUpsertBulk) SetWxOpenID(v string) *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.SetWxOpenID(v)
	})
}

// UpdateWxOpenID sets the "wx_open_id" field to the value that was provided on create.
func (u *MemberUpsertBulk) UpdateWxOpenID() *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.UpdateWxOpenID()
	})
}

// SetBcmbCode sets the "bcmb_code" field.
func (u *MemberUpsertBulk) SetBcmbCode(v string) *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.SetBcmbCode(v)
	})
}

// UpdateBcmbCode sets the "bcmb_code" field to the value that was provided on create.
func (u *MemberUpsertBulk) UpdateBcmbCode() *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.UpdateBcmbCode()
	})
}

// ClearBcmbCode clears the value of the "bcmb_code" field.
func (u *MemberUpsertBulk) ClearBcmbCode() *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.ClearBcmbCode()
	})
}

// SetBcmbRegTime sets the "bcmb_reg_time" field.
func (u *MemberUpsertBulk) SetBcmbRegTime(v time.Time) *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.SetBcmbRegTime(v)
	})
}

// UpdateBcmbRegTime sets the "bcmb_reg_time" field to the value that was provided on create.
func (u *MemberUpsertBulk) UpdateBcmbRegTime() *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.UpdateBcmbRegTime()
	})
}

// ClearBcmbRegTime clears the value of the "bcmb_reg_time" field.
func (u *MemberUpsertBulk) ClearBcmbRegTime() *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.ClearBcmbRegTime()
	})
}

// SetBcmbRegMsgID sets the "bcmb_reg_msg_id" field.
func (u *MemberUpsertBulk) SetBcmbRegMsgID(v string) *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.SetBcmbRegMsgID(v)
	})
}

// UpdateBcmbRegMsgID sets the "bcmb_reg_msg_id" field to the value that was provided on create.
func (u *MemberUpsertBulk) UpdateBcmbRegMsgID() *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.UpdateBcmbRegMsgID()
	})
}

// ClearBcmbRegMsgID clears the value of the "bcmb_reg_msg_id" field.
func (u *MemberUpsertBulk) ClearBcmbRegMsgID() *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.ClearBcmbRegMsgID()
	})
}

// SetBcmbType sets the "bcmb_type" field.
func (u *MemberUpsertBulk) SetBcmbType(v int) *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.SetBcmbType(v)
	})
}

// AddBcmbType adds v to the "bcmb_type" field.
func (u *MemberUpsertBulk) AddBcmbType(v int) *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.AddBcmbType(v)
	})
}

// UpdateBcmbType sets the "bcmb_type" field to the value that was provided on create.
func (u *MemberUpsertBulk) UpdateBcmbType() *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.UpdateBcmbType()
	})
}

// SetLevel sets the "level" field.
func (u *MemberUpsertBulk) SetLevel(v int) *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.SetLevel(v)
	})
}

// AddLevel adds v to the "level" field.
func (u *MemberUpsertBulk) AddLevel(v int) *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.AddLevel(v)
	})
}

// UpdateLevel sets the "level" field to the value that was provided on create.
func (u *MemberUpsertBulk) UpdateLevel() *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.UpdateLevel()
	})
}

// SetSource sets the "source" field.
func (u *MemberUpsertBulk) SetSource(v int) *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.SetSource(v)
	})
}

// AddSource adds v to the "source" field.
func (u *MemberUpsertBulk) AddSource(v int) *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.AddSource(v)
	})
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *MemberUpsertBulk) UpdateSource() *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.UpdateSource()
	})
}

// SetLastTime sets the "last_time" field.
func (u *MemberUpsertBulk) SetLastTime(v time.Time) *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.SetLastTime(v)
	})
}

// UpdateLastTime sets the "last_time" field to the value that was provided on create.
func (u *MemberUpsertBulk) UpdateLastTime() *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.UpdateLastTime()
	})
}

// SetStatus sets the "status" field.
func (u *MemberUpsertBulk) SetStatus(v int) *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *MemberUpsertBulk) AddStatus(v int) *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *MemberUpsertBulk) UpdateStatus() *MemberUpsertBulk {
	return u.Update(func(s *MemberUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *MemberUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MemberCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MemberCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MemberUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
