// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/twiglab/crm/member/orm/ent/member"
	"github.com/twiglab/crm/member/orm/ent/predicate"
)

// MemberUpdate is the builder for updating Member entities.
type MemberUpdate struct {
	config
	hooks    []Hook
	mutation *MemberMutation
}

// Where appends a list predicates to the MemberUpdate builder.
func (mu *MemberUpdate) Where(ps ...predicate.Member) *MemberUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetUpdateTime sets the "update_time" field.
func (mu *MemberUpdate) SetUpdateTime(t time.Time) *MemberUpdate {
	mu.mutation.SetUpdateTime(t)
	return mu
}

// SetPhone sets the "phone" field.
func (mu *MemberUpdate) SetPhone(s string) *MemberUpdate {
	mu.mutation.SetPhone(s)
	return mu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (mu *MemberUpdate) SetNillablePhone(s *string) *MemberUpdate {
	if s != nil {
		mu.SetPhone(*s)
	}
	return mu
}

// ClearPhone clears the value of the "phone" field.
func (mu *MemberUpdate) ClearPhone() *MemberUpdate {
	mu.mutation.ClearPhone()
	return mu
}

// SetNickname sets the "nickname" field.
func (mu *MemberUpdate) SetNickname(s string) *MemberUpdate {
	mu.mutation.SetNickname(s)
	return mu
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableNickname(s *string) *MemberUpdate {
	if s != nil {
		mu.SetNickname(*s)
	}
	return mu
}

// ClearNickname clears the value of the "nickname" field.
func (mu *MemberUpdate) ClearNickname() *MemberUpdate {
	mu.mutation.ClearNickname()
	return mu
}

// SetWxOpenID sets the "wx_open_id" field.
func (mu *MemberUpdate) SetWxOpenID(s string) *MemberUpdate {
	mu.mutation.SetWxOpenID(s)
	return mu
}

// SetNillableWxOpenID sets the "wx_open_id" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableWxOpenID(s *string) *MemberUpdate {
	if s != nil {
		mu.SetWxOpenID(*s)
	}
	return mu
}

// SetWxUID sets the "wx_uid" field.
func (mu *MemberUpdate) SetWxUID(s string) *MemberUpdate {
	mu.mutation.SetWxUID(s)
	return mu
}

// SetNillableWxUID sets the "wx_uid" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableWxUID(s *string) *MemberUpdate {
	if s != nil {
		mu.SetWxUID(*s)
	}
	return mu
}

// SetWxBcmbCode sets the "wx_bcmb_code" field.
func (mu *MemberUpdate) SetWxBcmbCode(s string) *MemberUpdate {
	mu.mutation.SetWxBcmbCode(s)
	return mu
}

// SetNillableWxBcmbCode sets the "wx_bcmb_code" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableWxBcmbCode(s *string) *MemberUpdate {
	if s != nil {
		mu.SetWxBcmbCode(*s)
	}
	return mu
}

// ClearWxBcmbCode clears the value of the "wx_bcmb_code" field.
func (mu *MemberUpdate) ClearWxBcmbCode() *MemberUpdate {
	mu.mutation.ClearWxBcmbCode()
	return mu
}

// SetWxBcmbMsgID sets the "wx_bcmb_msg_id" field.
func (mu *MemberUpdate) SetWxBcmbMsgID(s string) *MemberUpdate {
	mu.mutation.SetWxBcmbMsgID(s)
	return mu
}

// SetNillableWxBcmbMsgID sets the "wx_bcmb_msg_id" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableWxBcmbMsgID(s *string) *MemberUpdate {
	if s != nil {
		mu.SetWxBcmbMsgID(*s)
	}
	return mu
}

// ClearWxBcmbMsgID clears the value of the "wx_bcmb_msg_id" field.
func (mu *MemberUpdate) ClearWxBcmbMsgID() *MemberUpdate {
	mu.mutation.ClearWxBcmbMsgID()
	return mu
}

// SetWxBcmbAuthType sets the "wx_bcmb_auth_type" field.
func (mu *MemberUpdate) SetWxBcmbAuthType(i int) *MemberUpdate {
	mu.mutation.ResetWxBcmbAuthType()
	mu.mutation.SetWxBcmbAuthType(i)
	return mu
}

// SetNillableWxBcmbAuthType sets the "wx_bcmb_auth_type" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableWxBcmbAuthType(i *int) *MemberUpdate {
	if i != nil {
		mu.SetWxBcmbAuthType(*i)
	}
	return mu
}

// AddWxBcmbAuthType adds i to the "wx_bcmb_auth_type" field.
func (mu *MemberUpdate) AddWxBcmbAuthType(i int) *MemberUpdate {
	mu.mutation.AddWxBcmbAuthType(i)
	return mu
}

// SetStatus sets the "status" field.
func (mu *MemberUpdate) SetStatus(i int) *MemberUpdate {
	mu.mutation.ResetStatus()
	mu.mutation.SetStatus(i)
	return mu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableStatus(i *int) *MemberUpdate {
	if i != nil {
		mu.SetStatus(*i)
	}
	return mu
}

// AddStatus adds i to the "status" field.
func (mu *MemberUpdate) AddStatus(i int) *MemberUpdate {
	mu.mutation.AddStatus(i)
	return mu
}

// SetSource sets the "source" field.
func (mu *MemberUpdate) SetSource(i int) *MemberUpdate {
	mu.mutation.ResetSource()
	mu.mutation.SetSource(i)
	return mu
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableSource(i *int) *MemberUpdate {
	if i != nil {
		mu.SetSource(*i)
	}
	return mu
}

// AddSource adds i to the "source" field.
func (mu *MemberUpdate) AddSource(i int) *MemberUpdate {
	mu.mutation.AddSource(i)
	return mu
}

// Mutation returns the MemberMutation object of the builder.
func (mu *MemberUpdate) Mutation() *MemberMutation {
	return mu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MemberUpdate) Save(ctx context.Context) (int, error) {
	mu.defaults()
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MemberUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MemberUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MemberUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mu *MemberUpdate) defaults() {
	if _, ok := mu.mutation.UpdateTime(); !ok {
		v := member.UpdateDefaultUpdateTime()
		mu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MemberUpdate) check() error {
	if v, ok := mu.mutation.Phone(); ok {
		if err := member.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "Member.phone": %w`, err)}
		}
	}
	if v, ok := mu.mutation.Nickname(); ok {
		if err := member.NicknameValidator(v); err != nil {
			return &ValidationError{Name: "nickname", err: fmt.Errorf(`ent: validator failed for field "Member.nickname": %w`, err)}
		}
	}
	if v, ok := mu.mutation.WxOpenID(); ok {
		if err := member.WxOpenIDValidator(v); err != nil {
			return &ValidationError{Name: "wx_open_id", err: fmt.Errorf(`ent: validator failed for field "Member.wx_open_id": %w`, err)}
		}
	}
	if v, ok := mu.mutation.WxUID(); ok {
		if err := member.WxUIDValidator(v); err != nil {
			return &ValidationError{Name: "wx_uid", err: fmt.Errorf(`ent: validator failed for field "Member.wx_uid": %w`, err)}
		}
	}
	if v, ok := mu.mutation.WxBcmbCode(); ok {
		if err := member.WxBcmbCodeValidator(v); err != nil {
			return &ValidationError{Name: "wx_bcmb_code", err: fmt.Errorf(`ent: validator failed for field "Member.wx_bcmb_code": %w`, err)}
		}
	}
	if v, ok := mu.mutation.WxBcmbMsgID(); ok {
		if err := member.WxBcmbMsgIDValidator(v); err != nil {
			return &ValidationError{Name: "wx_bcmb_msg_id", err: fmt.Errorf(`ent: validator failed for field "Member.wx_bcmb_msg_id": %w`, err)}
		}
	}
	return nil
}

func (mu *MemberUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(member.Table, member.Columns, sqlgraph.NewFieldSpec(member.FieldID, field.TypeUUID))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.UpdateTime(); ok {
		_spec.SetField(member.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := mu.mutation.Phone(); ok {
		_spec.SetField(member.FieldPhone, field.TypeString, value)
	}
	if mu.mutation.PhoneCleared() {
		_spec.ClearField(member.FieldPhone, field.TypeString)
	}
	if value, ok := mu.mutation.Nickname(); ok {
		_spec.SetField(member.FieldNickname, field.TypeString, value)
	}
	if mu.mutation.NicknameCleared() {
		_spec.ClearField(member.FieldNickname, field.TypeString)
	}
	if value, ok := mu.mutation.WxOpenID(); ok {
		_spec.SetField(member.FieldWxOpenID, field.TypeString, value)
	}
	if value, ok := mu.mutation.WxUID(); ok {
		_spec.SetField(member.FieldWxUID, field.TypeString, value)
	}
	if value, ok := mu.mutation.WxBcmbCode(); ok {
		_spec.SetField(member.FieldWxBcmbCode, field.TypeString, value)
	}
	if mu.mutation.WxBcmbCodeCleared() {
		_spec.ClearField(member.FieldWxBcmbCode, field.TypeString)
	}
	if mu.mutation.WxBcmbRegTimeCleared() {
		_spec.ClearField(member.FieldWxBcmbRegTime, field.TypeTime)
	}
	if value, ok := mu.mutation.WxBcmbMsgID(); ok {
		_spec.SetField(member.FieldWxBcmbMsgID, field.TypeString, value)
	}
	if mu.mutation.WxBcmbMsgIDCleared() {
		_spec.ClearField(member.FieldWxBcmbMsgID, field.TypeString)
	}
	if value, ok := mu.mutation.WxBcmbAuthType(); ok {
		_spec.SetField(member.FieldWxBcmbAuthType, field.TypeInt, value)
	}
	if value, ok := mu.mutation.AddedWxBcmbAuthType(); ok {
		_spec.AddField(member.FieldWxBcmbAuthType, field.TypeInt, value)
	}
	if value, ok := mu.mutation.Status(); ok {
		_spec.SetField(member.FieldStatus, field.TypeInt, value)
	}
	if value, ok := mu.mutation.AddedStatus(); ok {
		_spec.AddField(member.FieldStatus, field.TypeInt, value)
	}
	if value, ok := mu.mutation.Source(); ok {
		_spec.SetField(member.FieldSource, field.TypeInt, value)
	}
	if value, ok := mu.mutation.AddedSource(); ok {
		_spec.AddField(member.FieldSource, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{member.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MemberUpdateOne is the builder for updating a single Member entity.
type MemberUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MemberMutation
}

// SetUpdateTime sets the "update_time" field.
func (muo *MemberUpdateOne) SetUpdateTime(t time.Time) *MemberUpdateOne {
	muo.mutation.SetUpdateTime(t)
	return muo
}

// SetPhone sets the "phone" field.
func (muo *MemberUpdateOne) SetPhone(s string) *MemberUpdateOne {
	muo.mutation.SetPhone(s)
	return muo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillablePhone(s *string) *MemberUpdateOne {
	if s != nil {
		muo.SetPhone(*s)
	}
	return muo
}

// ClearPhone clears the value of the "phone" field.
func (muo *MemberUpdateOne) ClearPhone() *MemberUpdateOne {
	muo.mutation.ClearPhone()
	return muo
}

// SetNickname sets the "nickname" field.
func (muo *MemberUpdateOne) SetNickname(s string) *MemberUpdateOne {
	muo.mutation.SetNickname(s)
	return muo
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableNickname(s *string) *MemberUpdateOne {
	if s != nil {
		muo.SetNickname(*s)
	}
	return muo
}

// ClearNickname clears the value of the "nickname" field.
func (muo *MemberUpdateOne) ClearNickname() *MemberUpdateOne {
	muo.mutation.ClearNickname()
	return muo
}

// SetWxOpenID sets the "wx_open_id" field.
func (muo *MemberUpdateOne) SetWxOpenID(s string) *MemberUpdateOne {
	muo.mutation.SetWxOpenID(s)
	return muo
}

// SetNillableWxOpenID sets the "wx_open_id" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableWxOpenID(s *string) *MemberUpdateOne {
	if s != nil {
		muo.SetWxOpenID(*s)
	}
	return muo
}

// SetWxUID sets the "wx_uid" field.
func (muo *MemberUpdateOne) SetWxUID(s string) *MemberUpdateOne {
	muo.mutation.SetWxUID(s)
	return muo
}

// SetNillableWxUID sets the "wx_uid" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableWxUID(s *string) *MemberUpdateOne {
	if s != nil {
		muo.SetWxUID(*s)
	}
	return muo
}

// SetWxBcmbCode sets the "wx_bcmb_code" field.
func (muo *MemberUpdateOne) SetWxBcmbCode(s string) *MemberUpdateOne {
	muo.mutation.SetWxBcmbCode(s)
	return muo
}

// SetNillableWxBcmbCode sets the "wx_bcmb_code" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableWxBcmbCode(s *string) *MemberUpdateOne {
	if s != nil {
		muo.SetWxBcmbCode(*s)
	}
	return muo
}

// ClearWxBcmbCode clears the value of the "wx_bcmb_code" field.
func (muo *MemberUpdateOne) ClearWxBcmbCode() *MemberUpdateOne {
	muo.mutation.ClearWxBcmbCode()
	return muo
}

// SetWxBcmbMsgID sets the "wx_bcmb_msg_id" field.
func (muo *MemberUpdateOne) SetWxBcmbMsgID(s string) *MemberUpdateOne {
	muo.mutation.SetWxBcmbMsgID(s)
	return muo
}

// SetNillableWxBcmbMsgID sets the "wx_bcmb_msg_id" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableWxBcmbMsgID(s *string) *MemberUpdateOne {
	if s != nil {
		muo.SetWxBcmbMsgID(*s)
	}
	return muo
}

// ClearWxBcmbMsgID clears the value of the "wx_bcmb_msg_id" field.
func (muo *MemberUpdateOne) ClearWxBcmbMsgID() *MemberUpdateOne {
	muo.mutation.ClearWxBcmbMsgID()
	return muo
}

// SetWxBcmbAuthType sets the "wx_bcmb_auth_type" field.
func (muo *MemberUpdateOne) SetWxBcmbAuthType(i int) *MemberUpdateOne {
	muo.mutation.ResetWxBcmbAuthType()
	muo.mutation.SetWxBcmbAuthType(i)
	return muo
}

// SetNillableWxBcmbAuthType sets the "wx_bcmb_auth_type" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableWxBcmbAuthType(i *int) *MemberUpdateOne {
	if i != nil {
		muo.SetWxBcmbAuthType(*i)
	}
	return muo
}

// AddWxBcmbAuthType adds i to the "wx_bcmb_auth_type" field.
func (muo *MemberUpdateOne) AddWxBcmbAuthType(i int) *MemberUpdateOne {
	muo.mutation.AddWxBcmbAuthType(i)
	return muo
}

// SetStatus sets the "status" field.
func (muo *MemberUpdateOne) SetStatus(i int) *MemberUpdateOne {
	muo.mutation.ResetStatus()
	muo.mutation.SetStatus(i)
	return muo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableStatus(i *int) *MemberUpdateOne {
	if i != nil {
		muo.SetStatus(*i)
	}
	return muo
}

// AddStatus adds i to the "status" field.
func (muo *MemberUpdateOne) AddStatus(i int) *MemberUpdateOne {
	muo.mutation.AddStatus(i)
	return muo
}

// SetSource sets the "source" field.
func (muo *MemberUpdateOne) SetSource(i int) *MemberUpdateOne {
	muo.mutation.ResetSource()
	muo.mutation.SetSource(i)
	return muo
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableSource(i *int) *MemberUpdateOne {
	if i != nil {
		muo.SetSource(*i)
	}
	return muo
}

// AddSource adds i to the "source" field.
func (muo *MemberUpdateOne) AddSource(i int) *MemberUpdateOne {
	muo.mutation.AddSource(i)
	return muo
}

// Mutation returns the MemberMutation object of the builder.
func (muo *MemberUpdateOne) Mutation() *MemberMutation {
	return muo.mutation
}

// Where appends a list predicates to the MemberUpdate builder.
func (muo *MemberUpdateOne) Where(ps ...predicate.Member) *MemberUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MemberUpdateOne) Select(field string, fields ...string) *MemberUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Member entity.
func (muo *MemberUpdateOne) Save(ctx context.Context) (*Member, error) {
	muo.defaults()
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MemberUpdateOne) SaveX(ctx context.Context) *Member {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MemberUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MemberUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muo *MemberUpdateOne) defaults() {
	if _, ok := muo.mutation.UpdateTime(); !ok {
		v := member.UpdateDefaultUpdateTime()
		muo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MemberUpdateOne) check() error {
	if v, ok := muo.mutation.Phone(); ok {
		if err := member.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf(`ent: validator failed for field "Member.phone": %w`, err)}
		}
	}
	if v, ok := muo.mutation.Nickname(); ok {
		if err := member.NicknameValidator(v); err != nil {
			return &ValidationError{Name: "nickname", err: fmt.Errorf(`ent: validator failed for field "Member.nickname": %w`, err)}
		}
	}
	if v, ok := muo.mutation.WxOpenID(); ok {
		if err := member.WxOpenIDValidator(v); err != nil {
			return &ValidationError{Name: "wx_open_id", err: fmt.Errorf(`ent: validator failed for field "Member.wx_open_id": %w`, err)}
		}
	}
	if v, ok := muo.mutation.WxUID(); ok {
		if err := member.WxUIDValidator(v); err != nil {
			return &ValidationError{Name: "wx_uid", err: fmt.Errorf(`ent: validator failed for field "Member.wx_uid": %w`, err)}
		}
	}
	if v, ok := muo.mutation.WxBcmbCode(); ok {
		if err := member.WxBcmbCodeValidator(v); err != nil {
			return &ValidationError{Name: "wx_bcmb_code", err: fmt.Errorf(`ent: validator failed for field "Member.wx_bcmb_code": %w`, err)}
		}
	}
	if v, ok := muo.mutation.WxBcmbMsgID(); ok {
		if err := member.WxBcmbMsgIDValidator(v); err != nil {
			return &ValidationError{Name: "wx_bcmb_msg_id", err: fmt.Errorf(`ent: validator failed for field "Member.wx_bcmb_msg_id": %w`, err)}
		}
	}
	return nil
}

func (muo *MemberUpdateOne) sqlSave(ctx context.Context) (_node *Member, err error) {
	if err := muo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(member.Table, member.Columns, sqlgraph.NewFieldSpec(member.FieldID, field.TypeUUID))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Member.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, member.FieldID)
		for _, f := range fields {
			if !member.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != member.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.UpdateTime(); ok {
		_spec.SetField(member.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := muo.mutation.Phone(); ok {
		_spec.SetField(member.FieldPhone, field.TypeString, value)
	}
	if muo.mutation.PhoneCleared() {
		_spec.ClearField(member.FieldPhone, field.TypeString)
	}
	if value, ok := muo.mutation.Nickname(); ok {
		_spec.SetField(member.FieldNickname, field.TypeString, value)
	}
	if muo.mutation.NicknameCleared() {
		_spec.ClearField(member.FieldNickname, field.TypeString)
	}
	if value, ok := muo.mutation.WxOpenID(); ok {
		_spec.SetField(member.FieldWxOpenID, field.TypeString, value)
	}
	if value, ok := muo.mutation.WxUID(); ok {
		_spec.SetField(member.FieldWxUID, field.TypeString, value)
	}
	if value, ok := muo.mutation.WxBcmbCode(); ok {
		_spec.SetField(member.FieldWxBcmbCode, field.TypeString, value)
	}
	if muo.mutation.WxBcmbCodeCleared() {
		_spec.ClearField(member.FieldWxBcmbCode, field.TypeString)
	}
	if muo.mutation.WxBcmbRegTimeCleared() {
		_spec.ClearField(member.FieldWxBcmbRegTime, field.TypeTime)
	}
	if value, ok := muo.mutation.WxBcmbMsgID(); ok {
		_spec.SetField(member.FieldWxBcmbMsgID, field.TypeString, value)
	}
	if muo.mutation.WxBcmbMsgIDCleared() {
		_spec.ClearField(member.FieldWxBcmbMsgID, field.TypeString)
	}
	if value, ok := muo.mutation.WxBcmbAuthType(); ok {
		_spec.SetField(member.FieldWxBcmbAuthType, field.TypeInt, value)
	}
	if value, ok := muo.mutation.AddedWxBcmbAuthType(); ok {
		_spec.AddField(member.FieldWxBcmbAuthType, field.TypeInt, value)
	}
	if value, ok := muo.mutation.Status(); ok {
		_spec.SetField(member.FieldStatus, field.TypeInt, value)
	}
	if value, ok := muo.mutation.AddedStatus(); ok {
		_spec.AddField(member.FieldStatus, field.TypeInt, value)
	}
	if value, ok := muo.mutation.Source(); ok {
		_spec.SetField(member.FieldSource, field.TypeInt, value)
	}
	if value, ok := muo.mutation.AddedSource(); ok {
		_spec.AddField(member.FieldSource, field.TypeInt, value)
	}
	_node = &Member{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{member.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
