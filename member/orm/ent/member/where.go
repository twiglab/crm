// Code generated by ent, DO NOT EDIT.

package member

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/twiglab/crm/member/orm/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldUpdateTime, v))
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldCode, v))
}

// CodeBin applies equality check predicate on the "code_bin" field. It's identical to CodeBinEQ.
func CodeBin(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldCodeBin, v))
}

// Phone applies equality check predicate on the "phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldPhone, v))
}

// Nickname applies equality check predicate on the "nickname" field. It's identical to NicknameEQ.
func Nickname(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldNickname, v))
}

// WxOpenID applies equality check predicate on the "wx_open_id" field. It's identical to WxOpenIDEQ.
func WxOpenID(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldWxOpenID, v))
}

// WxUnionID applies equality check predicate on the "wx_union_id" field. It's identical to WxUnionIDEQ.
func WxUnionID(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldWxUnionID, v))
}

// BcmbCode applies equality check predicate on the "bcmb_code" field. It's identical to BcmbCodeEQ.
func BcmbCode(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldBcmbCode, v))
}

// BcmbRegTime applies equality check predicate on the "bcmb_reg_time" field. It's identical to BcmbRegTimeEQ.
func BcmbRegTime(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldBcmbRegTime, v))
}

// BcmbRegMsgID applies equality check predicate on the "bcmb_reg_msg_id" field. It's identical to BcmbRegMsgIDEQ.
func BcmbRegMsgID(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldBcmbRegMsgID, v))
}

// BcmbType applies equality check predicate on the "bcmb_type" field. It's identical to BcmbTypeEQ.
func BcmbType(v int32) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldBcmbType, v))
}

// Level applies equality check predicate on the "level" field. It's identical to LevelEQ.
func Level(v int32) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldLevel, v))
}

// LastTime applies equality check predicate on the "last_time" field. It's identical to LastTimeEQ.
func LastTime(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldLastTime, v))
}

// Source applies equality check predicate on the "source" field. It's identical to SourceEQ.
func Source(v int32) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldSource, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int32) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldStatus, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldUpdateTime, v))
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldCode, v))
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldCode, v))
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldCode, vs...))
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldCode, vs...))
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldCode, v))
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldCode, v))
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldCode, v))
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldCode, v))
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.Member {
	return predicate.Member(sql.FieldContains(FieldCode, v))
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasPrefix(FieldCode, v))
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasSuffix(FieldCode, v))
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.Member {
	return predicate.Member(sql.FieldEqualFold(FieldCode, v))
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.Member {
	return predicate.Member(sql.FieldContainsFold(FieldCode, v))
}

// CodeBinEQ applies the EQ predicate on the "code_bin" field.
func CodeBinEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldCodeBin, v))
}

// CodeBinNEQ applies the NEQ predicate on the "code_bin" field.
func CodeBinNEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldCodeBin, v))
}

// CodeBinIn applies the In predicate on the "code_bin" field.
func CodeBinIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldCodeBin, vs...))
}

// CodeBinNotIn applies the NotIn predicate on the "code_bin" field.
func CodeBinNotIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldCodeBin, vs...))
}

// CodeBinGT applies the GT predicate on the "code_bin" field.
func CodeBinGT(v string) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldCodeBin, v))
}

// CodeBinGTE applies the GTE predicate on the "code_bin" field.
func CodeBinGTE(v string) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldCodeBin, v))
}

// CodeBinLT applies the LT predicate on the "code_bin" field.
func CodeBinLT(v string) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldCodeBin, v))
}

// CodeBinLTE applies the LTE predicate on the "code_bin" field.
func CodeBinLTE(v string) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldCodeBin, v))
}

// CodeBinContains applies the Contains predicate on the "code_bin" field.
func CodeBinContains(v string) predicate.Member {
	return predicate.Member(sql.FieldContains(FieldCodeBin, v))
}

// CodeBinHasPrefix applies the HasPrefix predicate on the "code_bin" field.
func CodeBinHasPrefix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasPrefix(FieldCodeBin, v))
}

// CodeBinHasSuffix applies the HasSuffix predicate on the "code_bin" field.
func CodeBinHasSuffix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasSuffix(FieldCodeBin, v))
}

// CodeBinIsNil applies the IsNil predicate on the "code_bin" field.
func CodeBinIsNil() predicate.Member {
	return predicate.Member(sql.FieldIsNull(FieldCodeBin))
}

// CodeBinNotNil applies the NotNil predicate on the "code_bin" field.
func CodeBinNotNil() predicate.Member {
	return predicate.Member(sql.FieldNotNull(FieldCodeBin))
}

// CodeBinEqualFold applies the EqualFold predicate on the "code_bin" field.
func CodeBinEqualFold(v string) predicate.Member {
	return predicate.Member(sql.FieldEqualFold(FieldCodeBin, v))
}

// CodeBinContainsFold applies the ContainsFold predicate on the "code_bin" field.
func CodeBinContainsFold(v string) predicate.Member {
	return predicate.Member(sql.FieldContainsFold(FieldCodeBin, v))
}

// PhoneEQ applies the EQ predicate on the "phone" field.
func PhoneEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldPhone, v))
}

// PhoneNEQ applies the NEQ predicate on the "phone" field.
func PhoneNEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldPhone, v))
}

// PhoneIn applies the In predicate on the "phone" field.
func PhoneIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldPhone, vs...))
}

// PhoneNotIn applies the NotIn predicate on the "phone" field.
func PhoneNotIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldPhone, vs...))
}

// PhoneGT applies the GT predicate on the "phone" field.
func PhoneGT(v string) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldPhone, v))
}

// PhoneGTE applies the GTE predicate on the "phone" field.
func PhoneGTE(v string) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldPhone, v))
}

// PhoneLT applies the LT predicate on the "phone" field.
func PhoneLT(v string) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldPhone, v))
}

// PhoneLTE applies the LTE predicate on the "phone" field.
func PhoneLTE(v string) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldPhone, v))
}

// PhoneContains applies the Contains predicate on the "phone" field.
func PhoneContains(v string) predicate.Member {
	return predicate.Member(sql.FieldContains(FieldPhone, v))
}

// PhoneHasPrefix applies the HasPrefix predicate on the "phone" field.
func PhoneHasPrefix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasPrefix(FieldPhone, v))
}

// PhoneHasSuffix applies the HasSuffix predicate on the "phone" field.
func PhoneHasSuffix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasSuffix(FieldPhone, v))
}

// PhoneIsNil applies the IsNil predicate on the "phone" field.
func PhoneIsNil() predicate.Member {
	return predicate.Member(sql.FieldIsNull(FieldPhone))
}

// PhoneNotNil applies the NotNil predicate on the "phone" field.
func PhoneNotNil() predicate.Member {
	return predicate.Member(sql.FieldNotNull(FieldPhone))
}

// PhoneEqualFold applies the EqualFold predicate on the "phone" field.
func PhoneEqualFold(v string) predicate.Member {
	return predicate.Member(sql.FieldEqualFold(FieldPhone, v))
}

// PhoneContainsFold applies the ContainsFold predicate on the "phone" field.
func PhoneContainsFold(v string) predicate.Member {
	return predicate.Member(sql.FieldContainsFold(FieldPhone, v))
}

// NicknameEQ applies the EQ predicate on the "nickname" field.
func NicknameEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldNickname, v))
}

// NicknameNEQ applies the NEQ predicate on the "nickname" field.
func NicknameNEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldNickname, v))
}

// NicknameIn applies the In predicate on the "nickname" field.
func NicknameIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldNickname, vs...))
}

// NicknameNotIn applies the NotIn predicate on the "nickname" field.
func NicknameNotIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldNickname, vs...))
}

// NicknameGT applies the GT predicate on the "nickname" field.
func NicknameGT(v string) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldNickname, v))
}

// NicknameGTE applies the GTE predicate on the "nickname" field.
func NicknameGTE(v string) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldNickname, v))
}

// NicknameLT applies the LT predicate on the "nickname" field.
func NicknameLT(v string) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldNickname, v))
}

// NicknameLTE applies the LTE predicate on the "nickname" field.
func NicknameLTE(v string) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldNickname, v))
}

// NicknameContains applies the Contains predicate on the "nickname" field.
func NicknameContains(v string) predicate.Member {
	return predicate.Member(sql.FieldContains(FieldNickname, v))
}

// NicknameHasPrefix applies the HasPrefix predicate on the "nickname" field.
func NicknameHasPrefix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasPrefix(FieldNickname, v))
}

// NicknameHasSuffix applies the HasSuffix predicate on the "nickname" field.
func NicknameHasSuffix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasSuffix(FieldNickname, v))
}

// NicknameIsNil applies the IsNil predicate on the "nickname" field.
func NicknameIsNil() predicate.Member {
	return predicate.Member(sql.FieldIsNull(FieldNickname))
}

// NicknameNotNil applies the NotNil predicate on the "nickname" field.
func NicknameNotNil() predicate.Member {
	return predicate.Member(sql.FieldNotNull(FieldNickname))
}

// NicknameEqualFold applies the EqualFold predicate on the "nickname" field.
func NicknameEqualFold(v string) predicate.Member {
	return predicate.Member(sql.FieldEqualFold(FieldNickname, v))
}

// NicknameContainsFold applies the ContainsFold predicate on the "nickname" field.
func NicknameContainsFold(v string) predicate.Member {
	return predicate.Member(sql.FieldContainsFold(FieldNickname, v))
}

// WxOpenIDEQ applies the EQ predicate on the "wx_open_id" field.
func WxOpenIDEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldWxOpenID, v))
}

// WxOpenIDNEQ applies the NEQ predicate on the "wx_open_id" field.
func WxOpenIDNEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldWxOpenID, v))
}

// WxOpenIDIn applies the In predicate on the "wx_open_id" field.
func WxOpenIDIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldWxOpenID, vs...))
}

// WxOpenIDNotIn applies the NotIn predicate on the "wx_open_id" field.
func WxOpenIDNotIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldWxOpenID, vs...))
}

// WxOpenIDGT applies the GT predicate on the "wx_open_id" field.
func WxOpenIDGT(v string) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldWxOpenID, v))
}

// WxOpenIDGTE applies the GTE predicate on the "wx_open_id" field.
func WxOpenIDGTE(v string) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldWxOpenID, v))
}

// WxOpenIDLT applies the LT predicate on the "wx_open_id" field.
func WxOpenIDLT(v string) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldWxOpenID, v))
}

// WxOpenIDLTE applies the LTE predicate on the "wx_open_id" field.
func WxOpenIDLTE(v string) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldWxOpenID, v))
}

// WxOpenIDContains applies the Contains predicate on the "wx_open_id" field.
func WxOpenIDContains(v string) predicate.Member {
	return predicate.Member(sql.FieldContains(FieldWxOpenID, v))
}

// WxOpenIDHasPrefix applies the HasPrefix predicate on the "wx_open_id" field.
func WxOpenIDHasPrefix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasPrefix(FieldWxOpenID, v))
}

// WxOpenIDHasSuffix applies the HasSuffix predicate on the "wx_open_id" field.
func WxOpenIDHasSuffix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasSuffix(FieldWxOpenID, v))
}

// WxOpenIDEqualFold applies the EqualFold predicate on the "wx_open_id" field.
func WxOpenIDEqualFold(v string) predicate.Member {
	return predicate.Member(sql.FieldEqualFold(FieldWxOpenID, v))
}

// WxOpenIDContainsFold applies the ContainsFold predicate on the "wx_open_id" field.
func WxOpenIDContainsFold(v string) predicate.Member {
	return predicate.Member(sql.FieldContainsFold(FieldWxOpenID, v))
}

// WxUnionIDEQ applies the EQ predicate on the "wx_union_id" field.
func WxUnionIDEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldWxUnionID, v))
}

// WxUnionIDNEQ applies the NEQ predicate on the "wx_union_id" field.
func WxUnionIDNEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldWxUnionID, v))
}

// WxUnionIDIn applies the In predicate on the "wx_union_id" field.
func WxUnionIDIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldWxUnionID, vs...))
}

// WxUnionIDNotIn applies the NotIn predicate on the "wx_union_id" field.
func WxUnionIDNotIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldWxUnionID, vs...))
}

// WxUnionIDGT applies the GT predicate on the "wx_union_id" field.
func WxUnionIDGT(v string) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldWxUnionID, v))
}

// WxUnionIDGTE applies the GTE predicate on the "wx_union_id" field.
func WxUnionIDGTE(v string) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldWxUnionID, v))
}

// WxUnionIDLT applies the LT predicate on the "wx_union_id" field.
func WxUnionIDLT(v string) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldWxUnionID, v))
}

// WxUnionIDLTE applies the LTE predicate on the "wx_union_id" field.
func WxUnionIDLTE(v string) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldWxUnionID, v))
}

// WxUnionIDContains applies the Contains predicate on the "wx_union_id" field.
func WxUnionIDContains(v string) predicate.Member {
	return predicate.Member(sql.FieldContains(FieldWxUnionID, v))
}

// WxUnionIDHasPrefix applies the HasPrefix predicate on the "wx_union_id" field.
func WxUnionIDHasPrefix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasPrefix(FieldWxUnionID, v))
}

// WxUnionIDHasSuffix applies the HasSuffix predicate on the "wx_union_id" field.
func WxUnionIDHasSuffix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasSuffix(FieldWxUnionID, v))
}

// WxUnionIDIsNil applies the IsNil predicate on the "wx_union_id" field.
func WxUnionIDIsNil() predicate.Member {
	return predicate.Member(sql.FieldIsNull(FieldWxUnionID))
}

// WxUnionIDNotNil applies the NotNil predicate on the "wx_union_id" field.
func WxUnionIDNotNil() predicate.Member {
	return predicate.Member(sql.FieldNotNull(FieldWxUnionID))
}

// WxUnionIDEqualFold applies the EqualFold predicate on the "wx_union_id" field.
func WxUnionIDEqualFold(v string) predicate.Member {
	return predicate.Member(sql.FieldEqualFold(FieldWxUnionID, v))
}

// WxUnionIDContainsFold applies the ContainsFold predicate on the "wx_union_id" field.
func WxUnionIDContainsFold(v string) predicate.Member {
	return predicate.Member(sql.FieldContainsFold(FieldWxUnionID, v))
}

// BcmbCodeEQ applies the EQ predicate on the "bcmb_code" field.
func BcmbCodeEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldBcmbCode, v))
}

// BcmbCodeNEQ applies the NEQ predicate on the "bcmb_code" field.
func BcmbCodeNEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldBcmbCode, v))
}

// BcmbCodeIn applies the In predicate on the "bcmb_code" field.
func BcmbCodeIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldBcmbCode, vs...))
}

// BcmbCodeNotIn applies the NotIn predicate on the "bcmb_code" field.
func BcmbCodeNotIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldBcmbCode, vs...))
}

// BcmbCodeGT applies the GT predicate on the "bcmb_code" field.
func BcmbCodeGT(v string) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldBcmbCode, v))
}

// BcmbCodeGTE applies the GTE predicate on the "bcmb_code" field.
func BcmbCodeGTE(v string) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldBcmbCode, v))
}

// BcmbCodeLT applies the LT predicate on the "bcmb_code" field.
func BcmbCodeLT(v string) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldBcmbCode, v))
}

// BcmbCodeLTE applies the LTE predicate on the "bcmb_code" field.
func BcmbCodeLTE(v string) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldBcmbCode, v))
}

// BcmbCodeContains applies the Contains predicate on the "bcmb_code" field.
func BcmbCodeContains(v string) predicate.Member {
	return predicate.Member(sql.FieldContains(FieldBcmbCode, v))
}

// BcmbCodeHasPrefix applies the HasPrefix predicate on the "bcmb_code" field.
func BcmbCodeHasPrefix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasPrefix(FieldBcmbCode, v))
}

// BcmbCodeHasSuffix applies the HasSuffix predicate on the "bcmb_code" field.
func BcmbCodeHasSuffix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasSuffix(FieldBcmbCode, v))
}

// BcmbCodeIsNil applies the IsNil predicate on the "bcmb_code" field.
func BcmbCodeIsNil() predicate.Member {
	return predicate.Member(sql.FieldIsNull(FieldBcmbCode))
}

// BcmbCodeNotNil applies the NotNil predicate on the "bcmb_code" field.
func BcmbCodeNotNil() predicate.Member {
	return predicate.Member(sql.FieldNotNull(FieldBcmbCode))
}

// BcmbCodeEqualFold applies the EqualFold predicate on the "bcmb_code" field.
func BcmbCodeEqualFold(v string) predicate.Member {
	return predicate.Member(sql.FieldEqualFold(FieldBcmbCode, v))
}

// BcmbCodeContainsFold applies the ContainsFold predicate on the "bcmb_code" field.
func BcmbCodeContainsFold(v string) predicate.Member {
	return predicate.Member(sql.FieldContainsFold(FieldBcmbCode, v))
}

// BcmbRegTimeEQ applies the EQ predicate on the "bcmb_reg_time" field.
func BcmbRegTimeEQ(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldBcmbRegTime, v))
}

// BcmbRegTimeNEQ applies the NEQ predicate on the "bcmb_reg_time" field.
func BcmbRegTimeNEQ(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldBcmbRegTime, v))
}

// BcmbRegTimeIn applies the In predicate on the "bcmb_reg_time" field.
func BcmbRegTimeIn(vs ...time.Time) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldBcmbRegTime, vs...))
}

// BcmbRegTimeNotIn applies the NotIn predicate on the "bcmb_reg_time" field.
func BcmbRegTimeNotIn(vs ...time.Time) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldBcmbRegTime, vs...))
}

// BcmbRegTimeGT applies the GT predicate on the "bcmb_reg_time" field.
func BcmbRegTimeGT(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldBcmbRegTime, v))
}

// BcmbRegTimeGTE applies the GTE predicate on the "bcmb_reg_time" field.
func BcmbRegTimeGTE(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldBcmbRegTime, v))
}

// BcmbRegTimeLT applies the LT predicate on the "bcmb_reg_time" field.
func BcmbRegTimeLT(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldBcmbRegTime, v))
}

// BcmbRegTimeLTE applies the LTE predicate on the "bcmb_reg_time" field.
func BcmbRegTimeLTE(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldBcmbRegTime, v))
}

// BcmbRegTimeIsNil applies the IsNil predicate on the "bcmb_reg_time" field.
func BcmbRegTimeIsNil() predicate.Member {
	return predicate.Member(sql.FieldIsNull(FieldBcmbRegTime))
}

// BcmbRegTimeNotNil applies the NotNil predicate on the "bcmb_reg_time" field.
func BcmbRegTimeNotNil() predicate.Member {
	return predicate.Member(sql.FieldNotNull(FieldBcmbRegTime))
}

// BcmbRegMsgIDEQ applies the EQ predicate on the "bcmb_reg_msg_id" field.
func BcmbRegMsgIDEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldBcmbRegMsgID, v))
}

// BcmbRegMsgIDNEQ applies the NEQ predicate on the "bcmb_reg_msg_id" field.
func BcmbRegMsgIDNEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldBcmbRegMsgID, v))
}

// BcmbRegMsgIDIn applies the In predicate on the "bcmb_reg_msg_id" field.
func BcmbRegMsgIDIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldBcmbRegMsgID, vs...))
}

// BcmbRegMsgIDNotIn applies the NotIn predicate on the "bcmb_reg_msg_id" field.
func BcmbRegMsgIDNotIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldBcmbRegMsgID, vs...))
}

// BcmbRegMsgIDGT applies the GT predicate on the "bcmb_reg_msg_id" field.
func BcmbRegMsgIDGT(v string) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldBcmbRegMsgID, v))
}

// BcmbRegMsgIDGTE applies the GTE predicate on the "bcmb_reg_msg_id" field.
func BcmbRegMsgIDGTE(v string) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldBcmbRegMsgID, v))
}

// BcmbRegMsgIDLT applies the LT predicate on the "bcmb_reg_msg_id" field.
func BcmbRegMsgIDLT(v string) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldBcmbRegMsgID, v))
}

// BcmbRegMsgIDLTE applies the LTE predicate on the "bcmb_reg_msg_id" field.
func BcmbRegMsgIDLTE(v string) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldBcmbRegMsgID, v))
}

// BcmbRegMsgIDContains applies the Contains predicate on the "bcmb_reg_msg_id" field.
func BcmbRegMsgIDContains(v string) predicate.Member {
	return predicate.Member(sql.FieldContains(FieldBcmbRegMsgID, v))
}

// BcmbRegMsgIDHasPrefix applies the HasPrefix predicate on the "bcmb_reg_msg_id" field.
func BcmbRegMsgIDHasPrefix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasPrefix(FieldBcmbRegMsgID, v))
}

// BcmbRegMsgIDHasSuffix applies the HasSuffix predicate on the "bcmb_reg_msg_id" field.
func BcmbRegMsgIDHasSuffix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasSuffix(FieldBcmbRegMsgID, v))
}

// BcmbRegMsgIDIsNil applies the IsNil predicate on the "bcmb_reg_msg_id" field.
func BcmbRegMsgIDIsNil() predicate.Member {
	return predicate.Member(sql.FieldIsNull(FieldBcmbRegMsgID))
}

// BcmbRegMsgIDNotNil applies the NotNil predicate on the "bcmb_reg_msg_id" field.
func BcmbRegMsgIDNotNil() predicate.Member {
	return predicate.Member(sql.FieldNotNull(FieldBcmbRegMsgID))
}

// BcmbRegMsgIDEqualFold applies the EqualFold predicate on the "bcmb_reg_msg_id" field.
func BcmbRegMsgIDEqualFold(v string) predicate.Member {
	return predicate.Member(sql.FieldEqualFold(FieldBcmbRegMsgID, v))
}

// BcmbRegMsgIDContainsFold applies the ContainsFold predicate on the "bcmb_reg_msg_id" field.
func BcmbRegMsgIDContainsFold(v string) predicate.Member {
	return predicate.Member(sql.FieldContainsFold(FieldBcmbRegMsgID, v))
}

// BcmbTypeEQ applies the EQ predicate on the "bcmb_type" field.
func BcmbTypeEQ(v int32) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldBcmbType, v))
}

// BcmbTypeNEQ applies the NEQ predicate on the "bcmb_type" field.
func BcmbTypeNEQ(v int32) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldBcmbType, v))
}

// BcmbTypeIn applies the In predicate on the "bcmb_type" field.
func BcmbTypeIn(vs ...int32) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldBcmbType, vs...))
}

// BcmbTypeNotIn applies the NotIn predicate on the "bcmb_type" field.
func BcmbTypeNotIn(vs ...int32) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldBcmbType, vs...))
}

// BcmbTypeGT applies the GT predicate on the "bcmb_type" field.
func BcmbTypeGT(v int32) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldBcmbType, v))
}

// BcmbTypeGTE applies the GTE predicate on the "bcmb_type" field.
func BcmbTypeGTE(v int32) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldBcmbType, v))
}

// BcmbTypeLT applies the LT predicate on the "bcmb_type" field.
func BcmbTypeLT(v int32) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldBcmbType, v))
}

// BcmbTypeLTE applies the LTE predicate on the "bcmb_type" field.
func BcmbTypeLTE(v int32) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldBcmbType, v))
}

// LevelEQ applies the EQ predicate on the "level" field.
func LevelEQ(v int32) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldLevel, v))
}

// LevelNEQ applies the NEQ predicate on the "level" field.
func LevelNEQ(v int32) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldLevel, v))
}

// LevelIn applies the In predicate on the "level" field.
func LevelIn(vs ...int32) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldLevel, vs...))
}

// LevelNotIn applies the NotIn predicate on the "level" field.
func LevelNotIn(vs ...int32) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldLevel, vs...))
}

// LevelGT applies the GT predicate on the "level" field.
func LevelGT(v int32) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldLevel, v))
}

// LevelGTE applies the GTE predicate on the "level" field.
func LevelGTE(v int32) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldLevel, v))
}

// LevelLT applies the LT predicate on the "level" field.
func LevelLT(v int32) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldLevel, v))
}

// LevelLTE applies the LTE predicate on the "level" field.
func LevelLTE(v int32) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldLevel, v))
}

// LastTimeEQ applies the EQ predicate on the "last_time" field.
func LastTimeEQ(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldLastTime, v))
}

// LastTimeNEQ applies the NEQ predicate on the "last_time" field.
func LastTimeNEQ(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldLastTime, v))
}

// LastTimeIn applies the In predicate on the "last_time" field.
func LastTimeIn(vs ...time.Time) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldLastTime, vs...))
}

// LastTimeNotIn applies the NotIn predicate on the "last_time" field.
func LastTimeNotIn(vs ...time.Time) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldLastTime, vs...))
}

// LastTimeGT applies the GT predicate on the "last_time" field.
func LastTimeGT(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldLastTime, v))
}

// LastTimeGTE applies the GTE predicate on the "last_time" field.
func LastTimeGTE(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldLastTime, v))
}

// LastTimeLT applies the LT predicate on the "last_time" field.
func LastTimeLT(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldLastTime, v))
}

// LastTimeLTE applies the LTE predicate on the "last_time" field.
func LastTimeLTE(v time.Time) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldLastTime, v))
}

// SourceEQ applies the EQ predicate on the "source" field.
func SourceEQ(v int32) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldSource, v))
}

// SourceNEQ applies the NEQ predicate on the "source" field.
func SourceNEQ(v int32) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldSource, v))
}

// SourceIn applies the In predicate on the "source" field.
func SourceIn(vs ...int32) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldSource, vs...))
}

// SourceNotIn applies the NotIn predicate on the "source" field.
func SourceNotIn(vs ...int32) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldSource, vs...))
}

// SourceGT applies the GT predicate on the "source" field.
func SourceGT(v int32) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldSource, v))
}

// SourceGTE applies the GTE predicate on the "source" field.
func SourceGTE(v int32) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldSource, v))
}

// SourceLT applies the LT predicate on the "source" field.
func SourceLT(v int32) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldSource, v))
}

// SourceLTE applies the LTE predicate on the "source" field.
func SourceLTE(v int32) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldSource, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int32) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int32) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int32) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int32) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int32) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int32) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int32) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int32) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldStatus, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Member) predicate.Member {
	return predicate.Member(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Member) predicate.Member {
	return predicate.Member(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Member) predicate.Member {
	return predicate.Member(sql.NotPredicates(p))
}
