// Code generated by ent, DO NOT EDIT.

package shop

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the shop type in the database.
	Label = "shop"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldMallCode holds the string denoting the mall_code field in the database.
	FieldMallCode = "mall_code"
	// FieldMallName holds the string denoting the mall_name field in the database.
	FieldMallName = "mall_name"
	// FieldContractCode holds the string denoting the contract_code field in the database.
	FieldContractCode = "contract_code"
	// FieldPosCode holds the string denoting the pos_code field in the database.
	FieldPosCode = "pos_code"
	// FieldShopCode holds the string denoting the shop_code field in the database.
	FieldShopCode = "shop_code"
	// FieldShopName holds the string denoting the shop_name field in the database.
	FieldShopName = "shop_name"
	// FieldBizClass1 holds the string denoting the biz_class_1 field in the database.
	FieldBizClass1 = "biz_class_1"
	// FieldBizClassName1 holds the string denoting the biz_class_name_1 field in the database.
	FieldBizClassName1 = "biz_class_name_1"
	// FieldBizClass2 holds the string denoting the biz_class_2 field in the database.
	FieldBizClass2 = "biz_class_2"
	// FieldBizClassName2 holds the string denoting the biz_class_name_2 field in the database.
	FieldBizClassName2 = "biz_class_name_2"
	// FieldBizBeginTime holds the string denoting the biz_begin_time field in the database.
	FieldBizBeginTime = "biz_begin_time"
	// FieldBizEndTime holds the string denoting the biz_end_time field in the database.
	FieldBizEndTime = "biz_end_time"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// Table holds the table name of the shop in the database.
	Table = "t_shop"
)

// Columns holds all SQL columns for shop fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldCode,
	FieldMallCode,
	FieldMallName,
	FieldContractCode,
	FieldPosCode,
	FieldShopCode,
	FieldShopName,
	FieldBizClass1,
	FieldBizClassName1,
	FieldBizClass2,
	FieldBizClassName2,
	FieldBizBeginTime,
	FieldBizEndTime,
	FieldStatus,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultCode holds the default value on creation for the "code" field.
	DefaultCode func() string
	// CodeValidator is a validator for the "code" field. It is called by the builders before save.
	CodeValidator func(string) error
	// MallCodeValidator is a validator for the "mall_code" field. It is called by the builders before save.
	MallCodeValidator func(string) error
	// MallNameValidator is a validator for the "mall_name" field. It is called by the builders before save.
	MallNameValidator func(string) error
	// ContractCodeValidator is a validator for the "contract_code" field. It is called by the builders before save.
	ContractCodeValidator func(string) error
	// PosCodeValidator is a validator for the "pos_code" field. It is called by the builders before save.
	PosCodeValidator func(string) error
	// ShopCodeValidator is a validator for the "shop_code" field. It is called by the builders before save.
	ShopCodeValidator func(string) error
	// ShopNameValidator is a validator for the "shop_name" field. It is called by the builders before save.
	ShopNameValidator func(string) error
	// BizClass1Validator is a validator for the "biz_class_1" field. It is called by the builders before save.
	BizClass1Validator func(string) error
	// BizClassName1Validator is a validator for the "biz_class_name_1" field. It is called by the builders before save.
	BizClassName1Validator func(string) error
	// BizClass2Validator is a validator for the "biz_class_2" field. It is called by the builders before save.
	BizClass2Validator func(string) error
	// BizClassName2Validator is a validator for the "biz_class_name_2" field. It is called by the builders before save.
	BizClassName2Validator func(string) error
	// DefaultBizBeginTime holds the default value on creation for the "biz_begin_time" field.
	DefaultBizBeginTime func() time.Time
	// DefaultBizEndTime holds the default value on creation for the "biz_end_time" field.
	DefaultBizEndTime func() time.Time
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus int
)

// OrderOption defines the ordering options for the Shop queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}

// ByMallCode orders the results by the mall_code field.
func ByMallCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMallCode, opts...).ToFunc()
}

// ByMallName orders the results by the mall_name field.
func ByMallName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMallName, opts...).ToFunc()
}

// ByContractCode orders the results by the contract_code field.
func ByContractCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContractCode, opts...).ToFunc()
}

// ByPosCode orders the results by the pos_code field.
func ByPosCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPosCode, opts...).ToFunc()
}

// ByShopCode orders the results by the shop_code field.
func ByShopCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShopCode, opts...).ToFunc()
}

// ByShopName orders the results by the shop_name field.
func ByShopName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShopName, opts...).ToFunc()
}

// ByBizClass1 orders the results by the biz_class_1 field.
func ByBizClass1(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBizClass1, opts...).ToFunc()
}

// ByBizClassName1 orders the results by the biz_class_name_1 field.
func ByBizClassName1(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBizClassName1, opts...).ToFunc()
}

// ByBizClass2 orders the results by the biz_class_2 field.
func ByBizClass2(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBizClass2, opts...).ToFunc()
}

// ByBizClassName2 orders the results by the biz_class_name_2 field.
func ByBizClassName2(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBizClassName2, opts...).ToFunc()
}

// ByBizBeginTime orders the results by the biz_begin_time field.
func ByBizBeginTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBizBeginTime, opts...).ToFunc()
}

// ByBizEndTime orders the results by the biz_end_time field.
func ByBizEndTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBizEndTime, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}
