// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/twiglab/crm/erp/orm/ent/shop"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 1)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   shop.Table,
			Columns: shop.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: shop.FieldID,
			},
		},
		Type: "Shop",
		Fields: map[string]*sqlgraph.FieldSpec{
			shop.FieldCreateTime:    {Type: field.TypeTime, Column: shop.FieldCreateTime},
			shop.FieldUpdateTime:    {Type: field.TypeTime, Column: shop.FieldUpdateTime},
			shop.FieldCode:          {Type: field.TypeString, Column: shop.FieldCode},
			shop.FieldMallCode:      {Type: field.TypeString, Column: shop.FieldMallCode},
			shop.FieldMallName:      {Type: field.TypeString, Column: shop.FieldMallName},
			shop.FieldContractCode:  {Type: field.TypeString, Column: shop.FieldContractCode},
			shop.FieldFloor:         {Type: field.TypeString, Column: shop.FieldFloor},
			shop.FieldPos:           {Type: field.TypeString, Column: shop.FieldPos},
			shop.FieldShopCode:      {Type: field.TypeString, Column: shop.FieldShopCode},
			shop.FieldShopName:      {Type: field.TypeString, Column: shop.FieldShopName},
			shop.FieldBizClass1:     {Type: field.TypeString, Column: shop.FieldBizClass1},
			shop.FieldBizClassName1: {Type: field.TypeString, Column: shop.FieldBizClassName1},
			shop.FieldBizClass2:     {Type: field.TypeString, Column: shop.FieldBizClass2},
			shop.FieldBizClassName2: {Type: field.TypeString, Column: shop.FieldBizClassName2},
			shop.FieldStatus:        {Type: field.TypeString, Column: shop.FieldStatus},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (sq *ShopQuery) addPredicate(pred func(s *sql.Selector)) {
	sq.predicates = append(sq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ShopQuery builder.
func (sq *ShopQuery) Filter() *ShopFilter {
	return &ShopFilter{config: sq.config, predicateAdder: sq}
}

// addPredicate implements the predicateAdder interface.
func (m *ShopMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ShopMutation builder.
func (m *ShopMutation) Filter() *ShopFilter {
	return &ShopFilter{config: m.config, predicateAdder: m}
}

// ShopFilter provides a generic filtering capability at runtime for ShopQuery.
type ShopFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ShopFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *ShopFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(shop.FieldID))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *ShopFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(shop.FieldCreateTime))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *ShopFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(shop.FieldUpdateTime))
}

// WhereCode applies the entql string predicate on the code field.
func (f *ShopFilter) WhereCode(p entql.StringP) {
	f.Where(p.Field(shop.FieldCode))
}

// WhereMallCode applies the entql string predicate on the mall_code field.
func (f *ShopFilter) WhereMallCode(p entql.StringP) {
	f.Where(p.Field(shop.FieldMallCode))
}

// WhereMallName applies the entql string predicate on the mall_name field.
func (f *ShopFilter) WhereMallName(p entql.StringP) {
	f.Where(p.Field(shop.FieldMallName))
}

// WhereContractCode applies the entql string predicate on the contract_code field.
func (f *ShopFilter) WhereContractCode(p entql.StringP) {
	f.Where(p.Field(shop.FieldContractCode))
}

// WhereFloor applies the entql string predicate on the floor field.
func (f *ShopFilter) WhereFloor(p entql.StringP) {
	f.Where(p.Field(shop.FieldFloor))
}

// WherePos applies the entql string predicate on the pos field.
func (f *ShopFilter) WherePos(p entql.StringP) {
	f.Where(p.Field(shop.FieldPos))
}

// WhereShopCode applies the entql string predicate on the shop_code field.
func (f *ShopFilter) WhereShopCode(p entql.StringP) {
	f.Where(p.Field(shop.FieldShopCode))
}

// WhereShopName applies the entql string predicate on the shop_name field.
func (f *ShopFilter) WhereShopName(p entql.StringP) {
	f.Where(p.Field(shop.FieldShopName))
}

// WhereBizClass1 applies the entql string predicate on the biz_class_1 field.
func (f *ShopFilter) WhereBizClass1(p entql.StringP) {
	f.Where(p.Field(shop.FieldBizClass1))
}

// WhereBizClassName1 applies the entql string predicate on the biz_class_name_1 field.
func (f *ShopFilter) WhereBizClassName1(p entql.StringP) {
	f.Where(p.Field(shop.FieldBizClassName1))
}

// WhereBizClass2 applies the entql string predicate on the biz_class_2 field.
func (f *ShopFilter) WhereBizClass2(p entql.StringP) {
	f.Where(p.Field(shop.FieldBizClass2))
}

// WhereBizClassName2 applies the entql string predicate on the biz_class_name_2 field.
func (f *ShopFilter) WhereBizClassName2(p entql.StringP) {
	f.Where(p.Field(shop.FieldBizClassName2))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *ShopFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(shop.FieldStatus))
}
