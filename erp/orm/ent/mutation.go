// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/twiglab/crm/erp/orm/ent/predicate"
	"github.com/twiglab/crm/erp/orm/ent/shop"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeShop = "Shop"
)

// ShopMutation represents an operation that mutates the Shop nodes in the graph.
type ShopMutation struct {
	config
	op               Op
	typ              string
	id               *int
	create_time      *time.Time
	update_time      *time.Time
	code             *string
	mall_code        *string
	mall_name        *string
	contract_code    *string
	floor            *string
	pos              *string
	shop_code        *string
	shop_name        *string
	biz_class_1      *string
	biz_class_name_1 *string
	biz_class_2      *string
	biz_class_name_2 *string
	status           *string
	clearedFields    map[string]struct{}
	done             bool
	oldValue         func(context.Context) (*Shop, error)
	predicates       []predicate.Shop
}

var _ ent.Mutation = (*ShopMutation)(nil)

// shopOption allows management of the mutation configuration using functional options.
type shopOption func(*ShopMutation)

// newShopMutation creates new mutation for the Shop entity.
func newShopMutation(c config, op Op, opts ...shopOption) *ShopMutation {
	m := &ShopMutation{
		config:        c,
		op:            op,
		typ:           TypeShop,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withShopID sets the ID field of the mutation.
func withShopID(id int) shopOption {
	return func(m *ShopMutation) {
		var (
			err   error
			once  sync.Once
			value *Shop
		)
		m.oldValue = func(ctx context.Context) (*Shop, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Shop.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withShop sets the old Shop of the mutation.
func withShop(node *Shop) shopOption {
	return func(m *ShopMutation) {
		m.oldValue = func(context.Context) (*Shop, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ShopMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ShopMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ShopMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ShopMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Shop.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *ShopMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *ShopMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Shop entity.
// If the Shop object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShopMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *ShopMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *ShopMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *ShopMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Shop entity.
// If the Shop object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShopMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *ShopMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetCode sets the "code" field.
func (m *ShopMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *ShopMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the Shop entity.
// If the Shop object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShopMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *ShopMutation) ResetCode() {
	m.code = nil
}

// SetMallCode sets the "mall_code" field.
func (m *ShopMutation) SetMallCode(s string) {
	m.mall_code = &s
}

// MallCode returns the value of the "mall_code" field in the mutation.
func (m *ShopMutation) MallCode() (r string, exists bool) {
	v := m.mall_code
	if v == nil {
		return
	}
	return *v, true
}

// OldMallCode returns the old "mall_code" field's value of the Shop entity.
// If the Shop object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShopMutation) OldMallCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMallCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMallCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMallCode: %w", err)
	}
	return oldValue.MallCode, nil
}

// ResetMallCode resets all changes to the "mall_code" field.
func (m *ShopMutation) ResetMallCode() {
	m.mall_code = nil
}

// SetMallName sets the "mall_name" field.
func (m *ShopMutation) SetMallName(s string) {
	m.mall_name = &s
}

// MallName returns the value of the "mall_name" field in the mutation.
func (m *ShopMutation) MallName() (r string, exists bool) {
	v := m.mall_name
	if v == nil {
		return
	}
	return *v, true
}

// OldMallName returns the old "mall_name" field's value of the Shop entity.
// If the Shop object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShopMutation) OldMallName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMallName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMallName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMallName: %w", err)
	}
	return oldValue.MallName, nil
}

// ResetMallName resets all changes to the "mall_name" field.
func (m *ShopMutation) ResetMallName() {
	m.mall_name = nil
}

// SetContractCode sets the "contract_code" field.
func (m *ShopMutation) SetContractCode(s string) {
	m.contract_code = &s
}

// ContractCode returns the value of the "contract_code" field in the mutation.
func (m *ShopMutation) ContractCode() (r string, exists bool) {
	v := m.contract_code
	if v == nil {
		return
	}
	return *v, true
}

// OldContractCode returns the old "contract_code" field's value of the Shop entity.
// If the Shop object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShopMutation) OldContractCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContractCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContractCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContractCode: %w", err)
	}
	return oldValue.ContractCode, nil
}

// ResetContractCode resets all changes to the "contract_code" field.
func (m *ShopMutation) ResetContractCode() {
	m.contract_code = nil
}

// SetFloor sets the "floor" field.
func (m *ShopMutation) SetFloor(s string) {
	m.floor = &s
}

// Floor returns the value of the "floor" field in the mutation.
func (m *ShopMutation) Floor() (r string, exists bool) {
	v := m.floor
	if v == nil {
		return
	}
	return *v, true
}

// OldFloor returns the old "floor" field's value of the Shop entity.
// If the Shop object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShopMutation) OldFloor(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFloor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFloor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFloor: %w", err)
	}
	return oldValue.Floor, nil
}

// ResetFloor resets all changes to the "floor" field.
func (m *ShopMutation) ResetFloor() {
	m.floor = nil
}

// SetPos sets the "pos" field.
func (m *ShopMutation) SetPos(s string) {
	m.pos = &s
}

// Pos returns the value of the "pos" field in the mutation.
func (m *ShopMutation) Pos() (r string, exists bool) {
	v := m.pos
	if v == nil {
		return
	}
	return *v, true
}

// OldPos returns the old "pos" field's value of the Shop entity.
// If the Shop object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShopMutation) OldPos(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPos is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPos requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPos: %w", err)
	}
	return oldValue.Pos, nil
}

// ResetPos resets all changes to the "pos" field.
func (m *ShopMutation) ResetPos() {
	m.pos = nil
}

// SetShopCode sets the "shop_code" field.
func (m *ShopMutation) SetShopCode(s string) {
	m.shop_code = &s
}

// ShopCode returns the value of the "shop_code" field in the mutation.
func (m *ShopMutation) ShopCode() (r string, exists bool) {
	v := m.shop_code
	if v == nil {
		return
	}
	return *v, true
}

// OldShopCode returns the old "shop_code" field's value of the Shop entity.
// If the Shop object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShopMutation) OldShopCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShopCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShopCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShopCode: %w", err)
	}
	return oldValue.ShopCode, nil
}

// ResetShopCode resets all changes to the "shop_code" field.
func (m *ShopMutation) ResetShopCode() {
	m.shop_code = nil
}

// SetShopName sets the "shop_name" field.
func (m *ShopMutation) SetShopName(s string) {
	m.shop_name = &s
}

// ShopName returns the value of the "shop_name" field in the mutation.
func (m *ShopMutation) ShopName() (r string, exists bool) {
	v := m.shop_name
	if v == nil {
		return
	}
	return *v, true
}

// OldShopName returns the old "shop_name" field's value of the Shop entity.
// If the Shop object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShopMutation) OldShopName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShopName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShopName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShopName: %w", err)
	}
	return oldValue.ShopName, nil
}

// ResetShopName resets all changes to the "shop_name" field.
func (m *ShopMutation) ResetShopName() {
	m.shop_name = nil
}

// SetBizClass1 sets the "biz_class_1" field.
func (m *ShopMutation) SetBizClass1(s string) {
	m.biz_class_1 = &s
}

// BizClass1 returns the value of the "biz_class_1" field in the mutation.
func (m *ShopMutation) BizClass1() (r string, exists bool) {
	v := m.biz_class_1
	if v == nil {
		return
	}
	return *v, true
}

// OldBizClass1 returns the old "biz_class_1" field's value of the Shop entity.
// If the Shop object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShopMutation) OldBizClass1(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBizClass1 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBizClass1 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBizClass1: %w", err)
	}
	return oldValue.BizClass1, nil
}

// ClearBizClass1 clears the value of the "biz_class_1" field.
func (m *ShopMutation) ClearBizClass1() {
	m.biz_class_1 = nil
	m.clearedFields[shop.FieldBizClass1] = struct{}{}
}

// BizClass1Cleared returns if the "biz_class_1" field was cleared in this mutation.
func (m *ShopMutation) BizClass1Cleared() bool {
	_, ok := m.clearedFields[shop.FieldBizClass1]
	return ok
}

// ResetBizClass1 resets all changes to the "biz_class_1" field.
func (m *ShopMutation) ResetBizClass1() {
	m.biz_class_1 = nil
	delete(m.clearedFields, shop.FieldBizClass1)
}

// SetBizClassName1 sets the "biz_class_name_1" field.
func (m *ShopMutation) SetBizClassName1(s string) {
	m.biz_class_name_1 = &s
}

// BizClassName1 returns the value of the "biz_class_name_1" field in the mutation.
func (m *ShopMutation) BizClassName1() (r string, exists bool) {
	v := m.biz_class_name_1
	if v == nil {
		return
	}
	return *v, true
}

// OldBizClassName1 returns the old "biz_class_name_1" field's value of the Shop entity.
// If the Shop object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShopMutation) OldBizClassName1(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBizClassName1 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBizClassName1 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBizClassName1: %w", err)
	}
	return oldValue.BizClassName1, nil
}

// ClearBizClassName1 clears the value of the "biz_class_name_1" field.
func (m *ShopMutation) ClearBizClassName1() {
	m.biz_class_name_1 = nil
	m.clearedFields[shop.FieldBizClassName1] = struct{}{}
}

// BizClassName1Cleared returns if the "biz_class_name_1" field was cleared in this mutation.
func (m *ShopMutation) BizClassName1Cleared() bool {
	_, ok := m.clearedFields[shop.FieldBizClassName1]
	return ok
}

// ResetBizClassName1 resets all changes to the "biz_class_name_1" field.
func (m *ShopMutation) ResetBizClassName1() {
	m.biz_class_name_1 = nil
	delete(m.clearedFields, shop.FieldBizClassName1)
}

// SetBizClass2 sets the "biz_class_2" field.
func (m *ShopMutation) SetBizClass2(s string) {
	m.biz_class_2 = &s
}

// BizClass2 returns the value of the "biz_class_2" field in the mutation.
func (m *ShopMutation) BizClass2() (r string, exists bool) {
	v := m.biz_class_2
	if v == nil {
		return
	}
	return *v, true
}

// OldBizClass2 returns the old "biz_class_2" field's value of the Shop entity.
// If the Shop object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShopMutation) OldBizClass2(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBizClass2 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBizClass2 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBizClass2: %w", err)
	}
	return oldValue.BizClass2, nil
}

// ClearBizClass2 clears the value of the "biz_class_2" field.
func (m *ShopMutation) ClearBizClass2() {
	m.biz_class_2 = nil
	m.clearedFields[shop.FieldBizClass2] = struct{}{}
}

// BizClass2Cleared returns if the "biz_class_2" field was cleared in this mutation.
func (m *ShopMutation) BizClass2Cleared() bool {
	_, ok := m.clearedFields[shop.FieldBizClass2]
	return ok
}

// ResetBizClass2 resets all changes to the "biz_class_2" field.
func (m *ShopMutation) ResetBizClass2() {
	m.biz_class_2 = nil
	delete(m.clearedFields, shop.FieldBizClass2)
}

// SetBizClassName2 sets the "biz_class_name_2" field.
func (m *ShopMutation) SetBizClassName2(s string) {
	m.biz_class_name_2 = &s
}

// BizClassName2 returns the value of the "biz_class_name_2" field in the mutation.
func (m *ShopMutation) BizClassName2() (r string, exists bool) {
	v := m.biz_class_name_2
	if v == nil {
		return
	}
	return *v, true
}

// OldBizClassName2 returns the old "biz_class_name_2" field's value of the Shop entity.
// If the Shop object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShopMutation) OldBizClassName2(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBizClassName2 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBizClassName2 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBizClassName2: %w", err)
	}
	return oldValue.BizClassName2, nil
}

// ClearBizClassName2 clears the value of the "biz_class_name_2" field.
func (m *ShopMutation) ClearBizClassName2() {
	m.biz_class_name_2 = nil
	m.clearedFields[shop.FieldBizClassName2] = struct{}{}
}

// BizClassName2Cleared returns if the "biz_class_name_2" field was cleared in this mutation.
func (m *ShopMutation) BizClassName2Cleared() bool {
	_, ok := m.clearedFields[shop.FieldBizClassName2]
	return ok
}

// ResetBizClassName2 resets all changes to the "biz_class_name_2" field.
func (m *ShopMutation) ResetBizClassName2() {
	m.biz_class_name_2 = nil
	delete(m.clearedFields, shop.FieldBizClassName2)
}

// SetStatus sets the "status" field.
func (m *ShopMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *ShopMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Shop entity.
// If the Shop object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ShopMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *ShopMutation) ResetStatus() {
	m.status = nil
}

// Where appends a list predicates to the ShopMutation builder.
func (m *ShopMutation) Where(ps ...predicate.Shop) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ShopMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ShopMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Shop, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ShopMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ShopMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Shop).
func (m *ShopMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ShopMutation) Fields() []string {
	fields := make([]string, 0, 15)
	if m.create_time != nil {
		fields = append(fields, shop.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, shop.FieldUpdateTime)
	}
	if m.code != nil {
		fields = append(fields, shop.FieldCode)
	}
	if m.mall_code != nil {
		fields = append(fields, shop.FieldMallCode)
	}
	if m.mall_name != nil {
		fields = append(fields, shop.FieldMallName)
	}
	if m.contract_code != nil {
		fields = append(fields, shop.FieldContractCode)
	}
	if m.floor != nil {
		fields = append(fields, shop.FieldFloor)
	}
	if m.pos != nil {
		fields = append(fields, shop.FieldPos)
	}
	if m.shop_code != nil {
		fields = append(fields, shop.FieldShopCode)
	}
	if m.shop_name != nil {
		fields = append(fields, shop.FieldShopName)
	}
	if m.biz_class_1 != nil {
		fields = append(fields, shop.FieldBizClass1)
	}
	if m.biz_class_name_1 != nil {
		fields = append(fields, shop.FieldBizClassName1)
	}
	if m.biz_class_2 != nil {
		fields = append(fields, shop.FieldBizClass2)
	}
	if m.biz_class_name_2 != nil {
		fields = append(fields, shop.FieldBizClassName2)
	}
	if m.status != nil {
		fields = append(fields, shop.FieldStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ShopMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case shop.FieldCreateTime:
		return m.CreateTime()
	case shop.FieldUpdateTime:
		return m.UpdateTime()
	case shop.FieldCode:
		return m.Code()
	case shop.FieldMallCode:
		return m.MallCode()
	case shop.FieldMallName:
		return m.MallName()
	case shop.FieldContractCode:
		return m.ContractCode()
	case shop.FieldFloor:
		return m.Floor()
	case shop.FieldPos:
		return m.Pos()
	case shop.FieldShopCode:
		return m.ShopCode()
	case shop.FieldShopName:
		return m.ShopName()
	case shop.FieldBizClass1:
		return m.BizClass1()
	case shop.FieldBizClassName1:
		return m.BizClassName1()
	case shop.FieldBizClass2:
		return m.BizClass2()
	case shop.FieldBizClassName2:
		return m.BizClassName2()
	case shop.FieldStatus:
		return m.Status()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ShopMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case shop.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case shop.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case shop.FieldCode:
		return m.OldCode(ctx)
	case shop.FieldMallCode:
		return m.OldMallCode(ctx)
	case shop.FieldMallName:
		return m.OldMallName(ctx)
	case shop.FieldContractCode:
		return m.OldContractCode(ctx)
	case shop.FieldFloor:
		return m.OldFloor(ctx)
	case shop.FieldPos:
		return m.OldPos(ctx)
	case shop.FieldShopCode:
		return m.OldShopCode(ctx)
	case shop.FieldShopName:
		return m.OldShopName(ctx)
	case shop.FieldBizClass1:
		return m.OldBizClass1(ctx)
	case shop.FieldBizClassName1:
		return m.OldBizClassName1(ctx)
	case shop.FieldBizClass2:
		return m.OldBizClass2(ctx)
	case shop.FieldBizClassName2:
		return m.OldBizClassName2(ctx)
	case shop.FieldStatus:
		return m.OldStatus(ctx)
	}
	return nil, fmt.Errorf("unknown Shop field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ShopMutation) SetField(name string, value ent.Value) error {
	switch name {
	case shop.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case shop.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case shop.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case shop.FieldMallCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMallCode(v)
		return nil
	case shop.FieldMallName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMallName(v)
		return nil
	case shop.FieldContractCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContractCode(v)
		return nil
	case shop.FieldFloor:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFloor(v)
		return nil
	case shop.FieldPos:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPos(v)
		return nil
	case shop.FieldShopCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShopCode(v)
		return nil
	case shop.FieldShopName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShopName(v)
		return nil
	case shop.FieldBizClass1:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBizClass1(v)
		return nil
	case shop.FieldBizClassName1:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBizClassName1(v)
		return nil
	case shop.FieldBizClass2:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBizClass2(v)
		return nil
	case shop.FieldBizClassName2:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBizClassName2(v)
		return nil
	case shop.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	}
	return fmt.Errorf("unknown Shop field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ShopMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ShopMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ShopMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Shop numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ShopMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(shop.FieldBizClass1) {
		fields = append(fields, shop.FieldBizClass1)
	}
	if m.FieldCleared(shop.FieldBizClassName1) {
		fields = append(fields, shop.FieldBizClassName1)
	}
	if m.FieldCleared(shop.FieldBizClass2) {
		fields = append(fields, shop.FieldBizClass2)
	}
	if m.FieldCleared(shop.FieldBizClassName2) {
		fields = append(fields, shop.FieldBizClassName2)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ShopMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ShopMutation) ClearField(name string) error {
	switch name {
	case shop.FieldBizClass1:
		m.ClearBizClass1()
		return nil
	case shop.FieldBizClassName1:
		m.ClearBizClassName1()
		return nil
	case shop.FieldBizClass2:
		m.ClearBizClass2()
		return nil
	case shop.FieldBizClassName2:
		m.ClearBizClassName2()
		return nil
	}
	return fmt.Errorf("unknown Shop nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ShopMutation) ResetField(name string) error {
	switch name {
	case shop.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case shop.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case shop.FieldCode:
		m.ResetCode()
		return nil
	case shop.FieldMallCode:
		m.ResetMallCode()
		return nil
	case shop.FieldMallName:
		m.ResetMallName()
		return nil
	case shop.FieldContractCode:
		m.ResetContractCode()
		return nil
	case shop.FieldFloor:
		m.ResetFloor()
		return nil
	case shop.FieldPos:
		m.ResetPos()
		return nil
	case shop.FieldShopCode:
		m.ResetShopCode()
		return nil
	case shop.FieldShopName:
		m.ResetShopName()
		return nil
	case shop.FieldBizClass1:
		m.ResetBizClass1()
		return nil
	case shop.FieldBizClassName1:
		m.ResetBizClassName1()
		return nil
	case shop.FieldBizClass2:
		m.ResetBizClass2()
		return nil
	case shop.FieldBizClassName2:
		m.ResetBizClassName2()
		return nil
	case shop.FieldStatus:
		m.ResetStatus()
		return nil
	}
	return fmt.Errorf("unknown Shop field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ShopMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ShopMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ShopMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ShopMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ShopMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ShopMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ShopMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Shop unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ShopMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Shop edge %s", name)
}
