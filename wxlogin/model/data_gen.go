package model

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *AuthInfo) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "js_code":
			z.JsCode, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "JsCode")
				return
			}
		case "wx_open_id":
			z.WxOpenID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "WxOpenID")
				return
			}
		case "auth_code":
			z.AuthCode, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "AuthCode")
				return
			}
		case "code":
			z.Code, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Code")
				return
			}
		case "phone_no":
			z.PhoneNo, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "PhoneNo")
				return
			}
		case "id":
			z.UID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "UID")
				return
			}
		case "ts":
			z.Ts, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Ts")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *AuthInfo) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 7
	// write "js_code"
	err = en.Append(0x87, 0xa7, 0x6a, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.JsCode)
	if err != nil {
		err = msgp.WrapError(err, "JsCode")
		return
	}
	// write "wx_open_id"
	err = en.Append(0xaa, 0x77, 0x78, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.WxOpenID)
	if err != nil {
		err = msgp.WrapError(err, "WxOpenID")
		return
	}
	// write "auth_code"
	err = en.Append(0xa9, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.AuthCode)
	if err != nil {
		err = msgp.WrapError(err, "AuthCode")
		return
	}
	// write "code"
	err = en.Append(0xa4, 0x63, 0x6f, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Code)
	if err != nil {
		err = msgp.WrapError(err, "Code")
		return
	}
	// write "phone_no"
	err = en.Append(0xa8, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x6f)
	if err != nil {
		return
	}
	err = en.WriteString(z.PhoneNo)
	if err != nil {
		err = msgp.WrapError(err, "PhoneNo")
		return
	}
	// write "id"
	err = en.Append(0xa2, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.UID)
	if err != nil {
		err = msgp.WrapError(err, "UID")
		return
	}
	// write "ts"
	err = en.Append(0xa2, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Ts)
	if err != nil {
		err = msgp.WrapError(err, "Ts")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *AuthInfo) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 7
	// string "js_code"
	o = append(o, 0x87, 0xa7, 0x6a, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65)
	o = msgp.AppendString(o, z.JsCode)
	// string "wx_open_id"
	o = append(o, 0xaa, 0x77, 0x78, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64)
	o = msgp.AppendString(o, z.WxOpenID)
	// string "auth_code"
	o = append(o, 0xa9, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x64, 0x65)
	o = msgp.AppendString(o, z.AuthCode)
	// string "code"
	o = append(o, 0xa4, 0x63, 0x6f, 0x64, 0x65)
	o = msgp.AppendString(o, z.Code)
	// string "phone_no"
	o = append(o, 0xa8, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x6f)
	o = msgp.AppendString(o, z.PhoneNo)
	// string "id"
	o = append(o, 0xa2, 0x69, 0x64)
	o = msgp.AppendString(o, z.UID)
	// string "ts"
	o = append(o, 0xa2, 0x74, 0x73)
	o = msgp.AppendInt64(o, z.Ts)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AuthInfo) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "js_code":
			z.JsCode, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "JsCode")
				return
			}
		case "wx_open_id":
			z.WxOpenID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "WxOpenID")
				return
			}
		case "auth_code":
			z.AuthCode, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "AuthCode")
				return
			}
		case "code":
			z.Code, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Code")
				return
			}
		case "phone_no":
			z.PhoneNo, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PhoneNo")
				return
			}
		case "id":
			z.UID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "UID")
				return
			}
		case "ts":
			z.Ts, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Ts")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *AuthInfo) Msgsize() (s int) {
	s = 1 + 8 + msgp.StringPrefixSize + len(z.JsCode) + 11 + msgp.StringPrefixSize + len(z.WxOpenID) + 10 + msgp.StringPrefixSize + len(z.AuthCode) + 5 + msgp.StringPrefixSize + len(z.Code) + 9 + msgp.StringPrefixSize + len(z.PhoneNo) + 3 + msgp.StringPrefixSize + len(z.UID) + 3 + msgp.Int64Size
	return
}
